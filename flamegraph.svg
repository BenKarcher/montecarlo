<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="10414"><g><title>montecarlo::Latice::random_edge (6 samples, 0.06%)</title><rect x="0.0000%" y="661" width="0.0576%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="6"/><text x="0.2500%" y="671.50"></text></g><g><title>rand::rng::Rng::gen_range (6 samples, 0.06%)</title><rect x="0.0000%" y="645" width="0.0576%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="6"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (6 samples, 0.06%)</title><rect x="0.0000%" y="629" width="0.0576%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="6"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (6 samples, 0.06%)</title><rect x="0.0000%" y="613" width="0.0576%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="6"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (6 samples, 0.06%)</title><rect x="0.0000%" y="597" width="0.0576%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="6"/><text x="0.2500%" y="607.50"></text></g><g><title>rand::rng::Rng::gen (6 samples, 0.06%)</title><rect x="0.0000%" y="581" width="0.0576%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="6"/><text x="0.2500%" y="591.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (6 samples, 0.06%)</title><rect x="0.0000%" y="565" width="0.0576%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="6"/><text x="0.2500%" y="575.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (6 samples, 0.06%)</title><rect x="0.0000%" y="549" width="0.0576%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="6"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (6 samples, 0.06%)</title><rect x="0.0000%" y="533" width="0.0576%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="6"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (6 samples, 0.06%)</title><rect x="0.0000%" y="517" width="0.0576%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="527.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (6 samples, 0.06%)</title><rect x="0.0000%" y="501" width="0.0576%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="6"/><text x="0.2500%" y="511.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (6 samples, 0.06%)</title><rect x="0.0000%" y="485" width="0.0576%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="6"/><text x="0.2500%" y="495.50"></text></g><g><title>montecarlo::State::diagonal_update (12 samples, 0.12%)</title><rect x="0.0000%" y="677" width="0.1152%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="12"/><text x="0.2500%" y="687.50"></text></g><g><title>rand::rng::Rng::gen (6 samples, 0.06%)</title><rect x="0.0576%" y="661" width="0.0576%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="6"/><text x="0.3076%" y="671.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (6 samples, 0.06%)</title><rect x="0.0576%" y="645" width="0.0576%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="6"/><text x="0.3076%" y="655.50"></text></g><g><title>rand::rng::Rng::gen (6 samples, 0.06%)</title><rect x="0.0576%" y="629" width="0.0576%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="6"/><text x="0.3076%" y="639.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (6 samples, 0.06%)</title><rect x="0.0576%" y="613" width="0.0576%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="6"/><text x="0.3076%" y="623.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (6 samples, 0.06%)</title><rect x="0.0576%" y="597" width="0.0576%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="6"/><text x="0.3076%" y="607.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (6 samples, 0.06%)</title><rect x="0.0576%" y="581" width="0.0576%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="6"/><text x="0.3076%" y="591.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (6 samples, 0.06%)</title><rect x="0.0576%" y="565" width="0.0576%" height="15" fill="rgb(226,26,5)" fg:x="6" fg:w="6"/><text x="0.3076%" y="575.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (6 samples, 0.06%)</title><rect x="0.0576%" y="549" width="0.0576%" height="15" fill="rgb(249,33,26)" fg:x="6" fg:w="6"/><text x="0.3076%" y="559.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (6 samples, 0.06%)</title><rect x="0.0576%" y="533" width="0.0576%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="6"/><text x="0.3076%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4 samples, 0.04%)</title><rect x="0.1152%" y="661" width="0.0384%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="4"/><text x="0.3652%" y="671.50"></text></g><g><title>[[heap]] (33 samples, 0.32%)</title><rect x="0.0000%" y="693" width="0.3169%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="33"/><text x="0.2500%" y="703.50"></text></g><g><title>montecarlo::State::off_diagonal_update (21 samples, 0.20%)</title><rect x="0.1152%" y="677" width="0.2017%" height="15" fill="rgb(241,131,45)" fg:x="12" fg:w="21"/><text x="0.3652%" y="687.50"></text></g><g><title>rand::rng::Rng::gen_range (16 samples, 0.15%)</title><rect x="0.1632%" y="661" width="0.1536%" height="15" fill="rgb(249,31,29)" fg:x="17" fg:w="16"/><text x="0.4132%" y="671.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (16 samples, 0.15%)</title><rect x="0.1632%" y="645" width="0.1536%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="16"/><text x="0.4132%" y="655.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (16 samples, 0.15%)</title><rect x="0.1632%" y="629" width="0.1536%" height="15" fill="rgb(238,160,17)" fg:x="17" fg:w="16"/><text x="0.4132%" y="639.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (16 samples, 0.15%)</title><rect x="0.1632%" y="613" width="0.1536%" height="15" fill="rgb(214,148,48)" fg:x="17" fg:w="16"/><text x="0.4132%" y="623.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.03%)</title><rect x="0.3169%" y="677" width="0.0288%" height="15" fill="rgb(232,36,49)" fg:x="33" fg:w="3"/><text x="0.5669%" y="687.50"></text></g><g><title>[[stack]] (4 samples, 0.04%)</title><rect x="0.3169%" y="693" width="0.0384%" height="15" fill="rgb(209,103,24)" fg:x="33" fg:w="4"/><text x="0.5669%" y="703.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="0.3745%" y="677" width="0.0192%" height="15" fill="rgb(229,88,8)" fg:x="39" fg:w="2"/><text x="0.6245%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="0.4225%" y="677" width="0.0192%" height="15" fill="rgb(213,181,19)" fg:x="44" fg:w="2"/><text x="0.6725%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="0.4417%" y="677" width="0.0192%" height="15" fill="rgb(254,191,54)" fg:x="46" fg:w="2"/><text x="0.6917%" y="687.50"></text></g><g><title>rand::rng::Rng::gen (51 samples, 0.49%)</title><rect x="0.4609%" y="677" width="0.4897%" height="15" fill="rgb(241,83,37)" fg:x="48" fg:w="51"/><text x="0.7109%" y="687.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (4 samples, 0.04%)</title><rect x="0.9122%" y="661" width="0.0384%" height="15" fill="rgb(233,36,39)" fg:x="95" fg:w="4"/><text x="1.1622%" y="671.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (4 samples, 0.04%)</title><rect x="0.9122%" y="645" width="0.0384%" height="15" fill="rgb(226,3,54)" fg:x="95" fg:w="4"/><text x="1.1622%" y="655.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (4 samples, 0.04%)</title><rect x="0.9122%" y="629" width="0.0384%" height="15" fill="rgb(245,192,40)" fg:x="95" fg:w="4"/><text x="1.1622%" y="639.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (4 samples, 0.04%)</title><rect x="0.9122%" y="613" width="0.0384%" height="15" fill="rgb(238,167,29)" fg:x="95" fg:w="4"/><text x="1.1622%" y="623.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (4 samples, 0.04%)</title><rect x="0.9122%" y="597" width="0.0384%" height="15" fill="rgb(232,182,51)" fg:x="95" fg:w="4"/><text x="1.1622%" y="607.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (4 samples, 0.04%)</title><rect x="0.9122%" y="581" width="0.0384%" height="15" fill="rgb(231,60,39)" fg:x="95" fg:w="4"/><text x="1.1622%" y="591.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::get_fork_counter (7 samples, 0.07%)</title><rect x="0.9506%" y="677" width="0.0672%" height="15" fill="rgb(208,69,12)" fg:x="99" fg:w="7"/><text x="1.2006%" y="687.50"></text></g><g><title>rand_chacha::guts::refill_wide (3 samples, 0.03%)</title><rect x="1.0179%" y="677" width="0.0288%" height="15" fill="rgb(235,93,37)" fg:x="106" fg:w="3"/><text x="1.2679%" y="687.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (6 samples, 0.06%)</title><rect x="1.0467%" y="677" width="0.0576%" height="15" fill="rgb(213,116,39)" fg:x="109" fg:w="6"/><text x="1.2967%" y="687.50"></text></g><g><title>[unknown] (79 samples, 0.76%)</title><rect x="0.3553%" y="693" width="0.7586%" height="15" fill="rgb(222,207,29)" fg:x="37" fg:w="79"/><text x="0.6053%" y="703.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="1.1331%" y="517" width="0.0192%" height="15" fill="rgb(206,96,30)" fg:x="118" fg:w="2"/><text x="1.3831%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="12.4736%" y="501" width="0.0192%" height="15" fill="rgb(218,138,4)" fg:x="1299" fg:w="2"/><text x="12.7236%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="12.4736%" y="485" width="0.0192%" height="15" fill="rgb(250,191,14)" fg:x="1299" fg:w="2"/><text x="12.7236%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="12.4736%" y="469" width="0.0192%" height="15" fill="rgb(239,60,40)" fg:x="1299" fg:w="2"/><text x="12.7236%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="12.4736%" y="453" width="0.0192%" height="15" fill="rgb(206,27,48)" fg:x="1299" fg:w="2"/><text x="12.7236%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="12.4736%" y="437" width="0.0192%" height="15" fill="rgb(225,35,8)" fg:x="1299" fg:w="2"/><text x="12.7236%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="12.4736%" y="421" width="0.0192%" height="15" fill="rgb(250,213,24)" fg:x="1299" fg:w="2"/><text x="12.7236%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="12.4736%" y="405" width="0.0192%" height="15" fill="rgb(247,123,22)" fg:x="1299" fg:w="2"/><text x="12.7236%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (14 samples, 0.13%)</title><rect x="12.4928%" y="501" width="0.1344%" height="15" fill="rgb(231,138,38)" fg:x="1301" fg:w="14"/><text x="12.7428%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (14 samples, 0.13%)</title><rect x="12.4928%" y="485" width="0.1344%" height="15" fill="rgb(231,145,46)" fg:x="1301" fg:w="14"/><text x="12.7428%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (14 samples, 0.13%)</title><rect x="12.4928%" y="469" width="0.1344%" height="15" fill="rgb(251,118,11)" fg:x="1301" fg:w="14"/><text x="12.7428%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (35 samples, 0.34%)</title><rect x="12.6272%" y="501" width="0.3361%" height="15" fill="rgb(217,147,25)" fg:x="1315" fg:w="35"/><text x="12.8772%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (35 samples, 0.34%)</title><rect x="12.6272%" y="485" width="0.3361%" height="15" fill="rgb(247,81,37)" fg:x="1315" fg:w="35"/><text x="12.8772%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (35 samples, 0.34%)</title><rect x="12.6272%" y="469" width="0.3361%" height="15" fill="rgb(209,12,38)" fg:x="1315" fg:w="35"/><text x="12.8772%" y="479.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (71 samples, 0.68%)</title><rect x="12.9729%" y="501" width="0.6818%" height="15" fill="rgb(227,1,9)" fg:x="1351" fg:w="71"/><text x="13.2229%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (71 samples, 0.68%)</title><rect x="12.9729%" y="485" width="0.6818%" height="15" fill="rgb(248,47,43)" fg:x="1351" fg:w="71"/><text x="13.2229%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (69 samples, 0.66%)</title><rect x="12.9921%" y="469" width="0.6626%" height="15" fill="rgb(221,10,30)" fg:x="1353" fg:w="69"/><text x="13.2421%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (38 samples, 0.36%)</title><rect x="13.6547%" y="485" width="0.3649%" height="15" fill="rgb(210,229,1)" fg:x="1422" fg:w="38"/><text x="13.9047%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (38 samples, 0.36%)</title><rect x="13.6547%" y="469" width="0.3649%" height="15" fill="rgb(222,148,37)" fg:x="1422" fg:w="38"/><text x="13.9047%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (38 samples, 0.36%)</title><rect x="13.6547%" y="453" width="0.3649%" height="15" fill="rgb(234,67,33)" fg:x="1422" fg:w="38"/><text x="13.9047%" y="463.50"></text></g><g><title>&lt;montecarlo::Edge as core::clone::Clone&gt;::clone (45 samples, 0.43%)</title><rect x="14.0196%" y="485" width="0.4321%" height="15" fill="rgb(247,98,35)" fg:x="1460" fg:w="45"/><text x="14.2696%" y="495.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (45 samples, 0.43%)</title><rect x="14.0196%" y="469" width="0.4321%" height="15" fill="rgb(247,138,52)" fg:x="1460" fg:w="45"/><text x="14.2696%" y="479.50"></text></g><g><title>&lt;usize as rand::distributions::utils::WideningMultiply&gt;::wmul (50 samples, 0.48%)</title><rect x="14.7494%" y="421" width="0.4801%" height="15" fill="rgb(213,79,30)" fg:x="1536" fg:w="50"/><text x="14.9994%" y="431.50"></text></g><g><title>&lt;u64 as rand::distributions::utils::WideningMultiply&gt;::wmul (50 samples, 0.48%)</title><rect x="14.7494%" y="405" width="0.4801%" height="15" fill="rgb(246,177,23)" fg:x="1536" fg:w="50"/><text x="14.9994%" y="415.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (16 samples, 0.15%)</title><rect x="16.2089%" y="341" width="0.1536%" height="15" fill="rgb(230,62,27)" fg:x="1688" fg:w="16"/><text x="16.4589%" y="351.50"></text></g><g><title>rand_chacha::guts::refill_wide (2 samples, 0.02%)</title><rect x="16.3818%" y="277" width="0.0192%" height="15" fill="rgb(216,154,8)" fg:x="1706" fg:w="2"/><text x="16.6318%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as ppv_lite86::types::StoreBytes&gt;::write_le (5 samples, 0.05%)</title><rect x="16.4202%" y="229" width="0.0480%" height="15" fill="rgb(244,35,45)" fg:x="1710" fg:w="5"/><text x="16.6702%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_storeu_si128 (5 samples, 0.05%)</title><rect x="16.4202%" y="213" width="0.0480%" height="15" fill="rgb(251,115,12)" fg:x="1710" fg:w="5"/><text x="16.6702%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (5 samples, 0.05%)</title><rect x="16.4202%" y="197" width="0.0480%" height="15" fill="rgb(240,54,50)" fg:x="1710" fg:w="5"/><text x="16.6702%" y="207.50"></text></g><g><title>core::ptr::write_unaligned (5 samples, 0.05%)</title><rect x="16.4202%" y="181" width="0.0480%" height="15" fill="rgb(233,84,52)" fg:x="1710" fg:w="5"/><text x="16.6702%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.05%)</title><rect x="16.4202%" y="165" width="0.0480%" height="15" fill="rgb(207,117,47)" fg:x="1710" fg:w="5"/><text x="16.6702%" y="175.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (6 samples, 0.06%)</title><rect x="16.4682%" y="229" width="0.0576%" height="15" fill="rgb(249,43,39)" fg:x="1715" fg:w="6"/><text x="16.7182%" y="239.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (6 samples, 0.06%)</title><rect x="16.4682%" y="213" width="0.0576%" height="15" fill="rgb(209,38,44)" fg:x="1715" fg:w="6"/><text x="16.7182%" y="223.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.04%)</title><rect x="16.5258%" y="229" width="0.0384%" height="15" fill="rgb(236,212,23)" fg:x="1721" fg:w="4"/><text x="16.7758%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.04%)</title><rect x="16.5258%" y="213" width="0.0384%" height="15" fill="rgb(242,79,21)" fg:x="1721" fg:w="4"/><text x="16.7758%" y="223.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::_&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::from_lanes (2 samples, 0.02%)</title><rect x="16.5738%" y="229" width="0.0192%" height="15" fill="rgb(211,96,35)" fg:x="1726" fg:w="2"/><text x="16.8238%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::from_lanes (2 samples, 0.02%)</title><rect x="16.5738%" y="213" width="0.0192%" height="15" fill="rgb(253,215,40)" fg:x="1726" fg:w="2"/><text x="16.8238%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (2 samples, 0.02%)</title><rect x="16.5738%" y="197" width="0.0192%" height="15" fill="rgb(211,81,21)" fg:x="1726" fg:w="2"/><text x="16.8238%" y="207.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (2 samples, 0.02%)</title><rect x="16.5738%" y="181" width="0.0192%" height="15" fill="rgb(208,190,38)" fg:x="1726" fg:w="2"/><text x="16.8238%" y="191.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128 (2 samples, 0.02%)</title><rect x="16.5738%" y="165" width="0.0192%" height="15" fill="rgb(235,213,38)" fg:x="1726" fg:w="2"/><text x="16.8238%" y="175.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3 samples, 0.03%)</title><rect x="16.6027%" y="213" width="0.0288%" height="15" fill="rgb(237,122,38)" fg:x="1729" fg:w="3"/><text x="16.8527%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3 samples, 0.03%)</title><rect x="16.6027%" y="197" width="0.0288%" height="15" fill="rgb(244,218,35)" fg:x="1729" fg:w="3"/><text x="16.8527%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (3 samples, 0.03%)</title><rect x="16.6027%" y="181" width="0.0288%" height="15" fill="rgb(240,68,47)" fg:x="1729" fg:w="3"/><text x="16.8527%" y="191.50"></text></g><g><title>rand_chacha::guts::diagonalize (9 samples, 0.09%)</title><rect x="16.6027%" y="229" width="0.0864%" height="15" fill="rgb(210,16,53)" fg:x="1729" fg:w="9"/><text x="16.8527%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (6 samples, 0.06%)</title><rect x="16.6315%" y="213" width="0.0576%" height="15" fill="rgb(235,124,12)" fg:x="1732" fg:w="6"/><text x="16.8815%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (6 samples, 0.06%)</title><rect x="16.6315%" y="197" width="0.0576%" height="15" fill="rgb(224,169,11)" fg:x="1732" fg:w="6"/><text x="16.8815%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (6 samples, 0.06%)</title><rect x="16.6315%" y="181" width="0.0576%" height="15" fill="rgb(250,166,2)" fg:x="1732" fg:w="6"/><text x="16.8815%" y="191.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (25 samples, 0.24%)</title><rect x="16.6891%" y="213" width="0.2401%" height="15" fill="rgb(242,216,29)" fg:x="1738" fg:w="25"/><text x="16.9391%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (25 samples, 0.24%)</title><rect x="16.6891%" y="197" width="0.2401%" height="15" fill="rgb(230,116,27)" fg:x="1738" fg:w="25"/><text x="16.9391%" y="207.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (25 samples, 0.24%)</title><rect x="16.6891%" y="181" width="0.2401%" height="15" fill="rgb(228,99,48)" fg:x="1738" fg:w="25"/><text x="16.9391%" y="191.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (25 samples, 0.24%)</title><rect x="16.6891%" y="165" width="0.2401%" height="15" fill="rgb(253,11,6)" fg:x="1738" fg:w="25"/><text x="16.9391%" y="175.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (13 samples, 0.12%)</title><rect x="16.9291%" y="213" width="0.1248%" height="15" fill="rgb(247,143,39)" fg:x="1763" fg:w="13"/><text x="17.1791%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (13 samples, 0.12%)</title><rect x="16.9291%" y="197" width="0.1248%" height="15" fill="rgb(236,97,10)" fg:x="1763" fg:w="13"/><text x="17.1791%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (13 samples, 0.12%)</title><rect x="16.9291%" y="181" width="0.1248%" height="15" fill="rgb(233,208,19)" fg:x="1763" fg:w="13"/><text x="17.1791%" y="191.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (12 samples, 0.12%)</title><rect x="17.0540%" y="213" width="0.1152%" height="15" fill="rgb(216,164,2)" fg:x="1776" fg:w="12"/><text x="17.3040%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (12 samples, 0.12%)</title><rect x="17.0540%" y="197" width="0.1152%" height="15" fill="rgb(220,129,5)" fg:x="1776" fg:w="12"/><text x="17.3040%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (12 samples, 0.12%)</title><rect x="17.0540%" y="181" width="0.1152%" height="15" fill="rgb(242,17,10)" fg:x="1776" fg:w="12"/><text x="17.3040%" y="191.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (21 samples, 0.20%)</title><rect x="17.1692%" y="213" width="0.2017%" height="15" fill="rgb(242,107,0)" fg:x="1788" fg:w="21"/><text x="17.4192%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (21 samples, 0.20%)</title><rect x="17.1692%" y="197" width="0.2017%" height="15" fill="rgb(251,28,31)" fg:x="1788" fg:w="21"/><text x="17.4192%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (21 samples, 0.20%)</title><rect x="17.1692%" y="181" width="0.2017%" height="15" fill="rgb(233,223,10)" fg:x="1788" fg:w="21"/><text x="17.4192%" y="191.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (12 samples, 0.12%)</title><rect x="17.3708%" y="213" width="0.1152%" height="15" fill="rgb(215,21,27)" fg:x="1809" fg:w="12"/><text x="17.6208%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (12 samples, 0.12%)</title><rect x="17.3708%" y="197" width="0.1152%" height="15" fill="rgb(232,23,21)" fg:x="1809" fg:w="12"/><text x="17.6208%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (12 samples, 0.12%)</title><rect x="17.3708%" y="181" width="0.1152%" height="15" fill="rgb(244,5,23)" fg:x="1809" fg:w="12"/><text x="17.6208%" y="191.50"></text></g><g><title>rand_chacha::guts::round (104 samples, 1.00%)</title><rect x="16.6891%" y="229" width="0.9987%" height="15" fill="rgb(226,81,46)" fg:x="1738" fg:w="104"/><text x="16.9391%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (21 samples, 0.20%)</title><rect x="17.4861%" y="213" width="0.2017%" height="15" fill="rgb(247,70,30)" fg:x="1821" fg:w="21"/><text x="17.7361%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (21 samples, 0.20%)</title><rect x="17.4861%" y="197" width="0.2017%" height="15" fill="rgb(212,68,19)" fg:x="1821" fg:w="21"/><text x="17.7361%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (21 samples, 0.20%)</title><rect x="17.4861%" y="181" width="0.2017%" height="15" fill="rgb(240,187,13)" fg:x="1821" fg:w="21"/><text x="17.7361%" y="191.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (6 samples, 0.06%)</title><rect x="17.6877%" y="213" width="0.0576%" height="15" fill="rgb(223,113,26)" fg:x="1842" fg:w="6"/><text x="17.9377%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (6 samples, 0.06%)</title><rect x="17.6877%" y="197" width="0.0576%" height="15" fill="rgb(206,192,2)" fg:x="1842" fg:w="6"/><text x="17.9377%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (6 samples, 0.06%)</title><rect x="17.6877%" y="181" width="0.0576%" height="15" fill="rgb(241,108,4)" fg:x="1842" fg:w="6"/><text x="17.9377%" y="191.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3 samples, 0.03%)</title><rect x="17.7453%" y="213" width="0.0288%" height="15" fill="rgb(247,173,49)" fg:x="1848" fg:w="3"/><text x="17.9953%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3 samples, 0.03%)</title><rect x="17.7453%" y="197" width="0.0288%" height="15" fill="rgb(224,114,35)" fg:x="1848" fg:w="3"/><text x="17.9953%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (3 samples, 0.03%)</title><rect x="17.7453%" y="181" width="0.0288%" height="15" fill="rgb(245,159,27)" fg:x="1848" fg:w="3"/><text x="17.9953%" y="191.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (149 samples, 1.43%)</title><rect x="16.3722%" y="309" width="1.4308%" height="15" fill="rgb(245,172,44)" fg:x="1705" fg:w="149"/><text x="16.6222%" y="319.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (149 samples, 1.43%)</title><rect x="16.3722%" y="293" width="1.4308%" height="15" fill="rgb(236,23,11)" fg:x="1705" fg:w="149"/><text x="16.6222%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (146 samples, 1.40%)</title><rect x="16.4010%" y="277" width="1.4020%" height="15" fill="rgb(205,117,38)" fg:x="1708" fg:w="146"/><text x="16.6510%" y="287.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (146 samples, 1.40%)</title><rect x="16.4010%" y="261" width="1.4020%" height="15" fill="rgb(237,72,25)" fg:x="1708" fg:w="146"/><text x="16.6510%" y="271.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (145 samples, 1.39%)</title><rect x="16.4106%" y="245" width="1.3924%" height="15" fill="rgb(244,70,9)" fg:x="1709" fg:w="145"/><text x="16.6606%" y="255.50"></text></g><g><title>rand_chacha::guts::undiagonalize (12 samples, 0.12%)</title><rect x="17.6877%" y="229" width="0.1152%" height="15" fill="rgb(217,125,39)" fg:x="1842" fg:w="12"/><text x="17.9377%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (3 samples, 0.03%)</title><rect x="17.7742%" y="213" width="0.0288%" height="15" fill="rgb(235,36,10)" fg:x="1851" fg:w="3"/><text x="18.0242%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (3 samples, 0.03%)</title><rect x="17.7742%" y="197" width="0.0288%" height="15" fill="rgb(251,123,47)" fg:x="1851" fg:w="3"/><text x="18.0242%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (3 samples, 0.03%)</title><rect x="17.7742%" y="181" width="0.0288%" height="15" fill="rgb(221,13,13)" fg:x="1851" fg:w="3"/><text x="18.0242%" y="191.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.02%)</title><rect x="17.8030%" y="293" width="0.0192%" height="15" fill="rgb(238,131,9)" fg:x="1854" fg:w="2"/><text x="18.0530%" y="303.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2 samples, 0.02%)</title><rect x="17.8030%" y="277" width="0.0192%" height="15" fill="rgb(211,50,8)" fg:x="1854" fg:w="2"/><text x="18.0530%" y="287.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2 samples, 0.02%)</title><rect x="17.8030%" y="261" width="0.0192%" height="15" fill="rgb(245,182,24)" fg:x="1854" fg:w="2"/><text x="18.0530%" y="271.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2 samples, 0.02%)</title><rect x="17.8030%" y="245" width="0.0192%" height="15" fill="rgb(242,14,37)" fg:x="1854" fg:w="2"/><text x="18.0530%" y="255.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2 samples, 0.02%)</title><rect x="17.8030%" y="229" width="0.0192%" height="15" fill="rgb(246,228,12)" fg:x="1854" fg:w="2"/><text x="18.0530%" y="239.50"></text></g><g><title>rand_chacha::guts::round (2 samples, 0.02%)</title><rect x="17.8030%" y="213" width="0.0192%" height="15" fill="rgb(213,55,15)" fg:x="1854" fg:w="2"/><text x="18.0530%" y="223.50"></text></g><g><title>montecarlo::Latice::random_edge (439 samples, 4.22%)</title><rect x="13.6547%" y="501" width="4.2155%" height="15" fill="rgb(209,9,3)" fg:x="1422" fg:w="439"/><text x="13.9047%" y="511.50">monte..</text></g><g><title>rand::rng::Rng::gen_range (356 samples, 3.42%)</title><rect x="14.4517%" y="485" width="3.4185%" height="15" fill="rgb(230,59,30)" fg:x="1505" fg:w="356"/><text x="14.7017%" y="495.50">ran..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (350 samples, 3.36%)</title><rect x="14.5093%" y="469" width="3.3609%" height="15" fill="rgb(209,121,21)" fg:x="1511" fg:w="350"/><text x="14.7593%" y="479.50">&lt;co..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (350 samples, 3.36%)</title><rect x="14.5093%" y="453" width="3.3609%" height="15" fill="rgb(220,109,13)" fg:x="1511" fg:w="350"/><text x="14.7593%" y="463.50">&lt;ra..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (350 samples, 3.36%)</title><rect x="14.5093%" y="437" width="3.3609%" height="15" fill="rgb(232,18,1)" fg:x="1511" fg:w="350"/><text x="14.7593%" y="447.50">&lt;ra..</text></g><g><title>rand::rng::Rng::gen (274 samples, 2.63%)</title><rect x="15.2391%" y="421" width="2.6311%" height="15" fill="rgb(215,41,42)" fg:x="1587" fg:w="274"/><text x="15.4891%" y="431.50">ra..</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (274 samples, 2.63%)</title><rect x="15.2391%" y="405" width="2.6311%" height="15" fill="rgb(224,123,36)" fg:x="1587" fg:w="274"/><text x="15.4891%" y="415.50">ra..</text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (274 samples, 2.63%)</title><rect x="15.2391%" y="389" width="2.6311%" height="15" fill="rgb(240,125,3)" fg:x="1587" fg:w="274"/><text x="15.4891%" y="399.50">&lt;r..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (274 samples, 2.63%)</title><rect x="15.2391%" y="373" width="2.6311%" height="15" fill="rgb(205,98,50)" fg:x="1587" fg:w="274"/><text x="15.4891%" y="383.50">&lt;r..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (274 samples, 2.63%)</title><rect x="15.2391%" y="357" width="2.6311%" height="15" fill="rgb(205,185,37)" fg:x="1587" fg:w="274"/><text x="15.4891%" y="367.50">&lt;r..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (157 samples, 1.51%)</title><rect x="16.3626%" y="341" width="1.5076%" height="15" fill="rgb(238,207,15)" fg:x="1704" fg:w="157"/><text x="16.6126%" y="351.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (157 samples, 1.51%)</title><rect x="16.3626%" y="325" width="1.5076%" height="15" fill="rgb(213,199,42)" fg:x="1704" fg:w="157"/><text x="16.6126%" y="335.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (7 samples, 0.07%)</title><rect x="17.8030%" y="309" width="0.0672%" height="15" fill="rgb(235,201,11)" fg:x="1854" fg:w="7"/><text x="18.0530%" y="319.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (5 samples, 0.05%)</title><rect x="17.8222%" y="293" width="0.0480%" height="15" fill="rgb(207,46,11)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="303.50"></text></g><g><title>rand_core::SeedableRng::from_rng (5 samples, 0.05%)</title><rect x="17.8222%" y="277" width="0.0480%" height="15" fill="rgb(241,35,35)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="287.50"></text></g><g><title>&lt;&amp;mut R as rand_core::RngCore&gt;::try_fill_bytes (5 samples, 0.05%)</title><rect x="17.8222%" y="261" width="0.0480%" height="15" fill="rgb(243,32,47)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="271.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (5 samples, 0.05%)</title><rect x="17.8222%" y="245" width="0.0480%" height="15" fill="rgb(247,202,23)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="255.50"></text></g><g><title>getrandom::getrandom (5 samples, 0.05%)</title><rect x="17.8222%" y="229" width="0.0480%" height="15" fill="rgb(219,102,11)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="239.50"></text></g><g><title>getrandom::getrandom_uninit (5 samples, 0.05%)</title><rect x="17.8222%" y="213" width="0.0480%" height="15" fill="rgb(243,110,44)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="223.50"></text></g><g><title>getrandom::imp::getrandom_inner (5 samples, 0.05%)</title><rect x="17.8222%" y="197" width="0.0480%" height="15" fill="rgb(222,74,54)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="207.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (5 samples, 0.05%)</title><rect x="17.8222%" y="181" width="0.0480%" height="15" fill="rgb(216,99,12)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="191.50"></text></g><g><title>getrandom::imp::getrandom_inner::_{{closure}} (5 samples, 0.05%)</title><rect x="17.8222%" y="165" width="0.0480%" height="15" fill="rgb(226,22,26)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="175.50"></text></g><g><title>getrandom::imp::getrandom (5 samples, 0.05%)</title><rect x="17.8222%" y="149" width="0.0480%" height="15" fill="rgb(217,163,10)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="159.50"></text></g><g><title>syscall (5 samples, 0.05%)</title><rect x="17.8222%" y="133" width="0.0480%" height="15" fill="rgb(213,25,53)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="17.8222%" y="117" width="0.0480%" height="15" fill="rgb(252,105,26)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="17.8222%" y="101" width="0.0480%" height="15" fill="rgb(220,39,43)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="17.8222%" y="85" width="0.0480%" height="15" fill="rgb(229,68,48)" fg:x="1856" fg:w="5"/><text x="18.0722%" y="95.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="17.8318%" y="69" width="0.0384%" height="15" fill="rgb(252,8,32)" fg:x="1857" fg:w="4"/><text x="18.0818%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="17.8510%" y="53" width="0.0192%" height="15" fill="rgb(223,20,43)" fg:x="1859" fg:w="2"/><text x="18.1010%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="17.8510%" y="37" width="0.0192%" height="15" fill="rgb(229,81,49)" fg:x="1859" fg:w="2"/><text x="18.1010%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (5 samples, 0.05%)</title><rect x="18.4079%" y="485" width="0.0480%" height="15" fill="rgb(236,28,36)" fg:x="1917" fg:w="5"/><text x="18.6579%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (5 samples, 0.05%)</title><rect x="18.4079%" y="469" width="0.0480%" height="15" fill="rgb(249,185,26)" fg:x="1917" fg:w="5"/><text x="18.6579%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (5 samples, 0.05%)</title><rect x="18.4079%" y="453" width="0.0480%" height="15" fill="rgb(249,174,33)" fg:x="1917" fg:w="5"/><text x="18.6579%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (28 samples, 0.27%)</title><rect x="18.4559%" y="485" width="0.2689%" height="15" fill="rgb(233,201,37)" fg:x="1922" fg:w="28"/><text x="18.7059%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (32 samples, 0.31%)</title><rect x="18.7248%" y="485" width="0.3073%" height="15" fill="rgb(221,78,26)" fg:x="1950" fg:w="32"/><text x="18.9748%" y="495.50"></text></g><g><title>core::mem::replace (32 samples, 0.31%)</title><rect x="18.7248%" y="469" width="0.3073%" height="15" fill="rgb(250,127,30)" fg:x="1950" fg:w="32"/><text x="18.9748%" y="479.50"></text></g><g><title>core::ptr::read (32 samples, 0.31%)</title><rect x="18.7248%" y="453" width="0.3073%" height="15" fill="rgb(230,49,44)" fg:x="1950" fg:w="32"/><text x="18.9748%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (5 samples, 0.05%)</title><rect x="19.0321%" y="485" width="0.0480%" height="15" fill="rgb(229,67,23)" fg:x="1982" fg:w="5"/><text x="19.2821%" y="495.50"></text></g><g><title>montecarlo::State::delete (133 samples, 1.28%)</title><rect x="17.8702%" y="501" width="1.2771%" height="15" fill="rgb(249,83,47)" fg:x="1861" fg:w="133"/><text x="18.1202%" y="511.50"></text></g><g><title>montecarlo::State::diagonal_update (7 samples, 0.07%)</title><rect x="19.0801%" y="485" width="0.0672%" height="15" fill="rgb(215,43,3)" fg:x="1987" fg:w="7"/><text x="19.3301%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (12 samples, 0.12%)</title><rect x="21.6920%" y="485" width="0.1152%" height="15" fill="rgb(238,154,13)" fg:x="2259" fg:w="12"/><text x="21.9420%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (12 samples, 0.12%)</title><rect x="21.6920%" y="469" width="0.1152%" height="15" fill="rgb(219,56,2)" fg:x="2259" fg:w="12"/><text x="21.9420%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (12 samples, 0.12%)</title><rect x="21.6920%" y="453" width="0.1152%" height="15" fill="rgb(233,0,4)" fg:x="2259" fg:w="12"/><text x="21.9420%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (66 samples, 0.63%)</title><rect x="21.8072%" y="485" width="0.6338%" height="15" fill="rgb(235,30,7)" fg:x="2271" fg:w="66"/><text x="22.0572%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (18 samples, 0.17%)</title><rect x="22.4409%" y="485" width="0.1728%" height="15" fill="rgb(250,79,13)" fg:x="2337" fg:w="18"/><text x="22.6909%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="61.9839%" y="469" width="0.0288%" height="15" fill="rgb(211,146,34)" fg:x="6455" fg:w="3"/><text x="62.2339%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="61.9935%" y="453" width="0.0192%" height="15" fill="rgb(228,22,38)" fg:x="6456" fg:w="2"/><text x="62.2435%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="61.9935%" y="437" width="0.0192%" height="15" fill="rgb(235,168,5)" fg:x="6456" fg:w="2"/><text x="62.2435%" y="447.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="61.9935%" y="421" width="0.0192%" height="15" fill="rgb(221,155,16)" fg:x="6456" fg:w="2"/><text x="62.2435%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="61.9935%" y="405" width="0.0192%" height="15" fill="rgb(215,215,53)" fg:x="6456" fg:w="2"/><text x="62.2435%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="61.9935%" y="389" width="0.0192%" height="15" fill="rgb(223,4,10)" fg:x="6456" fg:w="2"/><text x="62.2435%" y="399.50"></text></g><g><title>montecarlo::State::insert_diag (4,780 samples, 45.90%)</title><rect x="19.1473%" y="501" width="45.8998%" height="15" fill="rgb(234,103,6)" fg:x="1994" fg:w="4780"/><text x="19.3973%" y="511.50">montecarlo::State::insert_diag</text></g><g><title>montecarlo::State::trace (4,419 samples, 42.43%)</title><rect x="22.6138%" y="485" width="42.4333%" height="15" fill="rgb(227,97,0)" fg:x="2355" fg:w="4419"/><text x="22.8638%" y="495.50">montecarlo::State::trace</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (316 samples, 3.03%)</title><rect x="62.0127%" y="469" width="3.0344%" height="15" fill="rgb(234,150,53)" fg:x="6458" fg:w="316"/><text x="62.2627%" y="479.50">cor..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (316 samples, 3.03%)</title><rect x="62.0127%" y="453" width="3.0344%" height="15" fill="rgb(228,201,54)" fg:x="6458" fg:w="316"/><text x="62.2627%" y="463.50">&lt;co..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (316 samples, 3.03%)</title><rect x="62.0127%" y="437" width="3.0344%" height="15" fill="rgb(222,22,37)" fg:x="6458" fg:w="316"/><text x="62.2627%" y="447.50">cor..</text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="421" width="0.0960%" height="15" fill="rgb(237,53,32)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="431.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="405" width="0.0960%" height="15" fill="rgb(233,25,53)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="415.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="389" width="0.0960%" height="15" fill="rgb(210,40,34)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="399.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="373" width="0.0960%" height="15" fill="rgb(241,220,44)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="383.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="357" width="0.0960%" height="15" fill="rgb(235,28,35)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="367.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="341" width="0.0960%" height="15" fill="rgb(210,56,17)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="351.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="325" width="0.0960%" height="15" fill="rgb(224,130,29)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="335.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="309" width="0.0960%" height="15" fill="rgb(235,212,8)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="319.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="293" width="0.0960%" height="15" fill="rgb(223,33,50)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="303.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="277" width="0.0960%" height="15" fill="rgb(219,149,13)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="287.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="64.9510%" y="261" width="0.0960%" height="15" fill="rgb(250,156,29)" fg:x="6764" fg:w="10"/><text x="65.2010%" y="271.50"></text></g><g><title>&lt;f64 as rand::distributions::utils::FloatSIMDUtils&gt;::cast_from_int (38 samples, 0.36%)</title><rect x="65.0951%" y="469" width="0.3649%" height="15" fill="rgb(216,193,19)" fg:x="6779" fg:w="38"/><text x="65.3451%" y="479.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (29 samples, 0.28%)</title><rect x="66.0553%" y="389" width="0.2785%" height="15" fill="rgb(216,135,14)" fg:x="6879" fg:w="29"/><text x="66.3053%" y="399.50"></text></g><g><title>rand_chacha::guts::refill_wide (3 samples, 0.03%)</title><rect x="66.3434%" y="325" width="0.0288%" height="15" fill="rgb(241,47,5)" fg:x="6909" fg:w="3"/><text x="66.5934%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (3 samples, 0.03%)</title><rect x="66.3722%" y="293" width="0.0288%" height="15" fill="rgb(233,42,35)" fg:x="6912" fg:w="3"/><text x="66.6222%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as ppv_lite86::types::StoreBytes&gt;::write_le (4 samples, 0.04%)</title><rect x="66.4106%" y="277" width="0.0384%" height="15" fill="rgb(231,13,6)" fg:x="6916" fg:w="4"/><text x="66.6606%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_storeu_si128 (4 samples, 0.04%)</title><rect x="66.4106%" y="261" width="0.0384%" height="15" fill="rgb(207,181,40)" fg:x="6916" fg:w="4"/><text x="66.6606%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (4 samples, 0.04%)</title><rect x="66.4106%" y="245" width="0.0384%" height="15" fill="rgb(254,173,49)" fg:x="6916" fg:w="4"/><text x="66.6606%" y="255.50"></text></g><g><title>core::ptr::write_unaligned (4 samples, 0.04%)</title><rect x="66.4106%" y="229" width="0.0384%" height="15" fill="rgb(221,1,38)" fg:x="6916" fg:w="4"/><text x="66.6606%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="66.4106%" y="213" width="0.0384%" height="15" fill="rgb(206,124,46)" fg:x="6916" fg:w="4"/><text x="66.6606%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (11 samples, 0.11%)</title><rect x="66.4490%" y="277" width="0.1056%" height="15" fill="rgb(249,21,11)" fg:x="6920" fg:w="11"/><text x="66.6990%" y="287.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (11 samples, 0.11%)</title><rect x="66.4490%" y="261" width="0.1056%" height="15" fill="rgb(222,201,40)" fg:x="6920" fg:w="11"/><text x="66.6990%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.06%)</title><rect x="66.5546%" y="277" width="0.0576%" height="15" fill="rgb(235,61,29)" fg:x="6931" fg:w="6"/><text x="66.8046%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.06%)</title><rect x="66.5546%" y="261" width="0.0576%" height="15" fill="rgb(219,207,3)" fg:x="6931" fg:w="6"/><text x="66.8046%" y="271.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::_&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::to_lanes (6 samples, 0.06%)</title><rect x="66.6219%" y="277" width="0.0576%" height="15" fill="rgb(222,56,46)" fg:x="6938" fg:w="6"/><text x="66.8719%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::to_lanes (6 samples, 0.06%)</title><rect x="66.6219%" y="261" width="0.0576%" height="15" fill="rgb(239,76,54)" fg:x="6938" fg:w="6"/><text x="66.8719%" y="271.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_extracti128_si256 (6 samples, 0.06%)</title><rect x="66.6219%" y="245" width="0.0576%" height="15" fill="rgb(231,124,27)" fg:x="6938" fg:w="6"/><text x="66.8719%" y="255.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (2 samples, 0.02%)</title><rect x="66.6795%" y="261" width="0.0192%" height="15" fill="rgb(249,195,6)" fg:x="6944" fg:w="2"/><text x="66.9295%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (2 samples, 0.02%)</title><rect x="66.6795%" y="245" width="0.0192%" height="15" fill="rgb(237,174,47)" fg:x="6944" fg:w="2"/><text x="66.9295%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (2 samples, 0.02%)</title><rect x="66.6795%" y="229" width="0.0192%" height="15" fill="rgb(206,201,31)" fg:x="6944" fg:w="2"/><text x="66.9295%" y="239.50"></text></g><g><title>rand_chacha::guts::diagonalize (4 samples, 0.04%)</title><rect x="66.6795%" y="277" width="0.0384%" height="15" fill="rgb(231,57,52)" fg:x="6944" fg:w="4"/><text x="66.9295%" y="287.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (2 samples, 0.02%)</title><rect x="66.6987%" y="261" width="0.0192%" height="15" fill="rgb(248,177,22)" fg:x="6946" fg:w="2"/><text x="66.9487%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (2 samples, 0.02%)</title><rect x="66.6987%" y="245" width="0.0192%" height="15" fill="rgb(215,211,37)" fg:x="6946" fg:w="2"/><text x="66.9487%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (2 samples, 0.02%)</title><rect x="66.6987%" y="229" width="0.0192%" height="15" fill="rgb(241,128,51)" fg:x="6946" fg:w="2"/><text x="66.9487%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (39 samples, 0.37%)</title><rect x="66.7179%" y="261" width="0.3745%" height="15" fill="rgb(227,165,31)" fg:x="6948" fg:w="39"/><text x="66.9679%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (39 samples, 0.37%)</title><rect x="66.7179%" y="245" width="0.3745%" height="15" fill="rgb(228,167,24)" fg:x="6948" fg:w="39"/><text x="66.9679%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (39 samples, 0.37%)</title><rect x="66.7179%" y="229" width="0.3745%" height="15" fill="rgb(228,143,12)" fg:x="6948" fg:w="39"/><text x="66.9679%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (39 samples, 0.37%)</title><rect x="66.7179%" y="213" width="0.3745%" height="15" fill="rgb(249,149,8)" fg:x="6948" fg:w="39"/><text x="66.9679%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (14 samples, 0.13%)</title><rect x="67.0924%" y="261" width="0.1344%" height="15" fill="rgb(243,35,44)" fg:x="6987" fg:w="14"/><text x="67.3424%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (14 samples, 0.13%)</title><rect x="67.0924%" y="245" width="0.1344%" height="15" fill="rgb(246,89,9)" fg:x="6987" fg:w="14"/><text x="67.3424%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (14 samples, 0.13%)</title><rect x="67.0924%" y="229" width="0.1344%" height="15" fill="rgb(233,213,13)" fg:x="6987" fg:w="14"/><text x="67.3424%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (29 samples, 0.28%)</title><rect x="67.2268%" y="261" width="0.2785%" height="15" fill="rgb(233,141,41)" fg:x="7001" fg:w="29"/><text x="67.4768%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (29 samples, 0.28%)</title><rect x="67.2268%" y="245" width="0.2785%" height="15" fill="rgb(239,167,4)" fg:x="7001" fg:w="29"/><text x="67.4768%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (29 samples, 0.28%)</title><rect x="67.2268%" y="229" width="0.2785%" height="15" fill="rgb(209,217,16)" fg:x="7001" fg:w="29"/><text x="67.4768%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (40 samples, 0.38%)</title><rect x="67.5053%" y="229" width="0.3841%" height="15" fill="rgb(219,88,35)" fg:x="7030" fg:w="40"/><text x="67.7553%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (48 samples, 0.46%)</title><rect x="67.5053%" y="261" width="0.4609%" height="15" fill="rgb(220,193,23)" fg:x="7030" fg:w="48"/><text x="67.7553%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (48 samples, 0.46%)</title><rect x="67.5053%" y="245" width="0.4609%" height="15" fill="rgb(230,90,52)" fg:x="7030" fg:w="48"/><text x="67.7553%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (8 samples, 0.08%)</title><rect x="67.8894%" y="229" width="0.0768%" height="15" fill="rgb(252,106,19)" fg:x="7070" fg:w="8"/><text x="68.1394%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (18 samples, 0.17%)</title><rect x="67.9662%" y="261" width="0.1728%" height="15" fill="rgb(206,74,20)" fg:x="7078" fg:w="18"/><text x="68.2162%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (18 samples, 0.17%)</title><rect x="67.9662%" y="245" width="0.1728%" height="15" fill="rgb(230,138,44)" fg:x="7078" fg:w="18"/><text x="68.2162%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (18 samples, 0.17%)</title><rect x="67.9662%" y="229" width="0.1728%" height="15" fill="rgb(235,182,43)" fg:x="7078" fg:w="18"/><text x="68.2162%" y="239.50"></text></g><g><title>rand_chacha::guts::round (180 samples, 1.73%)</title><rect x="66.7179%" y="277" width="1.7284%" height="15" fill="rgb(242,16,51)" fg:x="6948" fg:w="180"/><text x="66.9679%" y="287.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (32 samples, 0.31%)</title><rect x="68.1390%" y="261" width="0.3073%" height="15" fill="rgb(248,9,4)" fg:x="7096" fg:w="32"/><text x="68.3890%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (32 samples, 0.31%)</title><rect x="68.1390%" y="245" width="0.3073%" height="15" fill="rgb(210,31,22)" fg:x="7096" fg:w="32"/><text x="68.3890%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (32 samples, 0.31%)</title><rect x="68.1390%" y="229" width="0.3073%" height="15" fill="rgb(239,54,39)" fg:x="7096" fg:w="32"/><text x="68.3890%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (4 samples, 0.04%)</title><rect x="68.4463%" y="261" width="0.0384%" height="15" fill="rgb(230,99,41)" fg:x="7128" fg:w="4"/><text x="68.6963%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (4 samples, 0.04%)</title><rect x="68.4463%" y="245" width="0.0384%" height="15" fill="rgb(253,106,12)" fg:x="7128" fg:w="4"/><text x="68.6963%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (4 samples, 0.04%)</title><rect x="68.4463%" y="229" width="0.0384%" height="15" fill="rgb(213,46,41)" fg:x="7128" fg:w="4"/><text x="68.6963%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3 samples, 0.03%)</title><rect x="68.4847%" y="261" width="0.0288%" height="15" fill="rgb(215,133,35)" fg:x="7132" fg:w="3"/><text x="68.7347%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (3 samples, 0.03%)</title><rect x="68.4847%" y="245" width="0.0288%" height="15" fill="rgb(213,28,5)" fg:x="7132" fg:w="3"/><text x="68.7347%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (3 samples, 0.03%)</title><rect x="68.4847%" y="229" width="0.0288%" height="15" fill="rgb(215,77,49)" fg:x="7132" fg:w="3"/><text x="68.7347%" y="239.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (224 samples, 2.15%)</title><rect x="66.3722%" y="325" width="2.1510%" height="15" fill="rgb(248,100,22)" fg:x="6912" fg:w="224"/><text x="66.6222%" y="335.50">r..</text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (224 samples, 2.15%)</title><rect x="66.3722%" y="309" width="2.1510%" height="15" fill="rgb(208,67,9)" fg:x="6912" fg:w="224"/><text x="66.6222%" y="319.50">r..</text></g><g><title>rand_chacha::guts::refill_wide_impl (221 samples, 2.12%)</title><rect x="66.4010%" y="293" width="2.1221%" height="15" fill="rgb(219,133,21)" fg:x="6915" fg:w="221"/><text x="66.6510%" y="303.50">r..</text></g><g><title>rand_chacha::guts::undiagonalize (8 samples, 0.08%)</title><rect x="68.4463%" y="277" width="0.0768%" height="15" fill="rgb(246,46,29)" fg:x="7128" fg:w="8"/><text x="68.6963%" y="287.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (229 samples, 2.20%)</title><rect x="66.3434%" y="357" width="2.1990%" height="15" fill="rgb(246,185,52)" fg:x="6909" fg:w="229"/><text x="66.5934%" y="367.50">&lt;..</text></g><g><title>rand_chacha::guts::ChaCha::refill4 (229 samples, 2.20%)</title><rect x="66.3434%" y="341" width="2.1990%" height="15" fill="rgb(252,136,11)" fg:x="6909" fg:w="229"/><text x="66.5934%" y="351.50">r..</text></g><g><title>rand_chacha::guts::refill_wide (2 samples, 0.02%)</title><rect x="68.5231%" y="325" width="0.0192%" height="15" fill="rgb(219,138,53)" fg:x="7136" fg:w="2"/><text x="68.7731%" y="335.50"></text></g><g><title>std_detect::detect::arch::x86::__is_feature_detected::avx2 (2 samples, 0.02%)</title><rect x="68.5231%" y="309" width="0.0192%" height="15" fill="rgb(211,51,23)" fg:x="7136" fg:w="2"/><text x="68.7731%" y="319.50"></text></g><g><title>std_detect::detect::check_for (2 samples, 0.02%)</title><rect x="68.5231%" y="293" width="0.0192%" height="15" fill="rgb(247,221,28)" fg:x="7136" fg:w="2"/><text x="68.7731%" y="303.50"></text></g><g><title>std_detect::detect::cache::test (2 samples, 0.02%)</title><rect x="68.5231%" y="277" width="0.0192%" height="15" fill="rgb(251,222,45)" fg:x="7136" fg:w="2"/><text x="68.7731%" y="287.50"></text></g><g><title>std_detect::detect::cache::Cache::test (2 samples, 0.02%)</title><rect x="68.5231%" y="261" width="0.0192%" height="15" fill="rgb(217,162,53)" fg:x="7136" fg:w="2"/><text x="68.7731%" y="271.50"></text></g><g><title>&lt;&amp;mut R as rand_core::RngCore&gt;::try_fill_bytes (3 samples, 0.03%)</title><rect x="68.5423%" y="309" width="0.0288%" height="15" fill="rgb(229,93,14)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="319.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (3 samples, 0.03%)</title><rect x="68.5423%" y="293" width="0.0288%" height="15" fill="rgb(209,67,49)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="303.50"></text></g><g><title>getrandom::getrandom (3 samples, 0.03%)</title><rect x="68.5423%" y="277" width="0.0288%" height="15" fill="rgb(213,87,29)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="287.50"></text></g><g><title>getrandom::getrandom_uninit (3 samples, 0.03%)</title><rect x="68.5423%" y="261" width="0.0288%" height="15" fill="rgb(205,151,52)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="271.50"></text></g><g><title>getrandom::imp::getrandom_inner (3 samples, 0.03%)</title><rect x="68.5423%" y="245" width="0.0288%" height="15" fill="rgb(253,215,39)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="255.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (3 samples, 0.03%)</title><rect x="68.5423%" y="229" width="0.0288%" height="15" fill="rgb(221,220,41)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="239.50"></text></g><g><title>getrandom::imp::getrandom_inner::_{{closure}} (3 samples, 0.03%)</title><rect x="68.5423%" y="213" width="0.0288%" height="15" fill="rgb(218,133,21)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="223.50"></text></g><g><title>getrandom::imp::getrandom (3 samples, 0.03%)</title><rect x="68.5423%" y="197" width="0.0288%" height="15" fill="rgb(221,193,43)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="207.50"></text></g><g><title>syscall (3 samples, 0.03%)</title><rect x="68.5423%" y="181" width="0.0288%" height="15" fill="rgb(240,128,52)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="191.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="68.5423%" y="165" width="0.0288%" height="15" fill="rgb(253,114,12)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="175.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="68.5423%" y="149" width="0.0288%" height="15" fill="rgb(215,223,47)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="159.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="68.5423%" y="133" width="0.0288%" height="15" fill="rgb(248,225,23)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="68.5423%" y="117" width="0.0288%" height="15" fill="rgb(250,108,0)" fg:x="7138" fg:w="3"/><text x="68.7923%" y="127.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (4 samples, 0.04%)</title><rect x="68.5423%" y="357" width="0.0384%" height="15" fill="rgb(228,208,7)" fg:x="7138" fg:w="4"/><text x="68.7923%" y="367.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (4 samples, 0.04%)</title><rect x="68.5423%" y="341" width="0.0384%" height="15" fill="rgb(244,45,10)" fg:x="7138" fg:w="4"/><text x="68.7923%" y="351.50"></text></g><g><title>rand_core::SeedableRng::from_rng (4 samples, 0.04%)</title><rect x="68.5423%" y="325" width="0.0384%" height="15" fill="rgb(207,125,25)" fg:x="7138" fg:w="4"/><text x="68.7923%" y="335.50"></text></g><g><title>montecarlo::State::diagonal_update (7,023 samples, 67.44%)</title><rect x="1.1523%" y="517" width="67.4381%" height="15" fill="rgb(210,195,18)" fg:x="120" fg:w="7023"/><text x="1.4023%" y="527.50">montecarlo::State::diagonal_update</text></g><g><title>rand::rng::Rng::gen (369 samples, 3.54%)</title><rect x="65.0471%" y="501" width="3.5433%" height="15" fill="rgb(249,80,12)" fg:x="6774" fg:w="369"/><text x="65.2971%" y="511.50">rand..</text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (369 samples, 3.54%)</title><rect x="65.0471%" y="485" width="3.5433%" height="15" fill="rgb(221,65,9)" fg:x="6774" fg:w="369"/><text x="65.2971%" y="495.50">rand..</text></g><g><title>rand::rng::Rng::gen (325 samples, 3.12%)</title><rect x="65.4696%" y="469" width="3.1208%" height="15" fill="rgb(235,49,36)" fg:x="6818" fg:w="325"/><text x="65.7196%" y="479.50">ran..</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (325 samples, 3.12%)</title><rect x="65.4696%" y="453" width="3.1208%" height="15" fill="rgb(225,32,20)" fg:x="6818" fg:w="325"/><text x="65.7196%" y="463.50">ran..</text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (325 samples, 3.12%)</title><rect x="65.4696%" y="437" width="3.1208%" height="15" fill="rgb(215,141,46)" fg:x="6818" fg:w="325"/><text x="65.7196%" y="447.50">&lt;ra..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (325 samples, 3.12%)</title><rect x="65.4696%" y="421" width="3.1208%" height="15" fill="rgb(250,160,47)" fg:x="6818" fg:w="325"/><text x="65.7196%" y="431.50">&lt;ra..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (325 samples, 3.12%)</title><rect x="65.4696%" y="405" width="3.1208%" height="15" fill="rgb(216,222,40)" fg:x="6818" fg:w="325"/><text x="65.7196%" y="415.50">&lt;ra..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (235 samples, 2.26%)</title><rect x="66.3338%" y="389" width="2.2566%" height="15" fill="rgb(234,217,39)" fg:x="6908" fg:w="235"/><text x="66.5838%" y="399.50">r..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (235 samples, 2.26%)</title><rect x="66.3338%" y="373" width="2.2566%" height="15" fill="rgb(207,178,40)" fg:x="6908" fg:w="235"/><text x="66.5838%" y="383.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.07%)</title><rect x="70.0115%" y="501" width="0.0672%" height="15" fill="rgb(221,136,13)" fg:x="7291" fg:w="7"/><text x="70.2615%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.07%)</title><rect x="70.0115%" y="485" width="0.0672%" height="15" fill="rgb(249,199,10)" fg:x="7291" fg:w="7"/><text x="70.2615%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.07%)</title><rect x="70.0115%" y="469" width="0.0672%" height="15" fill="rgb(249,222,13)" fg:x="7291" fg:w="7"/><text x="70.2615%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (91 samples, 0.87%)</title><rect x="70.0787%" y="501" width="0.8738%" height="15" fill="rgb(244,185,38)" fg:x="7298" fg:w="91"/><text x="70.3287%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (85 samples, 0.82%)</title><rect x="70.1364%" y="485" width="0.8162%" height="15" fill="rgb(236,202,9)" fg:x="7304" fg:w="85"/><text x="70.3864%" y="495.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (85 samples, 0.82%)</title><rect x="70.1364%" y="469" width="0.8162%" height="15" fill="rgb(250,229,37)" fg:x="7304" fg:w="85"/><text x="70.3864%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="501" width="0.0480%" height="15" fill="rgb(206,174,23)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="485" width="0.0480%" height="15" fill="rgb(211,33,43)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="469" width="0.0480%" height="15" fill="rgb(245,58,50)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="453" width="0.0480%" height="15" fill="rgb(244,68,36)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="437" width="0.0480%" height="15" fill="rgb(232,229,15)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="421" width="0.0480%" height="15" fill="rgb(254,30,23)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="405" width="0.0480%" height="15" fill="rgb(235,160,14)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="389" width="0.0480%" height="15" fill="rgb(212,155,44)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="373" width="0.0480%" height="15" fill="rgb(226,2,50)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="357" width="0.0480%" height="15" fill="rgb(234,177,6)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="70.9526%" y="341" width="0.0480%" height="15" fill="rgb(217,24,9)" fg:x="7389" fg:w="5"/><text x="71.2026%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="72.0953%" y="453" width="0.0192%" height="15" fill="rgb(220,13,46)" fg:x="7508" fg:w="2"/><text x="72.3453%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="72.2681%" y="357" width="0.0288%" height="15" fill="rgb(239,221,27)" fg:x="7526" fg:w="3"/><text x="72.5181%" y="367.50"></text></g><g><title>_int_free (10 samples, 0.10%)</title><rect x="72.2969%" y="357" width="0.0960%" height="15" fill="rgb(222,198,25)" fg:x="7529" fg:w="10"/><text x="72.5469%" y="367.50"></text></g><g><title>_int_malloc (6 samples, 0.06%)</title><rect x="72.3929%" y="357" width="0.0576%" height="15" fill="rgb(211,99,13)" fg:x="7539" fg:w="6"/><text x="72.6429%" y="367.50"></text></g><g><title>_int_realloc (28 samples, 0.27%)</title><rect x="72.2105%" y="373" width="0.2689%" height="15" fill="rgb(232,111,31)" fg:x="7520" fg:w="28"/><text x="72.4605%" y="383.50"></text></g><g><title>unlink_chunk (3 samples, 0.03%)</title><rect x="72.4505%" y="357" width="0.0288%" height="15" fill="rgb(245,82,37)" fg:x="7545" fg:w="3"/><text x="72.7005%" y="367.50"></text></g><g><title>__GI___libc_realloc (41 samples, 0.39%)</title><rect x="72.1145%" y="389" width="0.3937%" height="15" fill="rgb(227,149,46)" fg:x="7510" fg:w="41"/><text x="72.3645%" y="399.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="72.4890%" y="373" width="0.0192%" height="15" fill="rgb(218,36,50)" fg:x="7549" fg:w="2"/><text x="72.7390%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (42 samples, 0.40%)</title><rect x="72.1145%" y="437" width="0.4033%" height="15" fill="rgb(226,80,48)" fg:x="7510" fg:w="42"/><text x="72.3645%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (42 samples, 0.40%)</title><rect x="72.1145%" y="421" width="0.4033%" height="15" fill="rgb(238,224,15)" fg:x="7510" fg:w="42"/><text x="72.3645%" y="431.50"></text></g><g><title>alloc::alloc::realloc (42 samples, 0.40%)</title><rect x="72.1145%" y="405" width="0.4033%" height="15" fill="rgb(241,136,10)" fg:x="7510" fg:w="42"/><text x="72.3645%" y="415.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="72.5178%" y="437" width="0.0192%" height="15" fill="rgb(208,32,45)" fg:x="7552" fg:w="2"/><text x="72.7678%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (45 samples, 0.43%)</title><rect x="72.1145%" y="453" width="0.4321%" height="15" fill="rgb(207,135,9)" fg:x="7510" fg:w="45"/><text x="72.3645%" y="463.50"></text></g><g><title>core::cmp::max (3 samples, 0.03%)</title><rect x="72.5466%" y="453" width="0.0288%" height="15" fill="rgb(206,86,44)" fg:x="7555" fg:w="3"/><text x="72.7966%" y="463.50"></text></g><g><title>core::cmp::Ord::max (3 samples, 0.03%)</title><rect x="72.5466%" y="437" width="0.0288%" height="15" fill="rgb(245,177,15)" fg:x="7555" fg:w="3"/><text x="72.7966%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="72.5466%" y="421" width="0.0288%" height="15" fill="rgb(206,64,50)" fg:x="7555" fg:w="3"/><text x="72.7966%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (52 samples, 0.50%)</title><rect x="72.0857%" y="485" width="0.4993%" height="15" fill="rgb(234,36,40)" fg:x="7507" fg:w="52"/><text x="72.3357%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (52 samples, 0.50%)</title><rect x="72.0857%" y="469" width="0.4993%" height="15" fill="rgb(213,64,8)" fg:x="7507" fg:w="52"/><text x="72.3357%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (202 samples, 1.94%)</title><rect x="71.0006%" y="501" width="1.9397%" height="15" fill="rgb(210,75,36)" fg:x="7394" fg:w="202"/><text x="71.2506%" y="511.50">a..</text></g><g><title>core::ptr::write (37 samples, 0.36%)</title><rect x="72.5850%" y="485" width="0.3553%" height="15" fill="rgb(229,88,21)" fg:x="7559" fg:w="37"/><text x="72.8350%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (15 samples, 0.14%)</title><rect x="72.9403%" y="501" width="0.1440%" height="15" fill="rgb(252,204,47)" fg:x="7596" fg:w="15"/><text x="73.1903%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (15 samples, 0.14%)</title><rect x="72.9403%" y="485" width="0.1440%" height="15" fill="rgb(208,77,27)" fg:x="7596" fg:w="15"/><text x="73.1903%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.02%)</title><rect x="73.0651%" y="469" width="0.0192%" height="15" fill="rgb(221,76,26)" fg:x="7609" fg:w="2"/><text x="73.3151%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (66 samples, 0.63%)</title><rect x="73.0843%" y="501" width="0.6338%" height="15" fill="rgb(225,139,18)" fg:x="7611" fg:w="66"/><text x="73.3343%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (3 samples, 0.03%)</title><rect x="73.7181%" y="501" width="0.0288%" height="15" fill="rgb(230,137,11)" fg:x="7677" fg:w="3"/><text x="73.9681%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (3 samples, 0.03%)</title><rect x="73.7181%" y="485" width="0.0288%" height="15" fill="rgb(212,28,1)" fg:x="7677" fg:w="3"/><text x="73.9681%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="73.7181%" y="469" width="0.0288%" height="15" fill="rgb(248,164,17)" fg:x="7677" fg:w="3"/><text x="73.9681%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="73.7277%" y="453" width="0.0192%" height="15" fill="rgb(222,171,42)" fg:x="7678" fg:w="2"/><text x="73.9777%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="73.7277%" y="437" width="0.0192%" height="15" fill="rgb(243,84,45)" fg:x="7678" fg:w="2"/><text x="73.9777%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (33 samples, 0.32%)</title><rect x="76.6948%" y="485" width="0.3169%" height="15" fill="rgb(252,49,23)" fg:x="7987" fg:w="33"/><text x="76.9448%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (33 samples, 0.32%)</title><rect x="76.6948%" y="469" width="0.3169%" height="15" fill="rgb(215,19,7)" fg:x="7987" fg:w="33"/><text x="76.9448%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (33 samples, 0.32%)</title><rect x="76.6948%" y="453" width="0.3169%" height="15" fill="rgb(238,81,41)" fg:x="7987" fg:w="33"/><text x="76.9448%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (13 samples, 0.12%)</title><rect x="77.0117%" y="485" width="0.1248%" height="15" fill="rgb(210,199,37)" fg:x="8020" fg:w="13"/><text x="77.2617%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (13 samples, 0.12%)</title><rect x="77.0117%" y="469" width="0.1248%" height="15" fill="rgb(244,192,49)" fg:x="8020" fg:w="13"/><text x="77.2617%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (13 samples, 0.12%)</title><rect x="77.0117%" y="453" width="0.1248%" height="15" fill="rgb(226,211,11)" fg:x="8020" fg:w="13"/><text x="77.2617%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (914 samples, 8.78%)</title><rect x="77.1461%" y="485" width="8.7766%" height="15" fill="rgb(236,162,54)" fg:x="8034" fg:w="914"/><text x="77.3961%" y="495.50">core::option..</text></g><g><title>core::option::Option&lt;T&gt;::as_ref (117 samples, 1.12%)</title><rect x="85.9228%" y="485" width="1.1235%" height="15" fill="rgb(220,229,9)" fg:x="8948" fg:w="117"/><text x="86.1728%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (171 samples, 1.64%)</title><rect x="87.0463%" y="485" width="1.6420%" height="15" fill="rgb(250,87,22)" fg:x="9065" fg:w="171"/><text x="87.2963%" y="495.50"></text></g><g><title>montecarlo::State::directed_loop_update (1,844 samples, 17.71%)</title><rect x="73.7469%" y="501" width="17.7069%" height="15" fill="rgb(239,43,17)" fg:x="7680" fg:w="1844"/><text x="73.9969%" y="511.50">montecarlo::State::directed_..</text></g><g><title>montecarlo::OperatorType::flip (288 samples, 2.77%)</title><rect x="88.6883%" y="485" width="2.7655%" height="15" fill="rgb(231,177,25)" fg:x="9236" fg:w="288"/><text x="88.9383%" y="495.50">mo..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::is_empty (2 samples, 0.02%)</title><rect x="91.4538%" y="485" width="0.0192%" height="15" fill="rgb(219,179,1)" fg:x="9524" fg:w="2"/><text x="91.7038%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.02%)</title><rect x="91.4538%" y="469" width="0.0192%" height="15" fill="rgb(238,219,53)" fg:x="9524" fg:w="2"/><text x="91.7038%" y="479.50"></text></g><g><title>&lt;usize as rand::distributions::utils::WideningMultiply&gt;::wmul (29 samples, 0.28%)</title><rect x="92.1068%" y="437" width="0.2785%" height="15" fill="rgb(232,167,36)" fg:x="9592" fg:w="29"/><text x="92.3568%" y="447.50"></text></g><g><title>&lt;u64 as rand::distributions::utils::WideningMultiply&gt;::wmul (29 samples, 0.28%)</title><rect x="92.1068%" y="421" width="0.2785%" height="15" fill="rgb(244,19,51)" fg:x="9592" fg:w="29"/><text x="92.3568%" y="431.50"></text></g><g><title>core::num::&lt;impl usize&gt;::leading_zeros (6 samples, 0.06%)</title><rect x="92.3853%" y="437" width="0.0576%" height="15" fill="rgb(224,6,22)" fg:x="9621" fg:w="6"/><text x="92.6353%" y="447.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (15 samples, 0.14%)</title><rect x="92.5773%" y="357" width="0.1440%" height="15" fill="rgb(224,145,5)" fg:x="9641" fg:w="15"/><text x="92.8273%" y="367.50"></text></g><g><title>_ZN4rand3rng3Rng3gen17h7cfcce03c103967cE.llvm.13315290998828212286 (14 samples, 0.13%)</title><rect x="92.7213%" y="357" width="0.1344%" height="15" fill="rgb(234,130,49)" fg:x="9656" fg:w="14"/><text x="92.9713%" y="367.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (2 samples, 0.02%)</title><rect x="92.9038%" y="245" width="0.0192%" height="15" fill="rgb(254,6,2)" fg:x="9675" fg:w="2"/><text x="93.1538%" y="255.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (2 samples, 0.02%)</title><rect x="92.9038%" y="229" width="0.0192%" height="15" fill="rgb(208,96,46)" fg:x="9675" fg:w="2"/><text x="93.1538%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (2 samples, 0.02%)</title><rect x="92.9326%" y="229" width="0.0192%" height="15" fill="rgb(239,3,39)" fg:x="9678" fg:w="2"/><text x="93.1826%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (2 samples, 0.02%)</title><rect x="92.9326%" y="213" width="0.0192%" height="15" fill="rgb(233,210,1)" fg:x="9678" fg:w="2"/><text x="93.1826%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (2 samples, 0.02%)</title><rect x="92.9326%" y="197" width="0.0192%" height="15" fill="rgb(244,137,37)" fg:x="9678" fg:w="2"/><text x="93.1826%" y="207.50"></text></g><g><title>rand_chacha::guts::diagonalize (3 samples, 0.03%)</title><rect x="92.9326%" y="245" width="0.0288%" height="15" fill="rgb(240,136,2)" fg:x="9678" fg:w="3"/><text x="93.1826%" y="255.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (16 samples, 0.15%)</title><rect x="92.9614%" y="229" width="0.1536%" height="15" fill="rgb(239,18,37)" fg:x="9681" fg:w="16"/><text x="93.2114%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (16 samples, 0.15%)</title><rect x="92.9614%" y="213" width="0.1536%" height="15" fill="rgb(218,185,22)" fg:x="9681" fg:w="16"/><text x="93.2114%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (16 samples, 0.15%)</title><rect x="92.9614%" y="197" width="0.1536%" height="15" fill="rgb(225,218,4)" fg:x="9681" fg:w="16"/><text x="93.2114%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (16 samples, 0.15%)</title><rect x="92.9614%" y="181" width="0.1536%" height="15" fill="rgb(230,182,32)" fg:x="9681" fg:w="16"/><text x="93.2114%" y="191.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (17 samples, 0.16%)</title><rect x="93.1150%" y="229" width="0.1632%" height="15" fill="rgb(242,56,43)" fg:x="9697" fg:w="17"/><text x="93.3650%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (17 samples, 0.16%)</title><rect x="93.1150%" y="213" width="0.1632%" height="15" fill="rgb(233,99,24)" fg:x="9697" fg:w="17"/><text x="93.3650%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (17 samples, 0.16%)</title><rect x="93.1150%" y="197" width="0.1632%" height="15" fill="rgb(234,209,42)" fg:x="9697" fg:w="17"/><text x="93.3650%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (16 samples, 0.15%)</title><rect x="93.2783%" y="229" width="0.1536%" height="15" fill="rgb(227,7,12)" fg:x="9714" fg:w="16"/><text x="93.5283%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (16 samples, 0.15%)</title><rect x="93.2783%" y="213" width="0.1536%" height="15" fill="rgb(245,203,43)" fg:x="9714" fg:w="16"/><text x="93.5283%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (16 samples, 0.15%)</title><rect x="93.2783%" y="197" width="0.1536%" height="15" fill="rgb(238,205,33)" fg:x="9714" fg:w="16"/><text x="93.5283%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (16 samples, 0.15%)</title><rect x="93.4319%" y="197" width="0.1536%" height="15" fill="rgb(231,56,7)" fg:x="9730" fg:w="16"/><text x="93.6819%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (17 samples, 0.16%)</title><rect x="93.4319%" y="229" width="0.1632%" height="15" fill="rgb(244,186,29)" fg:x="9730" fg:w="17"/><text x="93.6819%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (17 samples, 0.16%)</title><rect x="93.4319%" y="213" width="0.1632%" height="15" fill="rgb(234,111,31)" fg:x="9730" fg:w="17"/><text x="93.6819%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (5 samples, 0.05%)</title><rect x="93.5952%" y="229" width="0.0480%" height="15" fill="rgb(241,149,10)" fg:x="9747" fg:w="5"/><text x="93.8452%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (5 samples, 0.05%)</title><rect x="93.5952%" y="213" width="0.0480%" height="15" fill="rgb(249,206,44)" fg:x="9747" fg:w="5"/><text x="93.8452%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (5 samples, 0.05%)</title><rect x="93.5952%" y="197" width="0.0480%" height="15" fill="rgb(251,153,30)" fg:x="9747" fg:w="5"/><text x="93.8452%" y="207.50"></text></g><g><title>rand_chacha::guts::round (94 samples, 0.90%)</title><rect x="92.9614%" y="245" width="0.9026%" height="15" fill="rgb(239,152,38)" fg:x="9681" fg:w="94"/><text x="93.2114%" y="255.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (23 samples, 0.22%)</title><rect x="93.6432%" y="229" width="0.2209%" height="15" fill="rgb(249,139,47)" fg:x="9752" fg:w="23"/><text x="93.8932%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (23 samples, 0.22%)</title><rect x="93.6432%" y="213" width="0.2209%" height="15" fill="rgb(244,64,35)" fg:x="9752" fg:w="23"/><text x="93.8932%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (23 samples, 0.22%)</title><rect x="93.6432%" y="197" width="0.2209%" height="15" fill="rgb(216,46,15)" fg:x="9752" fg:w="23"/><text x="93.8932%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (6 samples, 0.06%)</title><rect x="93.8640%" y="229" width="0.0576%" height="15" fill="rgb(250,74,19)" fg:x="9775" fg:w="6"/><text x="94.1140%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (6 samples, 0.06%)</title><rect x="93.8640%" y="213" width="0.0576%" height="15" fill="rgb(249,42,33)" fg:x="9775" fg:w="6"/><text x="94.1140%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (6 samples, 0.06%)</title><rect x="93.8640%" y="197" width="0.0576%" height="15" fill="rgb(242,149,17)" fg:x="9775" fg:w="6"/><text x="94.1140%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (2 samples, 0.02%)</title><rect x="93.9216%" y="229" width="0.0192%" height="15" fill="rgb(244,29,21)" fg:x="9781" fg:w="2"/><text x="94.1716%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (2 samples, 0.02%)</title><rect x="93.9216%" y="213" width="0.0192%" height="15" fill="rgb(220,130,37)" fg:x="9781" fg:w="2"/><text x="94.1716%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (2 samples, 0.02%)</title><rect x="93.9216%" y="197" width="0.0192%" height="15" fill="rgb(211,67,2)" fg:x="9781" fg:w="2"/><text x="94.1716%" y="207.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (114 samples, 1.09%)</title><rect x="92.8750%" y="325" width="1.0947%" height="15" fill="rgb(235,68,52)" fg:x="9672" fg:w="114"/><text x="93.1250%" y="335.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (114 samples, 1.09%)</title><rect x="92.8750%" y="309" width="1.0947%" height="15" fill="rgb(246,142,3)" fg:x="9672" fg:w="114"/><text x="93.1250%" y="319.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (112 samples, 1.08%)</title><rect x="92.8942%" y="293" width="1.0755%" height="15" fill="rgb(241,25,7)" fg:x="9674" fg:w="112"/><text x="93.1442%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (112 samples, 1.08%)</title><rect x="92.8942%" y="277" width="1.0755%" height="15" fill="rgb(242,119,39)" fg:x="9674" fg:w="112"/><text x="93.1442%" y="287.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (111 samples, 1.07%)</title><rect x="92.9038%" y="261" width="1.0659%" height="15" fill="rgb(241,98,45)" fg:x="9675" fg:w="111"/><text x="93.1538%" y="271.50"></text></g><g><title>rand_chacha::guts::undiagonalize (11 samples, 0.11%)</title><rect x="93.8640%" y="245" width="0.1056%" height="15" fill="rgb(254,28,30)" fg:x="9775" fg:w="11"/><text x="94.1140%" y="255.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (3 samples, 0.03%)</title><rect x="93.9408%" y="229" width="0.0288%" height="15" fill="rgb(241,142,54)" fg:x="9783" fg:w="3"/><text x="94.1908%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (3 samples, 0.03%)</title><rect x="93.9408%" y="213" width="0.0288%" height="15" fill="rgb(222,85,15)" fg:x="9783" fg:w="3"/><text x="94.1908%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (3 samples, 0.03%)</title><rect x="93.9408%" y="197" width="0.0288%" height="15" fill="rgb(210,85,47)" fg:x="9783" fg:w="3"/><text x="94.1908%" y="207.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (160 samples, 1.54%)</title><rect x="92.4429%" y="389" width="1.5364%" height="15" fill="rgb(224,206,25)" fg:x="9627" fg:w="160"/><text x="92.6929%" y="399.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (160 samples, 1.54%)</title><rect x="92.4429%" y="373" width="1.5364%" height="15" fill="rgb(243,201,19)" fg:x="9627" fg:w="160"/><text x="92.6929%" y="383.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (117 samples, 1.12%)</title><rect x="92.8558%" y="357" width="1.1235%" height="15" fill="rgb(236,59,4)" fg:x="9670" fg:w="117"/><text x="93.1058%" y="367.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (117 samples, 1.12%)</title><rect x="92.8558%" y="341" width="1.1235%" height="15" fill="rgb(254,179,45)" fg:x="9670" fg:w="117"/><text x="93.1058%" y="351.50"></text></g><g><title>montecarlo::State::off_diagonal_update (2,645 samples, 25.40%)</title><rect x="68.5904%" y="517" width="25.3985%" height="15" fill="rgb(226,14,10)" fg:x="7143" fg:w="2645"/><text x="68.8404%" y="527.50">montecarlo::State::off_diagonal_update</text></g><g><title>rand::rng::Rng::gen_range (264 samples, 2.54%)</title><rect x="91.4538%" y="501" width="2.5350%" height="15" fill="rgb(244,27,41)" fg:x="9524" fg:w="264"/><text x="91.7038%" y="511.50">ra..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (262 samples, 2.52%)</title><rect x="91.4730%" y="485" width="2.5158%" height="15" fill="rgb(235,35,32)" fg:x="9526" fg:w="262"/><text x="91.7230%" y="495.50">&lt;c..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (262 samples, 2.52%)</title><rect x="91.4730%" y="469" width="2.5158%" height="15" fill="rgb(218,68,31)" fg:x="9526" fg:w="262"/><text x="91.7230%" y="479.50">&lt;r..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (262 samples, 2.52%)</title><rect x="91.4730%" y="453" width="2.5158%" height="15" fill="rgb(207,120,37)" fg:x="9526" fg:w="262"/><text x="91.7230%" y="463.50">&lt;r..</text></g><g><title>rand::rng::Rng::gen (161 samples, 1.55%)</title><rect x="92.4429%" y="437" width="1.5460%" height="15" fill="rgb(227,98,0)" fg:x="9627" fg:w="161"/><text x="92.6929%" y="447.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (161 samples, 1.55%)</title><rect x="92.4429%" y="421" width="1.5460%" height="15" fill="rgb(207,7,3)" fg:x="9627" fg:w="161"/><text x="92.6929%" y="431.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (161 samples, 1.55%)</title><rect x="92.4429%" y="405" width="1.5460%" height="15" fill="rgb(206,98,19)" fg:x="9627" fg:w="161"/><text x="92.6929%" y="415.50"></text></g><g><title>montecarlo::State::sample_avg (9,680 samples, 92.95%)</title><rect x="1.1139%" y="549" width="92.9518%" height="15" fill="rgb(217,5,26)" fg:x="116" fg:w="9680"/><text x="1.3639%" y="559.50">montecarlo::State::sample_avg</text></g><g><title>montecarlo::State::sample (9,679 samples, 92.94%)</title><rect x="1.1235%" y="533" width="92.9422%" height="15" fill="rgb(235,190,38)" fg:x="117" fg:w="9679"/><text x="1.3735%" y="543.50">montecarlo::State::sample</text></g><g><title>montecarlo::State::si_operator (8 samples, 0.08%)</title><rect x="93.9889%" y="517" width="0.0768%" height="15" fill="rgb(247,86,24)" fg:x="9788" fg:w="8"/><text x="94.2389%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.02%)</title><rect x="94.6226%" y="517" width="0.0192%" height="15" fill="rgb(205,101,16)" fg:x="9854" fg:w="2"/><text x="94.8726%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.02%)</title><rect x="94.6226%" y="501" width="0.0192%" height="15" fill="rgb(246,168,33)" fg:x="9854" fg:w="2"/><text x="94.8726%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.02%)</title><rect x="94.6226%" y="485" width="0.0192%" height="15" fill="rgb(231,114,1)" fg:x="9854" fg:w="2"/><text x="94.8726%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.03%)</title><rect x="94.6418%" y="501" width="0.0288%" height="15" fill="rgb(207,184,53)" fg:x="9856" fg:w="3"/><text x="94.8918%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.03%)</title><rect x="94.6418%" y="485" width="0.0288%" height="15" fill="rgb(224,95,51)" fg:x="9856" fg:w="3"/><text x="94.8918%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.03%)</title><rect x="94.6418%" y="469" width="0.0288%" height="15" fill="rgb(212,188,45)" fg:x="9856" fg:w="3"/><text x="94.8918%" y="479.50"></text></g><g><title>&lt;montecarlo::Edge as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="94.6706%" y="501" width="0.0192%" height="15" fill="rgb(223,154,38)" fg:x="9859" fg:w="2"/><text x="94.9206%" y="511.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (2 samples, 0.02%)</title><rect x="94.6706%" y="485" width="0.0192%" height="15" fill="rgb(251,22,52)" fg:x="9859" fg:w="2"/><text x="94.9206%" y="495.50"></text></g><g><title>&lt;usize as rand::distributions::utils::WideningMultiply&gt;::wmul (5 samples, 0.05%)</title><rect x="94.7283%" y="437" width="0.0480%" height="15" fill="rgb(229,209,22)" fg:x="9865" fg:w="5"/><text x="94.9783%" y="447.50"></text></g><g><title>&lt;u64 as rand::distributions::utils::WideningMultiply&gt;::wmul (5 samples, 0.05%)</title><rect x="94.7283%" y="421" width="0.0480%" height="15" fill="rgb(234,138,34)" fg:x="9865" fg:w="5"/><text x="94.9783%" y="431.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (2 samples, 0.02%)</title><rect x="94.8915%" y="357" width="0.0192%" height="15" fill="rgb(212,95,11)" fg:x="9882" fg:w="2"/><text x="95.1415%" y="367.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (6 samples, 0.06%)</title><rect x="94.9107%" y="229" width="0.0576%" height="15" fill="rgb(240,179,47)" fg:x="9884" fg:w="6"/><text x="95.1607%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (6 samples, 0.06%)</title><rect x="94.9107%" y="213" width="0.0576%" height="15" fill="rgb(240,163,11)" fg:x="9884" fg:w="6"/><text x="95.1607%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (6 samples, 0.06%)</title><rect x="94.9107%" y="197" width="0.0576%" height="15" fill="rgb(236,37,12)" fg:x="9884" fg:w="6"/><text x="95.1607%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (6 samples, 0.06%)</title><rect x="94.9107%" y="181" width="0.0576%" height="15" fill="rgb(232,164,16)" fg:x="9884" fg:w="6"/><text x="95.1607%" y="191.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (3 samples, 0.03%)</title><rect x="94.9683%" y="229" width="0.0288%" height="15" fill="rgb(244,205,15)" fg:x="9890" fg:w="3"/><text x="95.2183%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (3 samples, 0.03%)</title><rect x="94.9683%" y="213" width="0.0288%" height="15" fill="rgb(223,117,47)" fg:x="9890" fg:w="3"/><text x="95.2183%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (3 samples, 0.03%)</title><rect x="94.9683%" y="197" width="0.0288%" height="15" fill="rgb(244,107,35)" fg:x="9890" fg:w="3"/><text x="95.2183%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (15 samples, 0.14%)</title><rect x="94.9107%" y="293" width="0.1440%" height="15" fill="rgb(205,140,8)" fg:x="9884" fg:w="15"/><text x="95.1607%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (15 samples, 0.14%)</title><rect x="94.9107%" y="277" width="0.1440%" height="15" fill="rgb(228,84,46)" fg:x="9884" fg:w="15"/><text x="95.1607%" y="287.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (15 samples, 0.14%)</title><rect x="94.9107%" y="261" width="0.1440%" height="15" fill="rgb(254,188,9)" fg:x="9884" fg:w="15"/><text x="95.1607%" y="271.50"></text></g><g><title>rand_chacha::guts::round (15 samples, 0.14%)</title><rect x="94.9107%" y="245" width="0.1440%" height="15" fill="rgb(206,112,54)" fg:x="9884" fg:w="15"/><text x="95.1607%" y="255.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (3 samples, 0.03%)</title><rect x="95.0259%" y="229" width="0.0288%" height="15" fill="rgb(216,84,49)" fg:x="9896" fg:w="3"/><text x="95.2759%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (3 samples, 0.03%)</title><rect x="95.0259%" y="213" width="0.0288%" height="15" fill="rgb(214,194,35)" fg:x="9896" fg:w="3"/><text x="95.2759%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (3 samples, 0.03%)</title><rect x="95.0259%" y="197" width="0.0288%" height="15" fill="rgb(249,28,3)" fg:x="9896" fg:w="3"/><text x="95.2759%" y="207.50"></text></g><g><title>montecarlo::Latice::random_edge (44 samples, 0.42%)</title><rect x="94.6418%" y="517" width="0.4225%" height="15" fill="rgb(222,56,52)" fg:x="9856" fg:w="44"/><text x="94.8918%" y="527.50"></text></g><g><title>rand::rng::Rng::gen_range (39 samples, 0.37%)</title><rect x="94.6898%" y="501" width="0.3745%" height="15" fill="rgb(245,217,50)" fg:x="9861" fg:w="39"/><text x="94.9398%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (38 samples, 0.36%)</title><rect x="94.6994%" y="485" width="0.3649%" height="15" fill="rgb(213,201,24)" fg:x="9862" fg:w="38"/><text x="94.9494%" y="495.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (38 samples, 0.36%)</title><rect x="94.6994%" y="469" width="0.3649%" height="15" fill="rgb(248,116,28)" fg:x="9862" fg:w="38"/><text x="94.9494%" y="479.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (38 samples, 0.36%)</title><rect x="94.6994%" y="453" width="0.3649%" height="15" fill="rgb(219,72,43)" fg:x="9862" fg:w="38"/><text x="94.9494%" y="463.50"></text></g><g><title>rand::rng::Rng::gen (30 samples, 0.29%)</title><rect x="94.7763%" y="437" width="0.2881%" height="15" fill="rgb(209,138,14)" fg:x="9870" fg:w="30"/><text x="95.0263%" y="447.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (30 samples, 0.29%)</title><rect x="94.7763%" y="421" width="0.2881%" height="15" fill="rgb(222,18,33)" fg:x="9870" fg:w="30"/><text x="95.0263%" y="431.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (30 samples, 0.29%)</title><rect x="94.7763%" y="405" width="0.2881%" height="15" fill="rgb(213,199,7)" fg:x="9870" fg:w="30"/><text x="95.0263%" y="415.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (30 samples, 0.29%)</title><rect x="94.7763%" y="389" width="0.2881%" height="15" fill="rgb(250,110,10)" fg:x="9870" fg:w="30"/><text x="95.0263%" y="399.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (30 samples, 0.29%)</title><rect x="94.7763%" y="373" width="0.2881%" height="15" fill="rgb(248,123,6)" fg:x="9870" fg:w="30"/><text x="95.0263%" y="383.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (16 samples, 0.15%)</title><rect x="94.9107%" y="357" width="0.1536%" height="15" fill="rgb(206,91,31)" fg:x="9884" fg:w="16"/><text x="95.1607%" y="367.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (16 samples, 0.15%)</title><rect x="94.9107%" y="341" width="0.1536%" height="15" fill="rgb(211,154,13)" fg:x="9884" fg:w="16"/><text x="95.1607%" y="351.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (16 samples, 0.15%)</title><rect x="94.9107%" y="325" width="0.1536%" height="15" fill="rgb(225,148,7)" fg:x="9884" fg:w="16"/><text x="95.1607%" y="335.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (16 samples, 0.15%)</title><rect x="94.9107%" y="309" width="0.1536%" height="15" fill="rgb(220,160,43)" fg:x="9884" fg:w="16"/><text x="95.1607%" y="319.50"></text></g><g><title>montecarlo::State::delete (8 samples, 0.08%)</title><rect x="95.0643%" y="517" width="0.0768%" height="15" fill="rgb(213,52,39)" fg:x="9900" fg:w="8"/><text x="95.3143%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (2 samples, 0.02%)</title><rect x="95.1220%" y="501" width="0.0192%" height="15" fill="rgb(243,137,7)" fg:x="9906" fg:w="2"/><text x="95.3720%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (4 samples, 0.04%)</title><rect x="95.2948%" y="501" width="0.0384%" height="15" fill="rgb(230,79,13)" fg:x="9924" fg:w="4"/><text x="95.5448%" y="511.50"></text></g><g><title>montecarlo::State::insert_diag (421 samples, 4.04%)</title><rect x="95.1412%" y="517" width="4.0426%" height="15" fill="rgb(247,105,23)" fg:x="9908" fg:w="421"/><text x="95.3912%" y="527.50">mont..</text></g><g><title>montecarlo::State::trace (400 samples, 3.84%)</title><rect x="95.3428%" y="501" width="3.8410%" height="15" fill="rgb(223,179,41)" fg:x="9929" fg:w="400"/><text x="95.5928%" y="511.50">mont..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (27 samples, 0.26%)</title><rect x="98.9245%" y="485" width="0.2593%" height="15" fill="rgb(218,9,34)" fg:x="10302" fg:w="27"/><text x="99.1745%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (27 samples, 0.26%)</title><rect x="98.9245%" y="469" width="0.2593%" height="15" fill="rgb(222,106,8)" fg:x="10302" fg:w="27"/><text x="99.1745%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (27 samples, 0.26%)</title><rect x="98.9245%" y="453" width="0.2593%" height="15" fill="rgb(211,220,0)" fg:x="10302" fg:w="27"/><text x="99.1745%" y="463.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (2 samples, 0.02%)</title><rect x="99.2222%" y="405" width="0.0192%" height="15" fill="rgb(229,52,16)" fg:x="10333" fg:w="2"/><text x="99.4722%" y="415.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (2 samples, 0.02%)</title><rect x="99.2414%" y="293" width="0.0192%" height="15" fill="rgb(212,155,18)" fg:x="10335" fg:w="2"/><text x="99.4914%" y="303.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (2 samples, 0.02%)</title><rect x="99.2414%" y="277" width="0.0192%" height="15" fill="rgb(242,21,14)" fg:x="10335" fg:w="2"/><text x="99.4914%" y="287.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.02%)</title><rect x="99.2606%" y="277" width="0.0192%" height="15" fill="rgb(222,19,48)" fg:x="10337" fg:w="2"/><text x="99.5106%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.02%)</title><rect x="99.2606%" y="261" width="0.0192%" height="15" fill="rgb(232,45,27)" fg:x="10337" fg:w="2"/><text x="99.5106%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (2 samples, 0.02%)</title><rect x="99.2606%" y="245" width="0.0192%" height="15" fill="rgb(249,103,42)" fg:x="10337" fg:w="2"/><text x="99.5106%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (2 samples, 0.02%)</title><rect x="99.2606%" y="229" width="0.0192%" height="15" fill="rgb(246,81,33)" fg:x="10337" fg:w="2"/><text x="99.5106%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (2 samples, 0.02%)</title><rect x="99.2798%" y="277" width="0.0192%" height="15" fill="rgb(252,33,42)" fg:x="10339" fg:w="2"/><text x="99.5298%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (2 samples, 0.02%)</title><rect x="99.2798%" y="261" width="0.0192%" height="15" fill="rgb(209,212,41)" fg:x="10339" fg:w="2"/><text x="99.5298%" y="271.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (2 samples, 0.02%)</title><rect x="99.2798%" y="245" width="0.0192%" height="15" fill="rgb(207,154,6)" fg:x="10339" fg:w="2"/><text x="99.5298%" y="255.50"></text></g><g><title>rand_chacha::guts::round (6 samples, 0.06%)</title><rect x="99.2606%" y="293" width="0.0576%" height="15" fill="rgb(223,64,47)" fg:x="10337" fg:w="6"/><text x="99.5106%" y="303.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (2 samples, 0.02%)</title><rect x="99.2990%" y="277" width="0.0192%" height="15" fill="rgb(211,161,38)" fg:x="10341" fg:w="2"/><text x="99.5490%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (2 samples, 0.02%)</title><rect x="99.2990%" y="261" width="0.0192%" height="15" fill="rgb(219,138,40)" fg:x="10341" fg:w="2"/><text x="99.5490%" y="271.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (2 samples, 0.02%)</title><rect x="99.2990%" y="245" width="0.0192%" height="15" fill="rgb(241,228,46)" fg:x="10341" fg:w="2"/><text x="99.5490%" y="255.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (10 samples, 0.10%)</title><rect x="99.2414%" y="373" width="0.0960%" height="15" fill="rgb(223,209,38)" fg:x="10335" fg:w="10"/><text x="99.4914%" y="383.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (10 samples, 0.10%)</title><rect x="99.2414%" y="357" width="0.0960%" height="15" fill="rgb(236,164,45)" fg:x="10335" fg:w="10"/><text x="99.4914%" y="367.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (10 samples, 0.10%)</title><rect x="99.2414%" y="341" width="0.0960%" height="15" fill="rgb(231,15,5)" fg:x="10335" fg:w="10"/><text x="99.4914%" y="351.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (10 samples, 0.10%)</title><rect x="99.2414%" y="325" width="0.0960%" height="15" fill="rgb(252,35,15)" fg:x="10335" fg:w="10"/><text x="99.4914%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (10 samples, 0.10%)</title><rect x="99.2414%" y="309" width="0.0960%" height="15" fill="rgb(248,181,18)" fg:x="10335" fg:w="10"/><text x="99.4914%" y="319.50"></text></g><g><title>rand_chacha::guts::undiagonalize (2 samples, 0.02%)</title><rect x="99.3182%" y="293" width="0.0192%" height="15" fill="rgb(233,39,42)" fg:x="10343" fg:w="2"/><text x="99.5682%" y="303.50"></text></g><g><title>montecarlo::State::diagonal_update (550 samples, 5.28%)</title><rect x="94.0657%" y="533" width="5.2814%" height="15" fill="rgb(238,110,33)" fg:x="9796" fg:w="550"/><text x="94.3157%" y="543.50">montec..</text></g><g><title>rand::rng::Rng::gen (17 samples, 0.16%)</title><rect x="99.1838%" y="517" width="0.1632%" height="15" fill="rgb(233,195,10)" fg:x="10329" fg:w="17"/><text x="99.4338%" y="527.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (17 samples, 0.16%)</title><rect x="99.1838%" y="501" width="0.1632%" height="15" fill="rgb(254,105,3)" fg:x="10329" fg:w="17"/><text x="99.4338%" y="511.50"></text></g><g><title>rand::rng::Rng::gen (17 samples, 0.16%)</title><rect x="99.1838%" y="485" width="0.1632%" height="15" fill="rgb(221,225,9)" fg:x="10329" fg:w="17"/><text x="99.4338%" y="495.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (17 samples, 0.16%)</title><rect x="99.1838%" y="469" width="0.1632%" height="15" fill="rgb(224,227,45)" fg:x="10329" fg:w="17"/><text x="99.4338%" y="479.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (17 samples, 0.16%)</title><rect x="99.1838%" y="453" width="0.1632%" height="15" fill="rgb(229,198,43)" fg:x="10329" fg:w="17"/><text x="99.4338%" y="463.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (17 samples, 0.16%)</title><rect x="99.1838%" y="437" width="0.1632%" height="15" fill="rgb(206,209,35)" fg:x="10329" fg:w="17"/><text x="99.4338%" y="447.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (17 samples, 0.16%)</title><rect x="99.1838%" y="421" width="0.1632%" height="15" fill="rgb(245,195,53)" fg:x="10329" fg:w="17"/><text x="99.4338%" y="431.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (11 samples, 0.11%)</title><rect x="99.2414%" y="405" width="0.1056%" height="15" fill="rgb(240,92,26)" fg:x="10335" fg:w="11"/><text x="99.4914%" y="415.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (11 samples, 0.11%)</title><rect x="99.2414%" y="389" width="0.1056%" height="15" fill="rgb(207,40,23)" fg:x="10335" fg:w="11"/><text x="99.4914%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.05%)</title><rect x="99.3470%" y="517" width="0.0480%" height="15" fill="rgb(223,111,35)" fg:x="10346" fg:w="5"/><text x="99.5970%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.05%)</title><rect x="99.3470%" y="501" width="0.0480%" height="15" fill="rgb(229,147,28)" fg:x="10346" fg:w="5"/><text x="99.5970%" y="511.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (5 samples, 0.05%)</title><rect x="99.3470%" y="485" width="0.0480%" height="15" fill="rgb(211,29,28)" fg:x="10346" fg:w="5"/><text x="99.5970%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.02%)</title><rect x="99.4431%" y="453" width="0.0192%" height="15" fill="rgb(228,72,33)" fg:x="10356" fg:w="2"/><text x="99.6931%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.02%)</title><rect x="99.4431%" y="437" width="0.0192%" height="15" fill="rgb(205,214,31)" fg:x="10356" fg:w="2"/><text x="99.6931%" y="447.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.02%)</title><rect x="99.4431%" y="421" width="0.0192%" height="15" fill="rgb(224,111,15)" fg:x="10356" fg:w="2"/><text x="99.6931%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="99.4431%" y="501" width="0.0288%" height="15" fill="rgb(253,21,26)" fg:x="10356" fg:w="3"/><text x="99.6931%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="99.4431%" y="485" width="0.0288%" height="15" fill="rgb(245,139,43)" fg:x="10356" fg:w="3"/><text x="99.6931%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="99.4431%" y="469" width="0.0288%" height="15" fill="rgb(252,170,7)" fg:x="10356" fg:w="3"/><text x="99.6931%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.10%)</title><rect x="99.3950%" y="517" width="0.0960%" height="15" fill="rgb(231,118,14)" fg:x="10351" fg:w="10"/><text x="99.6450%" y="527.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="99.4719%" y="501" width="0.0192%" height="15" fill="rgb(238,83,0)" fg:x="10359" fg:w="2"/><text x="99.7219%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (9 samples, 0.09%)</title><rect x="99.4911%" y="517" width="0.0864%" height="15" fill="rgb(221,39,39)" fg:x="10361" fg:w="9"/><text x="99.7411%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (10 samples, 0.10%)</title><rect x="99.6543%" y="501" width="0.0960%" height="15" fill="rgb(222,119,46)" fg:x="10378" fg:w="10"/><text x="99.9043%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.03%)</title><rect x="99.7503%" y="501" width="0.0288%" height="15" fill="rgb(222,165,49)" fg:x="10388" fg:w="3"/><text x="100.0003%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.02%)</title><rect x="99.7791%" y="501" width="0.0192%" height="15" fill="rgb(219,113,52)" fg:x="10391" fg:w="2"/><text x="100.0291%" y="511.50"></text></g><g><title>montecarlo::State::directed_loop_update (23 samples, 0.22%)</title><rect x="99.5871%" y="517" width="0.2209%" height="15" fill="rgb(214,7,15)" fg:x="10371" fg:w="23"/><text x="99.8371%" y="527.50"></text></g><g><title>&lt;usize as rand::distributions::utils::WideningMultiply&gt;::wmul (2 samples, 0.02%)</title><rect x="99.8176%" y="453" width="0.0192%" height="15" fill="rgb(235,32,4)" fg:x="10395" fg:w="2"/><text x="100.0676%" y="463.50"></text></g><g><title>&lt;u64 as rand::distributions::utils::WideningMultiply&gt;::wmul (2 samples, 0.02%)</title><rect x="99.8176%" y="437" width="0.0192%" height="15" fill="rgb(238,90,54)" fg:x="10395" fg:w="2"/><text x="100.0676%" y="447.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (3 samples, 0.03%)</title><rect x="99.8752%" y="245" width="0.0288%" height="15" fill="rgb(213,208,19)" fg:x="10401" fg:w="3"/><text x="100.1252%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (3 samples, 0.03%)</title><rect x="99.8752%" y="229" width="0.0288%" height="15" fill="rgb(233,156,4)" fg:x="10401" fg:w="3"/><text x="100.1252%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (3 samples, 0.03%)</title><rect x="99.8752%" y="213" width="0.0288%" height="15" fill="rgb(207,194,5)" fg:x="10401" fg:w="3"/><text x="100.1252%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (3 samples, 0.03%)</title><rect x="99.8752%" y="197" width="0.0288%" height="15" fill="rgb(206,111,30)" fg:x="10401" fg:w="3"/><text x="100.1252%" y="207.50"></text></g><g><title>montecarlo::State::thermalize (609 samples, 5.85%)</title><rect x="94.0657%" y="549" width="5.8479%" height="15" fill="rgb(243,70,54)" fg:x="9796" fg:w="609"/><text x="94.3157%" y="559.50">monteca..</text></g><g><title>montecarlo::State::off_diagonal_update (59 samples, 0.57%)</title><rect x="99.3470%" y="533" width="0.5665%" height="15" fill="rgb(242,28,8)" fg:x="10346" fg:w="59"/><text x="99.5970%" y="543.50"></text></g><g><title>rand::rng::Rng::gen_range (11 samples, 0.11%)</title><rect x="99.8080%" y="517" width="0.1056%" height="15" fill="rgb(219,106,18)" fg:x="10394" fg:w="11"/><text x="100.0580%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (11 samples, 0.11%)</title><rect x="99.8080%" y="501" width="0.1056%" height="15" fill="rgb(244,222,10)" fg:x="10394" fg:w="11"/><text x="100.0580%" y="511.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (11 samples, 0.11%)</title><rect x="99.8080%" y="485" width="0.1056%" height="15" fill="rgb(236,179,52)" fg:x="10394" fg:w="11"/><text x="100.0580%" y="495.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (11 samples, 0.11%)</title><rect x="99.8080%" y="469" width="0.1056%" height="15" fill="rgb(213,23,39)" fg:x="10394" fg:w="11"/><text x="100.0580%" y="479.50"></text></g><g><title>rand::rng::Rng::gen (8 samples, 0.08%)</title><rect x="99.8368%" y="453" width="0.0768%" height="15" fill="rgb(238,48,10)" fg:x="10397" fg:w="8"/><text x="100.0868%" y="463.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (8 samples, 0.08%)</title><rect x="99.8368%" y="437" width="0.0768%" height="15" fill="rgb(251,196,23)" fg:x="10397" fg:w="8"/><text x="100.0868%" y="447.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (8 samples, 0.08%)</title><rect x="99.8368%" y="421" width="0.0768%" height="15" fill="rgb(250,152,24)" fg:x="10397" fg:w="8"/><text x="100.0868%" y="431.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (8 samples, 0.08%)</title><rect x="99.8368%" y="405" width="0.0768%" height="15" fill="rgb(209,150,17)" fg:x="10397" fg:w="8"/><text x="100.0868%" y="415.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (8 samples, 0.08%)</title><rect x="99.8368%" y="389" width="0.0768%" height="15" fill="rgb(234,202,34)" fg:x="10397" fg:w="8"/><text x="100.0868%" y="399.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (5 samples, 0.05%)</title><rect x="99.8656%" y="373" width="0.0480%" height="15" fill="rgb(253,148,53)" fg:x="10400" fg:w="5"/><text x="100.1156%" y="383.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (5 samples, 0.05%)</title><rect x="99.8656%" y="357" width="0.0480%" height="15" fill="rgb(218,129,16)" fg:x="10400" fg:w="5"/><text x="100.1156%" y="367.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (5 samples, 0.05%)</title><rect x="99.8656%" y="341" width="0.0480%" height="15" fill="rgb(216,85,19)" fg:x="10400" fg:w="5"/><text x="100.1156%" y="351.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (5 samples, 0.05%)</title><rect x="99.8656%" y="325" width="0.0480%" height="15" fill="rgb(235,228,7)" fg:x="10400" fg:w="5"/><text x="100.1156%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (5 samples, 0.05%)</title><rect x="99.8656%" y="309" width="0.0480%" height="15" fill="rgb(245,175,0)" fg:x="10400" fg:w="5"/><text x="100.1156%" y="319.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (5 samples, 0.05%)</title><rect x="99.8656%" y="293" width="0.0480%" height="15" fill="rgb(208,168,36)" fg:x="10400" fg:w="5"/><text x="100.1156%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (5 samples, 0.05%)</title><rect x="99.8656%" y="277" width="0.0480%" height="15" fill="rgb(246,171,24)" fg:x="10400" fg:w="5"/><text x="100.1156%" y="287.50"></text></g><g><title>rand_chacha::guts::round (4 samples, 0.04%)</title><rect x="99.8752%" y="261" width="0.0384%" height="15" fill="rgb(215,142,24)" fg:x="10401" fg:w="4"/><text x="100.1252%" y="271.50"></text></g><g><title>montecarlo::main (3 samples, 0.03%)</title><rect x="99.9136%" y="549" width="0.0288%" height="15" fill="rgb(250,187,7)" fg:x="10405" fg:w="3"/><text x="100.1636%" y="559.50"></text></g><g><title>montecarlo (10,409 samples, 99.95%)</title><rect x="0.0000%" y="709" width="99.9520%" height="15" fill="rgb(228,66,33)" fg:x="0" fg:w="10409"/><text x="0.2500%" y="719.50">montecarlo</text></g><g><title>_start (10,293 samples, 98.84%)</title><rect x="1.1139%" y="693" width="98.8381%" height="15" fill="rgb(234,215,21)" fg:x="116" fg:w="10293"/><text x="1.3639%" y="703.50">_start</text></g><g><title>__libc_start_main_impl (10,293 samples, 98.84%)</title><rect x="1.1139%" y="677" width="98.8381%" height="15" fill="rgb(222,191,20)" fg:x="116" fg:w="10293"/><text x="1.3639%" y="687.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (10,293 samples, 98.84%)</title><rect x="1.1139%" y="661" width="98.8381%" height="15" fill="rgb(245,79,54)" fg:x="116" fg:w="10293"/><text x="1.3639%" y="671.50">__libc_start_call_main</text></g><g><title>main (10,293 samples, 98.84%)</title><rect x="1.1139%" y="645" width="98.8381%" height="15" fill="rgb(240,10,37)" fg:x="116" fg:w="10293"/><text x="1.3639%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (10,293 samples, 98.84%)</title><rect x="1.1139%" y="629" width="98.8381%" height="15" fill="rgb(214,192,32)" fg:x="116" fg:w="10293"/><text x="1.3639%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (10,293 samples, 98.84%)</title><rect x="1.1139%" y="613" width="98.8381%" height="15" fill="rgb(209,36,54)" fg:x="116" fg:w="10293"/><text x="1.3639%" y="623.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10,293 samples, 98.84%)</title><rect x="1.1139%" y="597" width="98.8381%" height="15" fill="rgb(220,10,11)" fg:x="116" fg:w="10293"/><text x="1.3639%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (10,293 samples, 98.84%)</title><rect x="1.1139%" y="581" width="98.8381%" height="15" fill="rgb(221,106,17)" fg:x="116" fg:w="10293"/><text x="1.3639%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>montecarlo::main (10,293 samples, 98.84%)</title><rect x="1.1139%" y="565" width="98.8381%" height="15" fill="rgb(251,142,44)" fg:x="116" fg:w="10293"/><text x="1.3639%" y="575.50">montecarlo::main</text></g><g><title>all (10,414 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(238,13,15)" fg:x="0" fg:w="10414"/><text x="0.2500%" y="735.50"></text></g><g><title>perf-exec (5 samples, 0.05%)</title><rect x="99.9520%" y="709" width="0.0480%" height="15" fill="rgb(208,107,27)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="693" width="0.0480%" height="15" fill="rgb(205,136,37)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="677" width="0.0480%" height="15" fill="rgb(250,205,27)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="661" width="0.0480%" height="15" fill="rgb(210,80,43)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="645" width="0.0480%" height="15" fill="rgb(247,160,36)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="629" width="0.0480%" height="15" fill="rgb(234,13,49)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="613" width="0.0480%" height="15" fill="rgb(234,122,0)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="597" width="0.0480%" height="15" fill="rgb(207,146,38)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="581" width="0.0480%" height="15" fill="rgb(207,177,25)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="565" width="0.0480%" height="15" fill="rgb(211,178,42)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="549" width="0.0480%" height="15" fill="rgb(230,69,54)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="533" width="0.0480%" height="15" fill="rgb(214,135,41)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="517" width="0.0480%" height="15" fill="rgb(237,67,25)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="501" width="0.0480%" height="15" fill="rgb(222,189,50)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9520%" y="485" width="0.0480%" height="15" fill="rgb(245,148,34)" fg:x="10409" fg:w="5"/><text x="100.2020%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.9616%" y="469" width="0.0384%" height="15" fill="rgb(222,29,6)" fg:x="10410" fg:w="4"/><text x="100.2116%" y="479.50"></text></g></svg></svg>