<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="757.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="51011"><g><title>__GI___libc_free (8 samples, 0.02%)</title><rect x="0.0020%" y="677" width="0.0157%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="8"/><text x="0.2520%" y="687.50"></text></g><g><title>alloc::raw_vec::finish_grow (17 samples, 0.03%)</title><rect x="0.0176%" y="677" width="0.0333%" height="15" fill="rgb(217,0,24)" fg:x="9" fg:w="17"/><text x="0.2676%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.01%)</title><rect x="0.0529%" y="661" width="0.0137%" height="15" fill="rgb(221,193,54)" fg:x="27" fg:w="7"/><text x="0.3029%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.01%)</title><rect x="0.0529%" y="645" width="0.0137%" height="15" fill="rgb(248,212,6)" fg:x="27" fg:w="7"/><text x="0.3029%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.01%)</title><rect x="0.0529%" y="629" width="0.0137%" height="15" fill="rgb(208,68,35)" fg:x="27" fg:w="7"/><text x="0.3029%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.01%)</title><rect x="0.0529%" y="613" width="0.0137%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="7"/><text x="0.3029%" y="623.50"></text></g><g><title>montecarlo::latice::Latice::random_edge (40 samples, 0.08%)</title><rect x="0.0667%" y="661" width="0.0784%" height="15" fill="rgb(207,160,47)" fg:x="34" fg:w="40"/><text x="0.3167%" y="671.50"></text></g><g><title>rand::rng::Rng::gen_range (40 samples, 0.08%)</title><rect x="0.0667%" y="645" width="0.0784%" height="15" fill="rgb(228,23,34)" fg:x="34" fg:w="40"/><text x="0.3167%" y="655.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (40 samples, 0.08%)</title><rect x="0.0667%" y="629" width="0.0784%" height="15" fill="rgb(218,30,26)" fg:x="34" fg:w="40"/><text x="0.3167%" y="639.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (40 samples, 0.08%)</title><rect x="0.0667%" y="613" width="0.0784%" height="15" fill="rgb(220,122,19)" fg:x="34" fg:w="40"/><text x="0.3167%" y="623.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (40 samples, 0.08%)</title><rect x="0.0667%" y="597" width="0.0784%" height="15" fill="rgb(250,228,42)" fg:x="34" fg:w="40"/><text x="0.3167%" y="607.50"></text></g><g><title>rand::rng::Rng::gen (40 samples, 0.08%)</title><rect x="0.0667%" y="581" width="0.0784%" height="15" fill="rgb(240,193,28)" fg:x="34" fg:w="40"/><text x="0.3167%" y="591.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (40 samples, 0.08%)</title><rect x="0.0667%" y="565" width="0.0784%" height="15" fill="rgb(216,20,37)" fg:x="34" fg:w="40"/><text x="0.3167%" y="575.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (40 samples, 0.08%)</title><rect x="0.0667%" y="549" width="0.0784%" height="15" fill="rgb(206,188,39)" fg:x="34" fg:w="40"/><text x="0.3167%" y="559.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (40 samples, 0.08%)</title><rect x="0.0667%" y="533" width="0.0784%" height="15" fill="rgb(217,207,13)" fg:x="34" fg:w="40"/><text x="0.3167%" y="543.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (40 samples, 0.08%)</title><rect x="0.0667%" y="517" width="0.0784%" height="15" fill="rgb(231,73,38)" fg:x="34" fg:w="40"/><text x="0.3167%" y="527.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (40 samples, 0.08%)</title><rect x="0.0667%" y="501" width="0.0784%" height="15" fill="rgb(225,20,46)" fg:x="34" fg:w="40"/><text x="0.3167%" y="511.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (40 samples, 0.08%)</title><rect x="0.0667%" y="485" width="0.0784%" height="15" fill="rgb(210,31,41)" fg:x="34" fg:w="40"/><text x="0.3167%" y="495.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (7 samples, 0.01%)</title><rect x="0.1313%" y="469" width="0.0137%" height="15" fill="rgb(221,200,47)" fg:x="67" fg:w="7"/><text x="0.3813%" y="479.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (7 samples, 0.01%)</title><rect x="0.1313%" y="453" width="0.0137%" height="15" fill="rgb(226,26,5)" fg:x="67" fg:w="7"/><text x="0.3813%" y="463.50"></text></g><g><title>montecarlo::state::State::diagonal_update (77 samples, 0.15%)</title><rect x="0.0510%" y="677" width="0.1509%" height="15" fill="rgb(249,33,26)" fg:x="26" fg:w="77"/><text x="0.3010%" y="687.50"></text></g><g><title>rand::rng::Rng::gen (29 samples, 0.06%)</title><rect x="0.1451%" y="661" width="0.0569%" height="15" fill="rgb(235,183,28)" fg:x="74" fg:w="29"/><text x="0.3951%" y="671.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (29 samples, 0.06%)</title><rect x="0.1451%" y="645" width="0.0569%" height="15" fill="rgb(221,5,38)" fg:x="74" fg:w="29"/><text x="0.3951%" y="655.50"></text></g><g><title>rand::rng::Rng::gen (29 samples, 0.06%)</title><rect x="0.1451%" y="629" width="0.0569%" height="15" fill="rgb(247,18,42)" fg:x="74" fg:w="29"/><text x="0.3951%" y="639.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (29 samples, 0.06%)</title><rect x="0.1451%" y="613" width="0.0569%" height="15" fill="rgb(241,131,45)" fg:x="74" fg:w="29"/><text x="0.3951%" y="623.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (29 samples, 0.06%)</title><rect x="0.1451%" y="597" width="0.0569%" height="15" fill="rgb(249,31,29)" fg:x="74" fg:w="29"/><text x="0.3951%" y="607.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (29 samples, 0.06%)</title><rect x="0.1451%" y="581" width="0.0569%" height="15" fill="rgb(225,111,53)" fg:x="74" fg:w="29"/><text x="0.3951%" y="591.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (29 samples, 0.06%)</title><rect x="0.1451%" y="565" width="0.0569%" height="15" fill="rgb(238,160,17)" fg:x="74" fg:w="29"/><text x="0.3951%" y="575.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (29 samples, 0.06%)</title><rect x="0.1451%" y="549" width="0.0569%" height="15" fill="rgb(214,148,48)" fg:x="74" fg:w="29"/><text x="0.3951%" y="559.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (29 samples, 0.06%)</title><rect x="0.1451%" y="533" width="0.0569%" height="15" fill="rgb(232,36,49)" fg:x="74" fg:w="29"/><text x="0.3951%" y="543.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (6 samples, 0.01%)</title><rect x="0.1902%" y="517" width="0.0118%" height="15" fill="rgb(209,103,24)" fg:x="97" fg:w="6"/><text x="0.4402%" y="527.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (6 samples, 0.01%)</title><rect x="0.1902%" y="501" width="0.0118%" height="15" fill="rgb(229,88,8)" fg:x="97" fg:w="6"/><text x="0.4402%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (38 samples, 0.07%)</title><rect x="0.2058%" y="661" width="0.0745%" height="15" fill="rgb(213,181,19)" fg:x="105" fg:w="38"/><text x="0.4558%" y="671.50"></text></g><g><title>montecarlo::state::State::off_diagonal_update (201 samples, 0.39%)</title><rect x="0.2019%" y="677" width="0.3940%" height="15" fill="rgb(254,191,54)" fg:x="103" fg:w="201"/><text x="0.4519%" y="687.50"></text></g><g><title>rand::rng::Rng::gen_range (160 samples, 0.31%)</title><rect x="0.2823%" y="661" width="0.3137%" height="15" fill="rgb(241,83,37)" fg:x="144" fg:w="160"/><text x="0.5323%" y="671.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (160 samples, 0.31%)</title><rect x="0.2823%" y="645" width="0.3137%" height="15" fill="rgb(233,36,39)" fg:x="144" fg:w="160"/><text x="0.5323%" y="655.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (160 samples, 0.31%)</title><rect x="0.2823%" y="629" width="0.3137%" height="15" fill="rgb(226,3,54)" fg:x="144" fg:w="160"/><text x="0.5323%" y="639.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (160 samples, 0.31%)</title><rect x="0.2823%" y="613" width="0.3137%" height="15" fill="rgb(245,192,40)" fg:x="144" fg:w="160"/><text x="0.5323%" y="623.50"></text></g><g><title>rand_chacha::guts::refill_wide (20 samples, 0.04%)</title><rect x="0.5959%" y="677" width="0.0392%" height="15" fill="rgb(238,167,29)" fg:x="304" fg:w="20"/><text x="0.8459%" y="687.50"></text></g><g><title>[[heap]] (325 samples, 0.64%)</title><rect x="0.0000%" y="693" width="0.6371%" height="15" fill="rgb(232,182,51)" fg:x="0" fg:w="325"/><text x="0.2500%" y="703.50"></text></g><g><title>__GI___libc_realloc (23 samples, 0.05%)</title><rect x="0.6450%" y="677" width="0.0451%" height="15" fill="rgb(231,60,39)" fg:x="329" fg:w="23"/><text x="0.8950%" y="687.50"></text></g><g><title>__rdl_realloc (6 samples, 0.01%)</title><rect x="0.6900%" y="677" width="0.0118%" height="15" fill="rgb(208,69,12)" fg:x="352" fg:w="6"/><text x="0.9400%" y="687.50"></text></g><g><title>[[stack]] (41 samples, 0.08%)</title><rect x="0.6371%" y="693" width="0.0804%" height="15" fill="rgb(235,93,37)" fg:x="325" fg:w="41"/><text x="0.8871%" y="703.50"></text></g><g><title>_int_free (8 samples, 0.02%)</title><rect x="0.7018%" y="677" width="0.0157%" height="15" fill="rgb(213,116,39)" fg:x="358" fg:w="8"/><text x="0.9518%" y="687.50"></text></g><g><title>__GI___libc_free (7 samples, 0.01%)</title><rect x="0.7312%" y="677" width="0.0137%" height="15" fill="rgb(222,207,29)" fg:x="373" fg:w="7"/><text x="0.9812%" y="687.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.04%)</title><rect x="0.7528%" y="677" width="0.0372%" height="15" fill="rgb(206,96,30)" fg:x="384" fg:w="19"/><text x="1.0028%" y="687.50"></text></g><g><title>_int_free (24 samples, 0.05%)</title><rect x="0.8077%" y="677" width="0.0470%" height="15" fill="rgb(218,138,4)" fg:x="412" fg:w="24"/><text x="1.0577%" y="687.50"></text></g><g><title>_int_realloc (35 samples, 0.07%)</title><rect x="0.8586%" y="677" width="0.0686%" height="15" fill="rgb(250,191,14)" fg:x="438" fg:w="35"/><text x="1.1086%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (29 samples, 0.06%)</title><rect x="0.9273%" y="677" width="0.0569%" height="15" fill="rgb(239,60,40)" fg:x="473" fg:w="29"/><text x="1.1773%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.03%)</title><rect x="0.9567%" y="661" width="0.0274%" height="15" fill="rgb(206,27,48)" fg:x="488" fg:w="14"/><text x="1.2067%" y="671.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (9 samples, 0.02%)</title><rect x="0.9665%" y="645" width="0.0176%" height="15" fill="rgb(225,35,8)" fg:x="493" fg:w="9"/><text x="1.2165%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (9 samples, 0.02%)</title><rect x="0.9665%" y="629" width="0.0176%" height="15" fill="rgb(250,213,24)" fg:x="493" fg:w="9"/><text x="1.2165%" y="639.50"></text></g><g><title>alloc::raw_vec::finish_grow (19 samples, 0.04%)</title><rect x="0.9841%" y="677" width="0.0372%" height="15" fill="rgb(247,123,22)" fg:x="502" fg:w="19"/><text x="1.2341%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (16 samples, 0.03%)</title><rect x="0.9900%" y="661" width="0.0314%" height="15" fill="rgb(231,138,38)" fg:x="505" fg:w="16"/><text x="1.2400%" y="671.50"></text></g><g><title>alloc::alloc::Global::grow_impl (16 samples, 0.03%)</title><rect x="0.9900%" y="645" width="0.0314%" height="15" fill="rgb(231,145,46)" fg:x="505" fg:w="16"/><text x="1.2400%" y="655.50"></text></g><g><title>alloc::alloc::realloc (16 samples, 0.03%)</title><rect x="0.9900%" y="629" width="0.0314%" height="15" fill="rgb(251,118,11)" fg:x="505" fg:w="16"/><text x="1.2400%" y="639.50"></text></g><g><title>rand::rng::Rng::gen (303 samples, 0.59%)</title><rect x="1.0429%" y="677" width="0.5940%" height="15" fill="rgb(217,147,25)" fg:x="532" fg:w="303"/><text x="1.2929%" y="687.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (8 samples, 0.02%)</title><rect x="1.6212%" y="661" width="0.0157%" height="15" fill="rgb(247,81,37)" fg:x="827" fg:w="8"/><text x="1.8712%" y="671.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (8 samples, 0.02%)</title><rect x="1.6212%" y="645" width="0.0157%" height="15" fill="rgb(209,12,38)" fg:x="827" fg:w="8"/><text x="1.8712%" y="655.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (8 samples, 0.02%)</title><rect x="1.6212%" y="629" width="0.0157%" height="15" fill="rgb(227,1,9)" fg:x="827" fg:w="8"/><text x="1.8712%" y="639.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (8 samples, 0.02%)</title><rect x="1.6212%" y="613" width="0.0157%" height="15" fill="rgb(248,47,43)" fg:x="827" fg:w="8"/><text x="1.8712%" y="623.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (8 samples, 0.02%)</title><rect x="1.6212%" y="597" width="0.0157%" height="15" fill="rgb(221,10,30)" fg:x="827" fg:w="8"/><text x="1.8712%" y="607.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (8 samples, 0.02%)</title><rect x="1.6212%" y="581" width="0.0157%" height="15" fill="rgb(210,229,1)" fg:x="827" fg:w="8"/><text x="1.8712%" y="591.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::get_fork_counter (34 samples, 0.07%)</title><rect x="1.6369%" y="677" width="0.0667%" height="15" fill="rgb(222,148,37)" fg:x="835" fg:w="34"/><text x="1.8869%" y="687.50"></text></g><g><title>rand_chacha::guts::refill_wide (22 samples, 0.04%)</title><rect x="1.7036%" y="677" width="0.0431%" height="15" fill="rgb(234,67,33)" fg:x="869" fg:w="22"/><text x="1.9536%" y="687.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (25 samples, 0.05%)</title><rect x="1.7467%" y="677" width="0.0490%" height="15" fill="rgb(247,98,35)" fg:x="891" fg:w="25"/><text x="1.9967%" y="687.50"></text></g><g><title>[unknown] (553 samples, 1.08%)</title><rect x="0.7195%" y="693" width="1.0841%" height="15" fill="rgb(247,138,52)" fg:x="367" fg:w="553"/><text x="0.9695%" y="703.50"></text></g><g><title>_int_free (12 samples, 0.02%)</title><rect x="1.8447%" y="533" width="0.0235%" height="15" fill="rgb(213,79,30)" fg:x="941" fg:w="12"/><text x="2.0947%" y="543.50"></text></g><g><title>__GI___libc_free (24 samples, 0.05%)</title><rect x="1.8231%" y="549" width="0.0470%" height="15" fill="rgb(246,177,23)" fg:x="930" fg:w="24"/><text x="2.0731%" y="559.50"></text></g><g><title>__GI___libc_malloc (12 samples, 0.02%)</title><rect x="15.4026%" y="373" width="0.0235%" height="15" fill="rgb(230,62,27)" fg:x="7857" fg:w="12"/><text x="15.6526%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.04%)</title><rect x="15.3967%" y="469" width="0.0372%" height="15" fill="rgb(216,154,8)" fg:x="7854" fg:w="19"/><text x="15.6467%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.04%)</title><rect x="15.3967%" y="453" width="0.0372%" height="15" fill="rgb(244,35,45)" fg:x="7854" fg:w="19"/><text x="15.6467%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.04%)</title><rect x="15.3967%" y="437" width="0.0372%" height="15" fill="rgb(251,115,12)" fg:x="7854" fg:w="19"/><text x="15.6467%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (16 samples, 0.03%)</title><rect x="15.4026%" y="421" width="0.0314%" height="15" fill="rgb(240,54,50)" fg:x="7857" fg:w="16"/><text x="15.6526%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (16 samples, 0.03%)</title><rect x="15.4026%" y="405" width="0.0314%" height="15" fill="rgb(233,84,52)" fg:x="7857" fg:w="16"/><text x="15.6526%" y="415.50"></text></g><g><title>alloc::alloc::alloc (16 samples, 0.03%)</title><rect x="15.4026%" y="389" width="0.0314%" height="15" fill="rgb(207,117,47)" fg:x="7857" fg:w="16"/><text x="15.6526%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.05%)</title><rect x="15.3947%" y="533" width="0.0451%" height="15" fill="rgb(249,43,39)" fg:x="7853" fg:w="23"/><text x="15.6447%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.04%)</title><rect x="15.3967%" y="517" width="0.0431%" height="15" fill="rgb(209,38,44)" fg:x="7854" fg:w="22"/><text x="15.6467%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.04%)</title><rect x="15.3967%" y="501" width="0.0431%" height="15" fill="rgb(236,212,23)" fg:x="7854" fg:w="22"/><text x="15.6467%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.04%)</title><rect x="15.3967%" y="485" width="0.0431%" height="15" fill="rgb(242,79,21)" fg:x="7854" fg:w="22"/><text x="15.6467%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (154 samples, 0.30%)</title><rect x="15.4398%" y="533" width="0.3019%" height="15" fill="rgb(211,96,35)" fg:x="7876" fg:w="154"/><text x="15.6898%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (154 samples, 0.30%)</title><rect x="15.4398%" y="517" width="0.3019%" height="15" fill="rgb(253,215,40)" fg:x="7876" fg:w="154"/><text x="15.6898%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (154 samples, 0.30%)</title><rect x="15.4398%" y="501" width="0.3019%" height="15" fill="rgb(211,81,21)" fg:x="7876" fg:w="154"/><text x="15.6898%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (53 samples, 0.10%)</title><rect x="15.7417%" y="533" width="0.1039%" height="15" fill="rgb(208,190,38)" fg:x="8030" fg:w="53"/><text x="15.9917%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (53 samples, 0.10%)</title><rect x="15.7417%" y="517" width="0.1039%" height="15" fill="rgb(235,213,38)" fg:x="8030" fg:w="53"/><text x="15.9917%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (53 samples, 0.10%)</title><rect x="15.7417%" y="501" width="0.1039%" height="15" fill="rgb(237,122,38)" fg:x="8030" fg:w="53"/><text x="15.9917%" y="511.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="15.8456%" y="533" width="0.0294%" height="15" fill="rgb(244,218,35)" fg:x="8083" fg:w="15"/><text x="16.0956%" y="543.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="15.8456%" y="517" width="0.0294%" height="15" fill="rgb(240,68,47)" fg:x="8083" fg:w="15"/><text x="16.0956%" y="527.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="15.8456%" y="501" width="0.0294%" height="15" fill="rgb(210,16,53)" fg:x="8083" fg:w="15"/><text x="16.0956%" y="511.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="15.8456%" y="485" width="0.0294%" height="15" fill="rgb(235,124,12)" fg:x="8083" fg:w="15"/><text x="16.0956%" y="495.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="15.8456%" y="469" width="0.0294%" height="15" fill="rgb(224,169,11)" fg:x="8083" fg:w="15"/><text x="16.0956%" y="479.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="15.8534%" y="453" width="0.0216%" height="15" fill="rgb(250,166,2)" fg:x="8087" fg:w="11"/><text x="16.1034%" y="463.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="15.8554%" y="437" width="0.0196%" height="15" fill="rgb(242,216,29)" fg:x="8088" fg:w="10"/><text x="16.1054%" y="447.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="15.8554%" y="421" width="0.0196%" height="15" fill="rgb(230,116,27)" fg:x="8088" fg:w="10"/><text x="16.1054%" y="431.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="15.8554%" y="405" width="0.0196%" height="15" fill="rgb(228,99,48)" fg:x="8088" fg:w="10"/><text x="16.1054%" y="415.50"></text></g><g><title>[unknown] (10 samples, 0.02%)</title><rect x="15.8554%" y="389" width="0.0196%" height="15" fill="rgb(253,11,6)" fg:x="8088" fg:w="10"/><text x="16.1054%" y="399.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="15.8574%" y="373" width="0.0176%" height="15" fill="rgb(247,143,39)" fg:x="8089" fg:w="9"/><text x="16.1074%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (487 samples, 0.95%)</title><rect x="15.8750%" y="517" width="0.9547%" height="15" fill="rgb(236,97,10)" fg:x="8098" fg:w="487"/><text x="16.1250%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (246 samples, 0.48%)</title><rect x="16.3475%" y="501" width="0.4822%" height="15" fill="rgb(233,208,19)" fg:x="8339" fg:w="246"/><text x="16.5975%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (488 samples, 0.96%)</title><rect x="15.8750%" y="533" width="0.9567%" height="15" fill="rgb(216,164,2)" fg:x="8098" fg:w="488"/><text x="16.1250%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (432 samples, 0.85%)</title><rect x="16.8375%" y="517" width="0.8469%" height="15" fill="rgb(220,129,5)" fg:x="8589" fg:w="432"/><text x="17.0875%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (432 samples, 0.85%)</title><rect x="16.8375%" y="501" width="0.8469%" height="15" fill="rgb(242,17,10)" fg:x="8589" fg:w="432"/><text x="17.0875%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (432 samples, 0.85%)</title><rect x="16.8375%" y="485" width="0.8469%" height="15" fill="rgb(242,107,0)" fg:x="8589" fg:w="432"/><text x="17.0875%" y="495.50"></text></g><g><title>&lt;montecarlo::latice::Edge as core::clone::Clone&gt;::clone (331 samples, 0.65%)</title><rect x="17.6844%" y="517" width="0.6489%" height="15" fill="rgb(251,28,31)" fg:x="9021" fg:w="331"/><text x="17.9344%" y="527.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (331 samples, 0.65%)</title><rect x="17.6844%" y="501" width="0.6489%" height="15" fill="rgb(233,223,10)" fg:x="9021" fg:w="331"/><text x="17.9344%" y="511.50"></text></g><g><title>&lt;usize as rand::distributions::utils::WideningMultiply&gt;::wmul (377 samples, 0.74%)</title><rect x="18.7430%" y="453" width="0.7391%" height="15" fill="rgb(215,21,27)" fg:x="9561" fg:w="377"/><text x="18.9930%" y="463.50"></text></g><g><title>&lt;u64 as rand::distributions::utils::WideningMultiply&gt;::wmul (377 samples, 0.74%)</title><rect x="18.7430%" y="437" width="0.7391%" height="15" fill="rgb(232,23,21)" fg:x="9561" fg:w="377"/><text x="18.9930%" y="447.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (191 samples, 0.37%)</title><rect x="21.4503%" y="373" width="0.3744%" height="15" fill="rgb(244,5,23)" fg:x="10942" fg:w="191"/><text x="21.7003%" y="383.50"></text></g><g><title>rand_chacha::guts::refill_wide (14 samples, 0.03%)</title><rect x="21.8580%" y="309" width="0.0274%" height="15" fill="rgb(226,81,46)" fg:x="11150" fg:w="14"/><text x="22.1080%" y="319.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (15 samples, 0.03%)</title><rect x="21.8855%" y="277" width="0.0294%" height="15" fill="rgb(247,70,30)" fg:x="11164" fg:w="15"/><text x="22.1355%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as core::ops::arith::Add&gt;::add (11 samples, 0.02%)</title><rect x="21.9188%" y="261" width="0.0216%" height="15" fill="rgb(212,68,19)" fg:x="11181" fg:w="11"/><text x="22.1688%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (11 samples, 0.02%)</title><rect x="21.9188%" y="245" width="0.0216%" height="15" fill="rgb(240,187,13)" fg:x="11181" fg:w="11"/><text x="22.1688%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as ppv_lite86::types::StoreBytes&gt;::write_le (49 samples, 0.10%)</title><rect x="21.9404%" y="261" width="0.0961%" height="15" fill="rgb(223,113,26)" fg:x="11192" fg:w="49"/><text x="22.1904%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_storeu_si128 (49 samples, 0.10%)</title><rect x="21.9404%" y="245" width="0.0961%" height="15" fill="rgb(206,192,2)" fg:x="11192" fg:w="49"/><text x="22.1904%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (49 samples, 0.10%)</title><rect x="21.9404%" y="229" width="0.0961%" height="15" fill="rgb(241,108,4)" fg:x="11192" fg:w="49"/><text x="22.1904%" y="239.50"></text></g><g><title>core::ptr::write_unaligned (49 samples, 0.10%)</title><rect x="21.9404%" y="213" width="0.0961%" height="15" fill="rgb(247,173,49)" fg:x="11192" fg:w="49"/><text x="22.1904%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (49 samples, 0.10%)</title><rect x="21.9404%" y="197" width="0.0961%" height="15" fill="rgb(224,114,35)" fg:x="11192" fg:w="49"/><text x="22.1904%" y="207.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (76 samples, 0.15%)</title><rect x="22.0364%" y="261" width="0.1490%" height="15" fill="rgb(245,159,27)" fg:x="11241" fg:w="76"/><text x="22.2864%" y="271.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (76 samples, 0.15%)</title><rect x="22.0364%" y="245" width="0.1490%" height="15" fill="rgb(245,172,44)" fg:x="11241" fg:w="76"/><text x="22.2864%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (45 samples, 0.09%)</title><rect x="22.1854%" y="261" width="0.0882%" height="15" fill="rgb(236,23,11)" fg:x="11317" fg:w="45"/><text x="22.4354%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (45 samples, 0.09%)</title><rect x="22.1854%" y="245" width="0.0882%" height="15" fill="rgb(205,117,38)" fg:x="11317" fg:w="45"/><text x="22.4354%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (6 samples, 0.01%)</title><rect x="22.2736%" y="261" width="0.0118%" height="15" fill="rgb(237,72,25)" fg:x="11362" fg:w="6"/><text x="22.5236%" y="271.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::_&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::to_lanes (13 samples, 0.03%)</title><rect x="22.2952%" y="261" width="0.0255%" height="15" fill="rgb(244,70,9)" fg:x="11373" fg:w="13"/><text x="22.5452%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::to_lanes (13 samples, 0.03%)</title><rect x="22.2952%" y="245" width="0.0255%" height="15" fill="rgb(217,125,39)" fg:x="11373" fg:w="13"/><text x="22.5452%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_extracti128_si256 (13 samples, 0.03%)</title><rect x="22.2952%" y="229" width="0.0255%" height="15" fill="rgb(235,36,10)" fg:x="11373" fg:w="13"/><text x="22.5452%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (10 samples, 0.02%)</title><rect x="22.3207%" y="245" width="0.0196%" height="15" fill="rgb(251,123,47)" fg:x="11386" fg:w="10"/><text x="22.5707%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (10 samples, 0.02%)</title><rect x="22.3207%" y="229" width="0.0196%" height="15" fill="rgb(221,13,13)" fg:x="11386" fg:w="10"/><text x="22.5707%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (10 samples, 0.02%)</title><rect x="22.3207%" y="213" width="0.0196%" height="15" fill="rgb(238,131,9)" fg:x="11386" fg:w="10"/><text x="22.5707%" y="223.50"></text></g><g><title>rand_chacha::guts::diagonalize (56 samples, 0.11%)</title><rect x="22.3207%" y="261" width="0.1098%" height="15" fill="rgb(211,50,8)" fg:x="11386" fg:w="56"/><text x="22.5707%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (46 samples, 0.09%)</title><rect x="22.3403%" y="245" width="0.0902%" height="15" fill="rgb(245,182,24)" fg:x="11396" fg:w="46"/><text x="22.5903%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (46 samples, 0.09%)</title><rect x="22.3403%" y="229" width="0.0902%" height="15" fill="rgb(242,14,37)" fg:x="11396" fg:w="46"/><text x="22.5903%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (46 samples, 0.09%)</title><rect x="22.3403%" y="213" width="0.0902%" height="15" fill="rgb(246,228,12)" fg:x="11396" fg:w="46"/><text x="22.5903%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (278 samples, 0.54%)</title><rect x="22.4305%" y="197" width="0.5450%" height="15" fill="rgb(213,55,15)" fg:x="11442" fg:w="278"/><text x="22.6805%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (280 samples, 0.55%)</title><rect x="22.4305%" y="245" width="0.5489%" height="15" fill="rgb(209,9,3)" fg:x="11442" fg:w="280"/><text x="22.6805%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (280 samples, 0.55%)</title><rect x="22.4305%" y="229" width="0.5489%" height="15" fill="rgb(230,59,30)" fg:x="11442" fg:w="280"/><text x="22.6805%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (280 samples, 0.55%)</title><rect x="22.4305%" y="213" width="0.5489%" height="15" fill="rgb(209,121,21)" fg:x="11442" fg:w="280"/><text x="22.6805%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (168 samples, 0.33%)</title><rect x="22.9794%" y="245" width="0.3293%" height="15" fill="rgb(220,109,13)" fg:x="11722" fg:w="168"/><text x="23.2294%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (168 samples, 0.33%)</title><rect x="22.9794%" y="229" width="0.3293%" height="15" fill="rgb(232,18,1)" fg:x="11722" fg:w="168"/><text x="23.2294%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (168 samples, 0.33%)</title><rect x="22.9794%" y="213" width="0.3293%" height="15" fill="rgb(215,41,42)" fg:x="11722" fg:w="168"/><text x="23.2294%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (220 samples, 0.43%)</title><rect x="23.3087%" y="245" width="0.4313%" height="15" fill="rgb(224,123,36)" fg:x="11890" fg:w="220"/><text x="23.5587%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (220 samples, 0.43%)</title><rect x="23.3087%" y="229" width="0.4313%" height="15" fill="rgb(240,125,3)" fg:x="11890" fg:w="220"/><text x="23.5587%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (220 samples, 0.43%)</title><rect x="23.3087%" y="213" width="0.4313%" height="15" fill="rgb(205,98,50)" fg:x="11890" fg:w="220"/><text x="23.5587%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (272 samples, 0.53%)</title><rect x="23.7400%" y="213" width="0.5332%" height="15" fill="rgb(205,185,37)" fg:x="12110" fg:w="272"/><text x="23.9900%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (288 samples, 0.56%)</title><rect x="23.7400%" y="245" width="0.5646%" height="15" fill="rgb(238,207,15)" fg:x="12110" fg:w="288"/><text x="23.9900%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (288 samples, 0.56%)</title><rect x="23.7400%" y="229" width="0.5646%" height="15" fill="rgb(213,199,42)" fg:x="12110" fg:w="288"/><text x="23.9900%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (16 samples, 0.03%)</title><rect x="24.2732%" y="213" width="0.0314%" height="15" fill="rgb(235,201,11)" fg:x="12382" fg:w="16"/><text x="24.5232%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (156 samples, 0.31%)</title><rect x="24.3046%" y="245" width="0.3058%" height="15" fill="rgb(207,46,11)" fg:x="12398" fg:w="156"/><text x="24.5546%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (156 samples, 0.31%)</title><rect x="24.3046%" y="229" width="0.3058%" height="15" fill="rgb(241,35,35)" fg:x="12398" fg:w="156"/><text x="24.5546%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (156 samples, 0.31%)</title><rect x="24.3046%" y="213" width="0.3058%" height="15" fill="rgb(243,32,47)" fg:x="12398" fg:w="156"/><text x="24.5546%" y="223.50"></text></g><g><title>rand_chacha::guts::round (1,325 samples, 2.60%)</title><rect x="22.4305%" y="261" width="2.5975%" height="15" fill="rgb(247,202,23)" fg:x="11442" fg:w="1325"/><text x="22.6805%" y="271.50">ra..</text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (213 samples, 0.42%)</title><rect x="24.6104%" y="245" width="0.4176%" height="15" fill="rgb(219,102,11)" fg:x="12554" fg:w="213"/><text x="24.8604%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (213 samples, 0.42%)</title><rect x="24.6104%" y="229" width="0.4176%" height="15" fill="rgb(243,110,44)" fg:x="12554" fg:w="213"/><text x="24.8604%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (213 samples, 0.42%)</title><rect x="24.6104%" y="213" width="0.4176%" height="15" fill="rgb(222,74,54)" fg:x="12554" fg:w="213"/><text x="24.8604%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (35 samples, 0.07%)</title><rect x="25.0279%" y="245" width="0.0686%" height="15" fill="rgb(216,99,12)" fg:x="12767" fg:w="35"/><text x="25.2779%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (35 samples, 0.07%)</title><rect x="25.0279%" y="229" width="0.0686%" height="15" fill="rgb(226,22,26)" fg:x="12767" fg:w="35"/><text x="25.2779%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (35 samples, 0.07%)</title><rect x="25.0279%" y="213" width="0.0686%" height="15" fill="rgb(217,163,10)" fg:x="12767" fg:w="35"/><text x="25.2779%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (17 samples, 0.03%)</title><rect x="25.0965%" y="245" width="0.0333%" height="15" fill="rgb(213,25,53)" fg:x="12802" fg:w="17"/><text x="25.3465%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (17 samples, 0.03%)</title><rect x="25.0965%" y="229" width="0.0333%" height="15" fill="rgb(252,105,26)" fg:x="12802" fg:w="17"/><text x="25.3465%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (17 samples, 0.03%)</title><rect x="25.0965%" y="213" width="0.0333%" height="15" fill="rgb(220,39,43)" fg:x="12802" fg:w="17"/><text x="25.3465%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1,677 samples, 3.29%)</title><rect x="21.8855%" y="309" width="3.2875%" height="15" fill="rgb(229,68,48)" fg:x="11164" fg:w="1677"/><text x="22.1355%" y="319.50">ran..</text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1,677 samples, 3.29%)</title><rect x="21.8855%" y="293" width="3.2875%" height="15" fill="rgb(252,8,32)" fg:x="11164" fg:w="1677"/><text x="22.1355%" y="303.50">ran..</text></g><g><title>rand_chacha::guts::refill_wide_impl (1,662 samples, 3.26%)</title><rect x="21.9149%" y="277" width="3.2581%" height="15" fill="rgb(223,20,43)" fg:x="11179" fg:w="1662"/><text x="22.1649%" y="287.50">ran..</text></g><g><title>rand_chacha::guts::undiagonalize (74 samples, 0.15%)</title><rect x="25.0279%" y="261" width="0.1451%" height="15" fill="rgb(229,81,49)" fg:x="12767" fg:w="74"/><text x="25.2779%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (22 samples, 0.04%)</title><rect x="25.1299%" y="245" width="0.0431%" height="15" fill="rgb(236,28,36)" fg:x="12819" fg:w="22"/><text x="25.3799%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (22 samples, 0.04%)</title><rect x="25.1299%" y="229" width="0.0431%" height="15" fill="rgb(249,185,26)" fg:x="12819" fg:w="22"/><text x="25.3799%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (22 samples, 0.04%)</title><rect x="25.1299%" y="213" width="0.0431%" height="15" fill="rgb(249,174,33)" fg:x="12819" fg:w="22"/><text x="25.3799%" y="223.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1,702 samples, 3.34%)</title><rect x="21.8404%" y="341" width="3.3365%" height="15" fill="rgb(233,201,37)" fg:x="11141" fg:w="1702"/><text x="22.0904%" y="351.50">&lt;ra..</text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1,702 samples, 3.34%)</title><rect x="21.8404%" y="325" width="3.3365%" height="15" fill="rgb(221,78,26)" fg:x="11141" fg:w="1702"/><text x="22.0904%" y="335.50">ran..</text></g><g><title>&lt;&amp;mut R as rand_core::RngCore&gt;::try_fill_bytes (20 samples, 0.04%)</title><rect x="25.1789%" y="293" width="0.0392%" height="15" fill="rgb(250,127,30)" fg:x="12844" fg:w="20"/><text x="25.4289%" y="303.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (20 samples, 0.04%)</title><rect x="25.1789%" y="277" width="0.0392%" height="15" fill="rgb(230,49,44)" fg:x="12844" fg:w="20"/><text x="25.4289%" y="287.50"></text></g><g><title>getrandom::getrandom (20 samples, 0.04%)</title><rect x="25.1789%" y="261" width="0.0392%" height="15" fill="rgb(229,67,23)" fg:x="12844" fg:w="20"/><text x="25.4289%" y="271.50"></text></g><g><title>getrandom::getrandom_uninit (20 samples, 0.04%)</title><rect x="25.1789%" y="245" width="0.0392%" height="15" fill="rgb(249,83,47)" fg:x="12844" fg:w="20"/><text x="25.4289%" y="255.50"></text></g><g><title>getrandom::imp::getrandom_inner (20 samples, 0.04%)</title><rect x="25.1789%" y="229" width="0.0392%" height="15" fill="rgb(215,43,3)" fg:x="12844" fg:w="20"/><text x="25.4289%" y="239.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (20 samples, 0.04%)</title><rect x="25.1789%" y="213" width="0.0392%" height="15" fill="rgb(238,154,13)" fg:x="12844" fg:w="20"/><text x="25.4289%" y="223.50"></text></g><g><title>getrandom::imp::getrandom_inner::_{{closure}} (20 samples, 0.04%)</title><rect x="25.1789%" y="197" width="0.0392%" height="15" fill="rgb(219,56,2)" fg:x="12844" fg:w="20"/><text x="25.4289%" y="207.50"></text></g><g><title>getrandom::imp::getrandom (20 samples, 0.04%)</title><rect x="25.1789%" y="181" width="0.0392%" height="15" fill="rgb(233,0,4)" fg:x="12844" fg:w="20"/><text x="25.4289%" y="191.50"></text></g><g><title>syscall (19 samples, 0.04%)</title><rect x="25.1808%" y="165" width="0.0372%" height="15" fill="rgb(235,30,7)" fg:x="12845" fg:w="19"/><text x="25.4308%" y="175.50"></text></g><g><title>[unknown] (19 samples, 0.04%)</title><rect x="25.1808%" y="149" width="0.0372%" height="15" fill="rgb(250,79,13)" fg:x="12845" fg:w="19"/><text x="25.4308%" y="159.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="25.1848%" y="133" width="0.0333%" height="15" fill="rgb(211,146,34)" fg:x="12847" fg:w="17"/><text x="25.4348%" y="143.50"></text></g><g><title>[unknown] (17 samples, 0.03%)</title><rect x="25.1848%" y="117" width="0.0333%" height="15" fill="rgb(228,22,38)" fg:x="12847" fg:w="17"/><text x="25.4348%" y="127.50"></text></g><g><title>[unknown] (16 samples, 0.03%)</title><rect x="25.1867%" y="101" width="0.0314%" height="15" fill="rgb(235,168,5)" fg:x="12848" fg:w="16"/><text x="25.4367%" y="111.50"></text></g><g><title>[unknown] (15 samples, 0.03%)</title><rect x="25.1887%" y="85" width="0.0294%" height="15" fill="rgb(221,155,16)" fg:x="12849" fg:w="15"/><text x="25.4387%" y="95.50"></text></g><g><title>[unknown] (13 samples, 0.03%)</title><rect x="25.1926%" y="69" width="0.0255%" height="15" fill="rgb(215,215,53)" fg:x="12851" fg:w="13"/><text x="25.4426%" y="79.50"></text></g><g><title>[unknown] (11 samples, 0.02%)</title><rect x="25.1965%" y="53" width="0.0216%" height="15" fill="rgb(223,4,10)" fg:x="12853" fg:w="11"/><text x="25.4465%" y="63.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="25.2063%" y="37" width="0.0118%" height="15" fill="rgb(234,103,6)" fg:x="12858" fg:w="6"/><text x="25.4563%" y="47.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (21 samples, 0.04%)</title><rect x="25.1789%" y="341" width="0.0412%" height="15" fill="rgb(227,97,0)" fg:x="12844" fg:w="21"/><text x="25.4289%" y="351.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (21 samples, 0.04%)</title><rect x="25.1789%" y="325" width="0.0412%" height="15" fill="rgb(234,150,53)" fg:x="12844" fg:w="21"/><text x="25.4289%" y="335.50"></text></g><g><title>rand_core::SeedableRng::from_rng (21 samples, 0.04%)</title><rect x="25.1789%" y="309" width="0.0412%" height="15" fill="rgb(228,201,54)" fg:x="12844" fg:w="21"/><text x="25.4289%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (3,412 samples, 6.69%)</title><rect x="18.5450%" y="501" width="6.6888%" height="15" fill="rgb(222,22,37)" fg:x="9460" fg:w="3412"/><text x="18.7950%" y="511.50">&lt;core::op..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (3,412 samples, 6.69%)</title><rect x="18.5450%" y="485" width="6.6888%" height="15" fill="rgb(237,53,32)" fg:x="9460" fg:w="3412"/><text x="18.7950%" y="495.50">&lt;rand::di..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (3,412 samples, 6.69%)</title><rect x="18.5450%" y="469" width="6.6888%" height="15" fill="rgb(233,25,53)" fg:x="9460" fg:w="3412"/><text x="18.7950%" y="479.50">&lt;rand::di..</text></g><g><title>rand::rng::Rng::gen (2,933 samples, 5.75%)</title><rect x="19.4840%" y="453" width="5.7497%" height="15" fill="rgb(210,40,34)" fg:x="9939" fg:w="2933"/><text x="19.7340%" y="463.50">rand::r..</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (2,933 samples, 5.75%)</title><rect x="19.4840%" y="437" width="5.7497%" height="15" fill="rgb(241,220,44)" fg:x="9939" fg:w="2933"/><text x="19.7340%" y="447.50">rand::d..</text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (2,933 samples, 5.75%)</title><rect x="19.4840%" y="421" width="5.7497%" height="15" fill="rgb(235,28,35)" fg:x="9939" fg:w="2933"/><text x="19.7340%" y="431.50">&lt;rand::..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (2,933 samples, 5.75%)</title><rect x="19.4840%" y="405" width="5.7497%" height="15" fill="rgb(210,56,17)" fg:x="9939" fg:w="2933"/><text x="19.7340%" y="415.50">&lt;rand::..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (2,933 samples, 5.75%)</title><rect x="19.4840%" y="389" width="5.7497%" height="15" fill="rgb(224,130,29)" fg:x="9939" fg:w="2933"/><text x="19.7340%" y="399.50">&lt;rand_c..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1,739 samples, 3.41%)</title><rect x="21.8247%" y="373" width="3.4091%" height="15" fill="rgb(235,212,8)" fg:x="11133" fg:w="1739"/><text x="22.0747%" y="383.50">ran..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1,739 samples, 3.41%)</title><rect x="21.8247%" y="357" width="3.4091%" height="15" fill="rgb(223,33,50)" fg:x="11133" fg:w="1739"/><text x="22.0747%" y="367.50">&lt;ra..</text></g><g><title>montecarlo::latice::Latice::random_edge (4,284 samples, 8.40%)</title><rect x="16.8375%" y="533" width="8.3982%" height="15" fill="rgb(219,149,13)" fg:x="8589" fg:w="4284"/><text x="17.0875%" y="543.50">montecarlo::..</text></g><g><title>rand::rng::Rng::gen_range (3,521 samples, 6.90%)</title><rect x="18.3333%" y="517" width="6.9024%" height="15" fill="rgb(250,156,29)" fg:x="9352" fg:w="3521"/><text x="18.5833%" y="527.50">rand::rng..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (175 samples, 0.34%)</title><rect x="25.5886%" y="517" width="0.3431%" height="15" fill="rgb(216,193,19)" fg:x="13053" fg:w="175"/><text x="25.8386%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (175 samples, 0.34%)</title><rect x="25.5886%" y="501" width="0.3431%" height="15" fill="rgb(216,135,14)" fg:x="13053" fg:w="175"/><text x="25.8386%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (175 samples, 0.34%)</title><rect x="25.5886%" y="485" width="0.3431%" height="15" fill="rgb(241,47,5)" fg:x="13053" fg:w="175"/><text x="25.8386%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (227 samples, 0.45%)</title><rect x="25.9317%" y="517" width="0.4450%" height="15" fill="rgb(233,42,35)" fg:x="13228" fg:w="227"/><text x="26.1817%" y="527.50"></text></g><g><title>core::ptr::read (71 samples, 0.14%)</title><rect x="26.3767%" y="485" width="0.1392%" height="15" fill="rgb(231,13,6)" fg:x="13455" fg:w="71"/><text x="26.6267%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (77 samples, 0.15%)</title><rect x="26.3767%" y="517" width="0.1509%" height="15" fill="rgb(207,181,40)" fg:x="13455" fg:w="77"/><text x="26.6267%" y="527.50"></text></g><g><title>core::mem::replace (77 samples, 0.15%)</title><rect x="26.3767%" y="501" width="0.1509%" height="15" fill="rgb(254,173,49)" fg:x="13455" fg:w="77"/><text x="26.6267%" y="511.50"></text></g><g><title>core::ptr::write (6 samples, 0.01%)</title><rect x="26.5158%" y="485" width="0.0118%" height="15" fill="rgb(221,1,38)" fg:x="13526" fg:w="6"/><text x="26.7658%" y="495.50"></text></g><g><title>montecarlo::state::State::delete (720 samples, 1.41%)</title><rect x="25.2357%" y="533" width="1.4115%" height="15" fill="rgb(206,124,46)" fg:x="12873" fg:w="720"/><text x="25.4857%" y="543.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (61 samples, 0.12%)</title><rect x="26.5276%" y="517" width="0.1196%" height="15" fill="rgb(249,21,11)" fg:x="13532" fg:w="61"/><text x="26.7776%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (60 samples, 0.12%)</title><rect x="29.2780%" y="517" width="0.1176%" height="15" fill="rgb(222,201,40)" fg:x="14935" fg:w="60"/><text x="29.5280%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (60 samples, 0.12%)</title><rect x="29.2780%" y="501" width="0.1176%" height="15" fill="rgb(235,61,29)" fg:x="14935" fg:w="60"/><text x="29.5280%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (60 samples, 0.12%)</title><rect x="29.2780%" y="485" width="0.1176%" height="15" fill="rgb(219,207,3)" fg:x="14935" fg:w="60"/><text x="29.5280%" y="495.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="517" width="0.0157%" height="15" fill="rgb(222,56,46)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="527.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="501" width="0.0157%" height="15" fill="rgb(239,76,54)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="511.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="485" width="0.0157%" height="15" fill="rgb(231,124,27)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="495.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="469" width="0.0157%" height="15" fill="rgb(249,195,6)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="479.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="453" width="0.0157%" height="15" fill="rgb(237,174,47)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="463.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="437" width="0.0157%" height="15" fill="rgb(206,201,31)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="447.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="421" width="0.0157%" height="15" fill="rgb(231,57,52)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="431.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="405" width="0.0157%" height="15" fill="rgb(248,177,22)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="415.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="389" width="0.0157%" height="15" fill="rgb(215,211,37)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="399.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="373" width="0.0157%" height="15" fill="rgb(241,128,51)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="383.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="29.3956%" y="357" width="0.0157%" height="15" fill="rgb(227,165,31)" fg:x="14995" fg:w="8"/><text x="29.6456%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (487 samples, 0.95%)</title><rect x="29.4113%" y="517" width="0.9547%" height="15" fill="rgb(228,167,24)" fg:x="15003" fg:w="487"/><text x="29.6613%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (34 samples, 0.07%)</title><rect x="30.3660%" y="517" width="0.0667%" height="15" fill="rgb(228,143,12)" fg:x="15490" fg:w="34"/><text x="30.6160%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (34 samples, 0.07%)</title><rect x="30.3660%" y="501" width="0.0667%" height="15" fill="rgb(249,149,8)" fg:x="15490" fg:w="34"/><text x="30.6160%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (108 samples, 0.21%)</title><rect x="30.4327%" y="517" width="0.2117%" height="15" fill="rgb(243,35,44)" fg:x="15524" fg:w="108"/><text x="30.6827%" y="527.50"></text></g><g><title>montecarlo::state::State::diagonal_update (236 samples, 0.46%)</title><rect x="30.6444%" y="517" width="0.4626%" height="15" fill="rgb(246,89,9)" fg:x="15632" fg:w="236"/><text x="30.8944%" y="527.50"></text></g><g><title>[unknown] (36 samples, 0.07%)</title><rect x="71.0984%" y="501" width="0.0706%" height="15" fill="rgb(233,213,13)" fg:x="36268" fg:w="36"/><text x="71.3484%" y="511.50"></text></g><g><title>[unknown] (35 samples, 0.07%)</title><rect x="71.1004%" y="485" width="0.0686%" height="15" fill="rgb(233,141,41)" fg:x="36269" fg:w="35"/><text x="71.3504%" y="495.50"></text></g><g><title>[unknown] (35 samples, 0.07%)</title><rect x="71.1004%" y="469" width="0.0686%" height="15" fill="rgb(239,167,4)" fg:x="36269" fg:w="35"/><text x="71.3504%" y="479.50"></text></g><g><title>[unknown] (35 samples, 0.07%)</title><rect x="71.1004%" y="453" width="0.0686%" height="15" fill="rgb(209,217,16)" fg:x="36269" fg:w="35"/><text x="71.3504%" y="463.50"></text></g><g><title>[unknown] (34 samples, 0.07%)</title><rect x="71.1023%" y="437" width="0.0667%" height="15" fill="rgb(219,88,35)" fg:x="36270" fg:w="34"/><text x="71.3523%" y="447.50"></text></g><g><title>[unknown] (29 samples, 0.06%)</title><rect x="71.1121%" y="421" width="0.0569%" height="15" fill="rgb(220,193,23)" fg:x="36275" fg:w="29"/><text x="71.3621%" y="431.50"></text></g><g><title>[unknown] (20 samples, 0.04%)</title><rect x="71.1298%" y="405" width="0.0392%" height="15" fill="rgb(230,90,52)" fg:x="36284" fg:w="20"/><text x="71.3798%" y="415.50"></text></g><g><title>[unknown] (19 samples, 0.04%)</title><rect x="71.1317%" y="389" width="0.0372%" height="15" fill="rgb(252,106,19)" fg:x="36285" fg:w="19"/><text x="71.3817%" y="399.50"></text></g><g><title>[unknown] (18 samples, 0.04%)</title><rect x="71.1337%" y="373" width="0.0353%" height="15" fill="rgb(206,74,20)" fg:x="36286" fg:w="18"/><text x="71.3837%" y="383.50"></text></g><g><title>[unknown] (18 samples, 0.04%)</title><rect x="71.1337%" y="357" width="0.0353%" height="15" fill="rgb(230,138,44)" fg:x="36286" fg:w="18"/><text x="71.3837%" y="367.50"></text></g><g><title>[unknown] (16 samples, 0.03%)</title><rect x="71.1376%" y="341" width="0.0314%" height="15" fill="rgb(235,182,43)" fg:x="36288" fg:w="16"/><text x="71.3876%" y="351.50"></text></g><g><title>[unknown] (9 samples, 0.02%)</title><rect x="71.1513%" y="325" width="0.0176%" height="15" fill="rgb(242,16,51)" fg:x="36295" fg:w="9"/><text x="71.4013%" y="335.50"></text></g><g><title>montecarlo::state::State::insert_diag (23,976 samples, 47.00%)</title><rect x="26.6550%" y="533" width="47.0016%" height="15" fill="rgb(248,9,4)" fg:x="13597" fg:w="23976"/><text x="26.9050%" y="543.50">montecarlo::state::State::insert_diag</text></g><g><title>montecarlo::state::State::trace (21,705 samples, 42.55%)</title><rect x="31.1070%" y="517" width="42.5496%" height="15" fill="rgb(210,31,22)" fg:x="15868" fg:w="21705"/><text x="31.3570%" y="527.50">montecarlo::state::State::trace</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,269 samples, 2.49%)</title><rect x="71.1690%" y="501" width="2.4877%" height="15" fill="rgb(239,54,39)" fg:x="36304" fg:w="1269"/><text x="71.4190%" y="511.50">co..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,269 samples, 2.49%)</title><rect x="71.1690%" y="485" width="2.4877%" height="15" fill="rgb(230,99,41)" fg:x="36304" fg:w="1269"/><text x="71.4190%" y="495.50">&lt;c..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,269 samples, 2.49%)</title><rect x="71.1690%" y="469" width="2.4877%" height="15" fill="rgb(253,106,12)" fg:x="36304" fg:w="1269"/><text x="71.4190%" y="479.50">co..</text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="73.6449%" y="453" width="0.0118%" height="15" fill="rgb(213,46,41)" fg:x="37567" fg:w="6"/><text x="73.8949%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="73.6449%" y="437" width="0.0118%" height="15" fill="rgb(215,133,35)" fg:x="37567" fg:w="6"/><text x="73.8949%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="73.6449%" y="421" width="0.0118%" height="15" fill="rgb(213,28,5)" fg:x="37567" fg:w="6"/><text x="73.8949%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="73.6449%" y="405" width="0.0118%" height="15" fill="rgb(215,77,49)" fg:x="37567" fg:w="6"/><text x="73.8949%" y="415.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="73.6449%" y="389" width="0.0118%" height="15" fill="rgb(248,100,22)" fg:x="37567" fg:w="6"/><text x="73.8949%" y="399.50"></text></g><g><title>&lt;f64 as rand::distributions::utils::FloatSIMDUtils&gt;::cast_from_int (164 samples, 0.32%)</title><rect x="73.6978%" y="501" width="0.3215%" height="15" fill="rgb(208,67,9)" fg:x="37594" fg:w="164"/><text x="73.9478%" y="511.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (163 samples, 0.32%)</title><rect x="74.4604%" y="421" width="0.3195%" height="15" fill="rgb(219,133,21)" fg:x="37983" fg:w="163"/><text x="74.7104%" y="431.50"></text></g><g><title>rand_chacha::guts::refill_wide (12 samples, 0.02%)</title><rect x="74.8035%" y="357" width="0.0235%" height="15" fill="rgb(246,46,29)" fg:x="38158" fg:w="12"/><text x="75.0535%" y="367.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (7 samples, 0.01%)</title><rect x="74.8270%" y="325" width="0.0137%" height="15" fill="rgb(246,185,52)" fg:x="38170" fg:w="7"/><text x="75.0770%" y="335.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as core::ops::arith::Add&gt;::add (11 samples, 0.02%)</title><rect x="74.8427%" y="309" width="0.0216%" height="15" fill="rgb(252,136,11)" fg:x="38178" fg:w="11"/><text x="75.0927%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (11 samples, 0.02%)</title><rect x="74.8427%" y="293" width="0.0216%" height="15" fill="rgb(219,138,53)" fg:x="38178" fg:w="11"/><text x="75.0927%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as ppv_lite86::types::StoreBytes&gt;::write_le (24 samples, 0.05%)</title><rect x="74.8642%" y="309" width="0.0470%" height="15" fill="rgb(211,51,23)" fg:x="38189" fg:w="24"/><text x="75.1142%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_storeu_si128 (24 samples, 0.05%)</title><rect x="74.8642%" y="293" width="0.0470%" height="15" fill="rgb(247,221,28)" fg:x="38189" fg:w="24"/><text x="75.1142%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (24 samples, 0.05%)</title><rect x="74.8642%" y="277" width="0.0470%" height="15" fill="rgb(251,222,45)" fg:x="38189" fg:w="24"/><text x="75.1142%" y="287.50"></text></g><g><title>core::ptr::write_unaligned (24 samples, 0.05%)</title><rect x="74.8642%" y="261" width="0.0470%" height="15" fill="rgb(217,162,53)" fg:x="38189" fg:w="24"/><text x="75.1142%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (24 samples, 0.05%)</title><rect x="74.8642%" y="245" width="0.0470%" height="15" fill="rgb(229,93,14)" fg:x="38189" fg:w="24"/><text x="75.1142%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (47 samples, 0.09%)</title><rect x="74.9113%" y="309" width="0.0921%" height="15" fill="rgb(209,67,49)" fg:x="38213" fg:w="47"/><text x="75.1613%" y="319.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (47 samples, 0.09%)</title><rect x="74.9113%" y="293" width="0.0921%" height="15" fill="rgb(213,87,29)" fg:x="38213" fg:w="47"/><text x="75.1613%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (16 samples, 0.03%)</title><rect x="75.0034%" y="309" width="0.0314%" height="15" fill="rgb(205,151,52)" fg:x="38260" fg:w="16"/><text x="75.2534%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (16 samples, 0.03%)</title><rect x="75.0034%" y="293" width="0.0314%" height="15" fill="rgb(253,215,39)" fg:x="38260" fg:w="16"/><text x="75.2534%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10 samples, 0.02%)</title><rect x="75.0348%" y="309" width="0.0196%" height="15" fill="rgb(221,220,41)" fg:x="38276" fg:w="10"/><text x="75.2848%" y="319.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::_&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::to_lanes (9 samples, 0.02%)</title><rect x="75.0603%" y="309" width="0.0176%" height="15" fill="rgb(218,133,21)" fg:x="38289" fg:w="9"/><text x="75.3103%" y="319.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::to_lanes (9 samples, 0.02%)</title><rect x="75.0603%" y="293" width="0.0176%" height="15" fill="rgb(221,193,43)" fg:x="38289" fg:w="9"/><text x="75.3103%" y="303.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_extracti128_si256 (9 samples, 0.02%)</title><rect x="75.0603%" y="277" width="0.0176%" height="15" fill="rgb(240,128,52)" fg:x="38289" fg:w="9"/><text x="75.3103%" y="287.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (13 samples, 0.03%)</title><rect x="75.0779%" y="293" width="0.0255%" height="15" fill="rgb(253,114,12)" fg:x="38298" fg:w="13"/><text x="75.3279%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (13 samples, 0.03%)</title><rect x="75.0779%" y="277" width="0.0255%" height="15" fill="rgb(215,223,47)" fg:x="38298" fg:w="13"/><text x="75.3279%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (13 samples, 0.03%)</title><rect x="75.0779%" y="261" width="0.0255%" height="15" fill="rgb(248,225,23)" fg:x="38298" fg:w="13"/><text x="75.3279%" y="271.50"></text></g><g><title>rand_chacha::guts::diagonalize (38 samples, 0.07%)</title><rect x="75.0779%" y="309" width="0.0745%" height="15" fill="rgb(250,108,0)" fg:x="38298" fg:w="38"/><text x="75.3279%" y="319.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (25 samples, 0.05%)</title><rect x="75.1034%" y="293" width="0.0490%" height="15" fill="rgb(228,208,7)" fg:x="38311" fg:w="25"/><text x="75.3534%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (25 samples, 0.05%)</title><rect x="75.1034%" y="277" width="0.0490%" height="15" fill="rgb(244,45,10)" fg:x="38311" fg:w="25"/><text x="75.3534%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (25 samples, 0.05%)</title><rect x="75.1034%" y="261" width="0.0490%" height="15" fill="rgb(207,125,25)" fg:x="38311" fg:w="25"/><text x="75.3534%" y="271.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (222 samples, 0.44%)</title><rect x="75.1524%" y="245" width="0.4352%" height="15" fill="rgb(210,195,18)" fg:x="38336" fg:w="222"/><text x="75.4024%" y="255.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (223 samples, 0.44%)</title><rect x="75.1524%" y="293" width="0.4372%" height="15" fill="rgb(249,80,12)" fg:x="38336" fg:w="223"/><text x="75.4024%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (223 samples, 0.44%)</title><rect x="75.1524%" y="277" width="0.4372%" height="15" fill="rgb(221,65,9)" fg:x="38336" fg:w="223"/><text x="75.4024%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (223 samples, 0.44%)</title><rect x="75.1524%" y="261" width="0.4372%" height="15" fill="rgb(235,49,36)" fg:x="38336" fg:w="223"/><text x="75.4024%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (119 samples, 0.23%)</title><rect x="75.5896%" y="293" width="0.2333%" height="15" fill="rgb(225,32,20)" fg:x="38559" fg:w="119"/><text x="75.8396%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (119 samples, 0.23%)</title><rect x="75.5896%" y="277" width="0.2333%" height="15" fill="rgb(215,141,46)" fg:x="38559" fg:w="119"/><text x="75.8396%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (119 samples, 0.23%)</title><rect x="75.5896%" y="261" width="0.2333%" height="15" fill="rgb(250,160,47)" fg:x="38559" fg:w="119"/><text x="75.8396%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (179 samples, 0.35%)</title><rect x="75.8229%" y="293" width="0.3509%" height="15" fill="rgb(216,222,40)" fg:x="38678" fg:w="179"/><text x="76.0729%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (179 samples, 0.35%)</title><rect x="75.8229%" y="277" width="0.3509%" height="15" fill="rgb(234,217,39)" fg:x="38678" fg:w="179"/><text x="76.0729%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (179 samples, 0.35%)</title><rect x="75.8229%" y="261" width="0.3509%" height="15" fill="rgb(207,178,40)" fg:x="38678" fg:w="179"/><text x="76.0729%" y="271.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (181 samples, 0.35%)</title><rect x="76.1738%" y="261" width="0.3548%" height="15" fill="rgb(221,136,13)" fg:x="38857" fg:w="181"/><text x="76.4238%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (196 samples, 0.38%)</title><rect x="76.1738%" y="293" width="0.3842%" height="15" fill="rgb(249,199,10)" fg:x="38857" fg:w="196"/><text x="76.4238%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (196 samples, 0.38%)</title><rect x="76.1738%" y="277" width="0.3842%" height="15" fill="rgb(249,222,13)" fg:x="38857" fg:w="196"/><text x="76.4238%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (15 samples, 0.03%)</title><rect x="76.5286%" y="261" width="0.0294%" height="15" fill="rgb(244,185,38)" fg:x="39038" fg:w="15"/><text x="76.7786%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (122 samples, 0.24%)</title><rect x="76.5580%" y="293" width="0.2392%" height="15" fill="rgb(236,202,9)" fg:x="39053" fg:w="122"/><text x="76.8080%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (122 samples, 0.24%)</title><rect x="76.5580%" y="277" width="0.2392%" height="15" fill="rgb(250,229,37)" fg:x="39053" fg:w="122"/><text x="76.8080%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (122 samples, 0.24%)</title><rect x="76.5580%" y="261" width="0.2392%" height="15" fill="rgb(206,174,23)" fg:x="39053" fg:w="122"/><text x="76.8080%" y="271.50"></text></g><g><title>rand_chacha::guts::round (989 samples, 1.94%)</title><rect x="75.1524%" y="309" width="1.9388%" height="15" fill="rgb(211,33,43)" fg:x="38336" fg:w="989"/><text x="75.4024%" y="319.50">r..</text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (150 samples, 0.29%)</title><rect x="76.7972%" y="293" width="0.2941%" height="15" fill="rgb(245,58,50)" fg:x="39175" fg:w="150"/><text x="77.0472%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (150 samples, 0.29%)</title><rect x="76.7972%" y="277" width="0.2941%" height="15" fill="rgb(244,68,36)" fg:x="39175" fg:w="150"/><text x="77.0472%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (150 samples, 0.29%)</title><rect x="76.7972%" y="261" width="0.2941%" height="15" fill="rgb(232,229,15)" fg:x="39175" fg:w="150"/><text x="77.0472%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (24 samples, 0.05%)</title><rect x="77.0912%" y="293" width="0.0470%" height="15" fill="rgb(254,30,23)" fg:x="39325" fg:w="24"/><text x="77.3412%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (24 samples, 0.05%)</title><rect x="77.0912%" y="277" width="0.0470%" height="15" fill="rgb(235,160,14)" fg:x="39325" fg:w="24"/><text x="77.3412%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (24 samples, 0.05%)</title><rect x="77.0912%" y="261" width="0.0470%" height="15" fill="rgb(212,155,44)" fg:x="39325" fg:w="24"/><text x="77.3412%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (18 samples, 0.04%)</title><rect x="77.1383%" y="293" width="0.0353%" height="15" fill="rgb(226,2,50)" fg:x="39349" fg:w="18"/><text x="77.3883%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (18 samples, 0.04%)</title><rect x="77.1383%" y="277" width="0.0353%" height="15" fill="rgb(234,177,6)" fg:x="39349" fg:w="18"/><text x="77.3883%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (18 samples, 0.04%)</title><rect x="77.1383%" y="261" width="0.0353%" height="15" fill="rgb(217,24,9)" fg:x="39349" fg:w="18"/><text x="77.3883%" y="271.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (1,213 samples, 2.38%)</title><rect x="74.8270%" y="357" width="2.3779%" height="15" fill="rgb(220,13,46)" fg:x="38170" fg:w="1213"/><text x="75.0770%" y="367.50">ra..</text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (1,213 samples, 2.38%)</title><rect x="74.8270%" y="341" width="2.3779%" height="15" fill="rgb(239,221,27)" fg:x="38170" fg:w="1213"/><text x="75.0770%" y="351.50">ra..</text></g><g><title>rand_chacha::guts::refill_wide_impl (1,206 samples, 2.36%)</title><rect x="74.8407%" y="325" width="2.3642%" height="15" fill="rgb(222,198,25)" fg:x="38177" fg:w="1206"/><text x="75.0907%" y="335.50">ra..</text></g><g><title>rand_chacha::guts::undiagonalize (58 samples, 0.11%)</title><rect x="77.0912%" y="309" width="0.1137%" height="15" fill="rgb(211,99,13)" fg:x="39325" fg:w="58"/><text x="77.3412%" y="319.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (16 samples, 0.03%)</title><rect x="77.1736%" y="293" width="0.0314%" height="15" fill="rgb(232,111,31)" fg:x="39367" fg:w="16"/><text x="77.4236%" y="303.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (16 samples, 0.03%)</title><rect x="77.1736%" y="277" width="0.0314%" height="15" fill="rgb(245,82,37)" fg:x="39367" fg:w="16"/><text x="77.4236%" y="287.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (16 samples, 0.03%)</title><rect x="77.1736%" y="261" width="0.0314%" height="15" fill="rgb(227,149,46)" fg:x="39367" fg:w="16"/><text x="77.4236%" y="271.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (1,236 samples, 2.42%)</title><rect x="74.7878%" y="389" width="2.4230%" height="15" fill="rgb(218,36,50)" fg:x="38150" fg:w="1236"/><text x="75.0378%" y="399.50">&lt;r..</text></g><g><title>rand_chacha::guts::ChaCha::refill4 (1,236 samples, 2.42%)</title><rect x="74.7878%" y="373" width="2.4230%" height="15" fill="rgb(226,80,48)" fg:x="38150" fg:w="1236"/><text x="75.0378%" y="383.50">ra..</text></g><g><title>&lt;&amp;mut R as rand_core::RngCore&gt;::try_fill_bytes (9 samples, 0.02%)</title><rect x="77.2128%" y="341" width="0.0176%" height="15" fill="rgb(238,224,15)" fg:x="39387" fg:w="9"/><text x="77.4628%" y="351.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (9 samples, 0.02%)</title><rect x="77.2128%" y="325" width="0.0176%" height="15" fill="rgb(241,136,10)" fg:x="39387" fg:w="9"/><text x="77.4628%" y="335.50"></text></g><g><title>getrandom::getrandom (9 samples, 0.02%)</title><rect x="77.2128%" y="309" width="0.0176%" height="15" fill="rgb(208,32,45)" fg:x="39387" fg:w="9"/><text x="77.4628%" y="319.50"></text></g><g><title>getrandom::getrandom_uninit (9 samples, 0.02%)</title><rect x="77.2128%" y="293" width="0.0176%" height="15" fill="rgb(207,135,9)" fg:x="39387" fg:w="9"/><text x="77.4628%" y="303.50"></text></g><g><title>getrandom::imp::getrandom_inner (9 samples, 0.02%)</title><rect x="77.2128%" y="277" width="0.0176%" height="15" fill="rgb(206,86,44)" fg:x="39387" fg:w="9"/><text x="77.4628%" y="287.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (9 samples, 0.02%)</title><rect x="77.2128%" y="261" width="0.0176%" height="15" fill="rgb(245,177,15)" fg:x="39387" fg:w="9"/><text x="77.4628%" y="271.50"></text></g><g><title>getrandom::imp::getrandom_inner::_{{closure}} (9 samples, 0.02%)</title><rect x="77.2128%" y="245" width="0.0176%" height="15" fill="rgb(206,64,50)" fg:x="39387" fg:w="9"/><text x="77.4628%" y="255.50"></text></g><g><title>getrandom::imp::getrandom (9 samples, 0.02%)</title><rect x="77.2128%" y="229" width="0.0176%" height="15" fill="rgb(234,36,40)" fg:x="39387" fg:w="9"/><text x="77.4628%" y="239.50"></text></g><g><title>syscall (9 samples, 0.02%)</title><rect x="77.2128%" y="213" width="0.0176%" height="15" fill="rgb(213,64,8)" fg:x="39387" fg:w="9"/><text x="77.4628%" y="223.50"></text></g><g><title>[unknown] (8 samples, 0.02%)</title><rect x="77.2147%" y="197" width="0.0157%" height="15" fill="rgb(210,75,36)" fg:x="39388" fg:w="8"/><text x="77.4647%" y="207.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="77.2186%" y="181" width="0.0118%" height="15" fill="rgb(229,88,21)" fg:x="39390" fg:w="6"/><text x="77.4686%" y="191.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="77.2186%" y="165" width="0.0118%" height="15" fill="rgb(252,204,47)" fg:x="39390" fg:w="6"/><text x="77.4686%" y="175.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="77.2186%" y="149" width="0.0118%" height="15" fill="rgb(208,77,27)" fg:x="39390" fg:w="6"/><text x="77.4686%" y="159.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="77.2186%" y="133" width="0.0118%" height="15" fill="rgb(221,76,26)" fg:x="39390" fg:w="6"/><text x="77.4686%" y="143.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="77.2186%" y="117" width="0.0118%" height="15" fill="rgb(225,139,18)" fg:x="39390" fg:w="6"/><text x="77.4686%" y="127.50"></text></g><g><title>[unknown] (6 samples, 0.01%)</title><rect x="77.2186%" y="101" width="0.0118%" height="15" fill="rgb(230,137,11)" fg:x="39390" fg:w="6"/><text x="77.4686%" y="111.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (11 samples, 0.02%)</title><rect x="77.2108%" y="389" width="0.0216%" height="15" fill="rgb(212,28,1)" fg:x="39386" fg:w="11"/><text x="77.4608%" y="399.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (11 samples, 0.02%)</title><rect x="77.2108%" y="373" width="0.0216%" height="15" fill="rgb(248,164,17)" fg:x="39386" fg:w="11"/><text x="77.4608%" y="383.50"></text></g><g><title>rand_core::SeedableRng::from_rng (11 samples, 0.02%)</title><rect x="77.2108%" y="357" width="0.0216%" height="15" fill="rgb(222,171,42)" fg:x="39386" fg:w="11"/><text x="77.4608%" y="367.50"></text></g><g><title>montecarlo::state::State::diagonal_update (38,445 samples, 75.37%)</title><rect x="1.8800%" y="549" width="75.3661%" height="15" fill="rgb(243,84,45)" fg:x="959" fg:w="38445"/><text x="2.1300%" y="559.50">montecarlo::state::State::diagonal_update</text></g><g><title>rand::rng::Rng::gen (1,831 samples, 3.59%)</title><rect x="73.6567%" y="533" width="3.5894%" height="15" fill="rgb(252,49,23)" fg:x="37573" fg:w="1831"/><text x="73.9067%" y="543.50">rand..</text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (1,831 samples, 3.59%)</title><rect x="73.6567%" y="517" width="3.5894%" height="15" fill="rgb(215,19,7)" fg:x="37573" fg:w="1831"/><text x="73.9067%" y="527.50">rand..</text></g><g><title>rand::rng::Rng::gen (1,643 samples, 3.22%)</title><rect x="74.0252%" y="501" width="3.2209%" height="15" fill="rgb(238,81,41)" fg:x="37761" fg:w="1643"/><text x="74.2752%" y="511.50">ran..</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (1,643 samples, 3.22%)</title><rect x="74.0252%" y="485" width="3.2209%" height="15" fill="rgb(210,199,37)" fg:x="37761" fg:w="1643"/><text x="74.2752%" y="495.50">ran..</text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (1,643 samples, 3.22%)</title><rect x="74.0252%" y="469" width="3.2209%" height="15" fill="rgb(244,192,49)" fg:x="37761" fg:w="1643"/><text x="74.2752%" y="479.50">&lt;ra..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (1,643 samples, 3.22%)</title><rect x="74.0252%" y="453" width="3.2209%" height="15" fill="rgb(226,211,11)" fg:x="37761" fg:w="1643"/><text x="74.2752%" y="463.50">&lt;ra..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (1,643 samples, 3.22%)</title><rect x="74.0252%" y="437" width="3.2209%" height="15" fill="rgb(236,162,54)" fg:x="37761" fg:w="1643"/><text x="74.2752%" y="447.50">&lt;ra..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1,256 samples, 2.46%)</title><rect x="74.7839%" y="421" width="2.4622%" height="15" fill="rgb(220,229,9)" fg:x="38148" fg:w="1256"/><text x="75.0339%" y="431.50">ra..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1,256 samples, 2.46%)</title><rect x="74.7839%" y="405" width="2.4622%" height="15" fill="rgb(250,87,22)" fg:x="38148" fg:w="1256"/><text x="75.0339%" y="415.50">&lt;r..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (586 samples, 1.15%)</title><rect x="78.1890%" y="517" width="1.1488%" height="15" fill="rgb(239,43,17)" fg:x="39885" fg:w="586"/><text x="78.4390%" y="527.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (584 samples, 1.14%)</title><rect x="78.1929%" y="501" width="1.1449%" height="15" fill="rgb(231,177,25)" fg:x="39887" fg:w="584"/><text x="78.4429%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (634 samples, 1.24%)</title><rect x="78.0969%" y="533" width="1.2429%" height="15" fill="rgb(219,179,1)" fg:x="39838" fg:w="634"/><text x="78.3469%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (14 samples, 0.03%)</title><rect x="80.8316%" y="485" width="0.0274%" height="15" fill="rgb(238,219,53)" fg:x="41233" fg:w="14"/><text x="81.0816%" y="495.50"></text></g><g><title>__GI___libc_malloc (17 samples, 0.03%)</title><rect x="80.8688%" y="469" width="0.0333%" height="15" fill="rgb(232,167,36)" fg:x="41252" fg:w="17"/><text x="81.1188%" y="479.50"></text></g><g><title>tcache_get (11 samples, 0.02%)</title><rect x="80.8806%" y="453" width="0.0216%" height="15" fill="rgb(244,19,51)" fg:x="41258" fg:w="11"/><text x="81.1306%" y="463.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17he305fee1708862a4E.llvm.3393591614693390886 (24 samples, 0.05%)</title><rect x="80.8590%" y="485" width="0.0470%" height="15" fill="rgb(224,6,22)" fg:x="41247" fg:w="24"/><text x="81.1090%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (11 samples, 0.02%)</title><rect x="80.9061%" y="485" width="0.0216%" height="15" fill="rgb(224,145,5)" fg:x="41271" fg:w="11"/><text x="81.1561%" y="495.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.01%)</title><rect x="81.2393%" y="389" width="0.0118%" height="15" fill="rgb(234,130,49)" fg:x="41441" fg:w="6"/><text x="81.4893%" y="399.50"></text></g><g><title>_int_free (93 samples, 0.18%)</title><rect x="81.2511%" y="389" width="0.1823%" height="15" fill="rgb(254,6,2)" fg:x="41447" fg:w="93"/><text x="81.5011%" y="399.50"></text></g><g><title>_int_malloc (97 samples, 0.19%)</title><rect x="81.4334%" y="389" width="0.1902%" height="15" fill="rgb(208,96,46)" fg:x="41540" fg:w="97"/><text x="81.6834%" y="399.50"></text></g><g><title>unlink_chunk (13 samples, 0.03%)</title><rect x="81.5981%" y="373" width="0.0255%" height="15" fill="rgb(239,3,39)" fg:x="41624" fg:w="13"/><text x="81.8481%" y="383.50"></text></g><g><title>_int_realloc (280 samples, 0.55%)</title><rect x="81.0904%" y="405" width="0.5489%" height="15" fill="rgb(233,210,1)" fg:x="41365" fg:w="280"/><text x="81.3404%" y="415.50"></text></g><g><title>unlink_chunk (8 samples, 0.02%)</title><rect x="81.6236%" y="389" width="0.0157%" height="15" fill="rgb(244,137,37)" fg:x="41637" fg:w="8"/><text x="81.8736%" y="399.50"></text></g><g><title>arena_for_chunk (8 samples, 0.02%)</title><rect x="81.6393%" y="405" width="0.0157%" height="15" fill="rgb(240,136,2)" fg:x="41645" fg:w="8"/><text x="81.8893%" y="415.50"></text></g><g><title>__GI___libc_realloc (371 samples, 0.73%)</title><rect x="80.9629%" y="421" width="0.7273%" height="15" fill="rgb(239,18,37)" fg:x="41300" fg:w="371"/><text x="81.2129%" y="431.50"></text></g><g><title>checked_request2size (18 samples, 0.04%)</title><rect x="81.6549%" y="405" width="0.0353%" height="15" fill="rgb(218,185,22)" fg:x="41653" fg:w="18"/><text x="81.9049%" y="415.50"></text></g><g><title>__rdl_realloc (15 samples, 0.03%)</title><rect x="81.6902%" y="421" width="0.0294%" height="15" fill="rgb(225,218,4)" fg:x="41671" fg:w="15"/><text x="81.9402%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (392 samples, 0.77%)</title><rect x="80.9629%" y="469" width="0.7685%" height="15" fill="rgb(230,182,32)" fg:x="41300" fg:w="392"/><text x="81.2129%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (392 samples, 0.77%)</title><rect x="80.9629%" y="453" width="0.7685%" height="15" fill="rgb(242,56,43)" fg:x="41300" fg:w="392"/><text x="81.2129%" y="463.50"></text></g><g><title>alloc::alloc::realloc (392 samples, 0.77%)</title><rect x="80.9629%" y="437" width="0.7685%" height="15" fill="rgb(233,99,24)" fg:x="41300" fg:w="392"/><text x="81.2129%" y="447.50"></text></g><g><title>__rust_realloc (6 samples, 0.01%)</title><rect x="81.7196%" y="421" width="0.0118%" height="15" fill="rgb(234,209,42)" fg:x="41686" fg:w="6"/><text x="81.9696%" y="431.50"></text></g><g><title>_ZN5alloc7raw_vec11finish_grow17he305fee1708862a4E.llvm.3393591614693390886 (7 samples, 0.01%)</title><rect x="81.7314%" y="469" width="0.0137%" height="15" fill="rgb(227,7,12)" fg:x="41692" fg:w="7"/><text x="81.9814%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (422 samples, 0.83%)</title><rect x="80.9296%" y="485" width="0.8273%" height="15" fill="rgb(245,203,43)" fg:x="41283" fg:w="422"/><text x="81.1796%" y="495.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6 samples, 0.01%)</title><rect x="81.7451%" y="469" width="0.0118%" height="15" fill="rgb(238,205,33)" fg:x="41699" fg:w="6"/><text x="81.9951%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array (9 samples, 0.02%)</title><rect x="81.7569%" y="485" width="0.0176%" height="15" fill="rgb(231,56,7)" fg:x="41705" fg:w="9"/><text x="82.0069%" y="495.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (9 samples, 0.02%)</title><rect x="81.7569%" y="469" width="0.0176%" height="15" fill="rgb(244,186,29)" fg:x="41705" fg:w="9"/><text x="82.0069%" y="479.50"></text></g><g><title>core::cmp::max (31 samples, 0.06%)</title><rect x="81.7745%" y="485" width="0.0608%" height="15" fill="rgb(234,111,31)" fg:x="41714" fg:w="31"/><text x="82.0245%" y="495.50"></text></g><g><title>core::cmp::Ord::max (31 samples, 0.06%)</title><rect x="81.7745%" y="469" width="0.0608%" height="15" fill="rgb(241,149,10)" fg:x="41714" fg:w="31"/><text x="82.0245%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (31 samples, 0.06%)</title><rect x="81.7745%" y="453" width="0.0608%" height="15" fill="rgb(249,206,44)" fg:x="41714" fg:w="31"/><text x="82.0245%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (521 samples, 1.02%)</title><rect x="80.8198%" y="501" width="1.0213%" height="15" fill="rgb(251,153,30)" fg:x="41227" fg:w="521"/><text x="81.0698%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (524 samples, 1.03%)</title><rect x="80.8198%" y="517" width="1.0272%" height="15" fill="rgb(239,152,38)" fg:x="41227" fg:w="524"/><text x="81.0698%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (33 samples, 0.06%)</title><rect x="81.8471%" y="517" width="0.0647%" height="15" fill="rgb(249,139,47)" fg:x="41751" fg:w="33"/><text x="82.0971%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (33 samples, 0.06%)</title><rect x="81.8471%" y="501" width="0.0647%" height="15" fill="rgb(244,64,35)" fg:x="41751" fg:w="33"/><text x="82.0971%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1,723 samples, 3.38%)</title><rect x="79.3417%" y="533" width="3.3777%" height="15" fill="rgb(216,46,15)" fg:x="40473" fg:w="1723"/><text x="79.5917%" y="543.50">all..</text></g><g><title>core::ptr::write (412 samples, 0.81%)</title><rect x="81.9117%" y="517" width="0.8077%" height="15" fill="rgb(250,74,19)" fg:x="41784" fg:w="412"/><text x="82.1617%" y="527.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (115 samples, 0.23%)</title><rect x="82.7214%" y="533" width="0.2254%" height="15" fill="rgb(249,42,33)" fg:x="42197" fg:w="115"/><text x="82.9714%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (115 samples, 0.23%)</title><rect x="82.7214%" y="517" width="0.2254%" height="15" fill="rgb(242,149,17)" fg:x="42197" fg:w="115"/><text x="82.9714%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (9 samples, 0.02%)</title><rect x="82.9292%" y="501" width="0.0176%" height="15" fill="rgb(244,29,21)" fg:x="42303" fg:w="9"/><text x="83.1792%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (678 samples, 1.33%)</title><rect x="82.9468%" y="533" width="1.3291%" height="15" fill="rgb(220,130,37)" fg:x="42312" fg:w="678"/><text x="83.1968%" y="543.50"></text></g><g><title>_int_free (34 samples, 0.07%)</title><rect x="84.3230%" y="437" width="0.0667%" height="15" fill="rgb(211,67,2)" fg:x="43014" fg:w="34"/><text x="84.5730%" y="447.50"></text></g><g><title>__GI___libc_free (45 samples, 0.09%)</title><rect x="84.3034%" y="453" width="0.0882%" height="15" fill="rgb(235,68,52)" fg:x="43004" fg:w="45"/><text x="84.5534%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (51 samples, 0.10%)</title><rect x="84.2995%" y="485" width="0.1000%" height="15" fill="rgb(246,142,3)" fg:x="43002" fg:w="51"/><text x="84.5495%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (51 samples, 0.10%)</title><rect x="84.2995%" y="469" width="0.1000%" height="15" fill="rgb(241,25,7)" fg:x="43002" fg:w="51"/><text x="84.5495%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (65 samples, 0.13%)</title><rect x="84.2759%" y="533" width="0.1274%" height="15" fill="rgb(242,119,39)" fg:x="42990" fg:w="65"/><text x="84.5259%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (65 samples, 0.13%)</title><rect x="84.2759%" y="517" width="0.1274%" height="15" fill="rgb(241,98,45)" fg:x="42990" fg:w="65"/><text x="84.5259%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.13%)</title><rect x="84.2759%" y="501" width="0.1274%" height="15" fill="rgb(254,28,30)" fg:x="42990" fg:w="65"/><text x="84.5259%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (210 samples, 0.41%)</title><rect x="85.3385%" y="517" width="0.4117%" height="15" fill="rgb(241,142,54)" fg:x="43532" fg:w="210"/><text x="85.5885%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (210 samples, 0.41%)</title><rect x="85.3385%" y="501" width="0.4117%" height="15" fill="rgb(222,85,15)" fg:x="43532" fg:w="210"/><text x="85.5885%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (210 samples, 0.41%)</title><rect x="85.3385%" y="485" width="0.4117%" height="15" fill="rgb(210,85,47)" fg:x="43532" fg:w="210"/><text x="85.5885%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (37 samples, 0.07%)</title><rect x="85.7501%" y="517" width="0.0725%" height="15" fill="rgb(224,206,25)" fg:x="43742" fg:w="37"/><text x="86.0001%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (37 samples, 0.07%)</title><rect x="85.7501%" y="501" width="0.0725%" height="15" fill="rgb(243,201,19)" fg:x="43742" fg:w="37"/><text x="86.0001%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (37 samples, 0.07%)</title><rect x="85.7501%" y="485" width="0.0725%" height="15" fill="rgb(236,59,4)" fg:x="43742" fg:w="37"/><text x="86.0001%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (706 samples, 1.38%)</title><rect x="85.8246%" y="517" width="1.3840%" height="15" fill="rgb(254,179,45)" fg:x="43780" fg:w="706"/><text x="86.0746%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (269 samples, 0.53%)</title><rect x="87.2086%" y="517" width="0.5273%" height="15" fill="rgb(226,14,10)" fg:x="44486" fg:w="269"/><text x="87.4586%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (169 samples, 0.33%)</title><rect x="87.7360%" y="517" width="0.3313%" height="15" fill="rgb(244,27,41)" fg:x="44755" fg:w="169"/><text x="87.9860%" y="527.50"></text></g><g><title>montecarlo::state::State::directed_loop_update (2,162 samples, 4.24%)</title><rect x="84.4034%" y="533" width="4.2383%" height="15" fill="rgb(235,35,32)" fg:x="43055" fg:w="2162"/><text x="84.6534%" y="543.50">monte..</text></g><g><title>montecarlo::state::OperatorType::flip (293 samples, 0.57%)</title><rect x="88.0673%" y="517" width="0.5744%" height="15" fill="rgb(218,68,31)" fg:x="44924" fg:w="293"/><text x="88.3173%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::is_empty (11 samples, 0.02%)</title><rect x="88.6417%" y="517" width="0.0216%" height="15" fill="rgb(207,120,37)" fg:x="45217" fg:w="11"/><text x="88.8917%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (11 samples, 0.02%)</title><rect x="88.6417%" y="501" width="0.0216%" height="15" fill="rgb(227,98,0)" fg:x="45217" fg:w="11"/><text x="88.8917%" y="511.50"></text></g><g><title>&lt;usize as rand::distributions::utils::WideningMultiply&gt;::wmul (33 samples, 0.06%)</title><rect x="89.0181%" y="469" width="0.0647%" height="15" fill="rgb(207,7,3)" fg:x="45409" fg:w="33"/><text x="89.2681%" y="479.50"></text></g><g><title>&lt;u64 as rand::distributions::utils::WideningMultiply&gt;::wmul (33 samples, 0.06%)</title><rect x="89.0181%" y="453" width="0.0647%" height="15" fill="rgb(206,98,19)" fg:x="45409" fg:w="33"/><text x="89.2681%" y="463.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (41 samples, 0.08%)</title><rect x="89.2376%" y="389" width="0.0804%" height="15" fill="rgb(217,5,26)" fg:x="45521" fg:w="41"/><text x="89.4876%" y="399.50"></text></g><g><title>_ZN4rand3rng3Rng3gen17h8f35c06015872ad2E.llvm.17338363661498812230 (59 samples, 0.12%)</title><rect x="89.3180%" y="389" width="0.1157%" height="15" fill="rgb(235,190,38)" fg:x="45562" fg:w="59"/><text x="89.5680%" y="399.50"></text></g><g><title>rand_chacha::guts::refill_wide (6 samples, 0.01%)</title><rect x="89.4474%" y="325" width="0.0118%" height="15" fill="rgb(247,86,24)" fg:x="45628" fg:w="6"/><text x="89.6974%" y="335.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as ppv_lite86::types::StoreBytes&gt;::write_le (9 samples, 0.02%)</title><rect x="89.4827%" y="277" width="0.0176%" height="15" fill="rgb(205,101,16)" fg:x="45646" fg:w="9"/><text x="89.7327%" y="287.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_storeu_si128 (9 samples, 0.02%)</title><rect x="89.4827%" y="261" width="0.0176%" height="15" fill="rgb(246,168,33)" fg:x="45646" fg:w="9"/><text x="89.7327%" y="271.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (9 samples, 0.02%)</title><rect x="89.4827%" y="245" width="0.0176%" height="15" fill="rgb(231,114,1)" fg:x="45646" fg:w="9"/><text x="89.7327%" y="255.50"></text></g><g><title>core::ptr::write_unaligned (9 samples, 0.02%)</title><rect x="89.4827%" y="229" width="0.0176%" height="15" fill="rgb(207,184,53)" fg:x="45646" fg:w="9"/><text x="89.7327%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.02%)</title><rect x="89.4827%" y="213" width="0.0176%" height="15" fill="rgb(224,95,51)" fg:x="45646" fg:w="9"/><text x="89.7327%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (13 samples, 0.03%)</title><rect x="89.5003%" y="277" width="0.0255%" height="15" fill="rgb(212,188,45)" fg:x="45655" fg:w="13"/><text x="89.7503%" y="287.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (13 samples, 0.03%)</title><rect x="89.5003%" y="261" width="0.0255%" height="15" fill="rgb(223,154,38)" fg:x="45655" fg:w="13"/><text x="89.7503%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.02%)</title><rect x="89.5258%" y="277" width="0.0235%" height="15" fill="rgb(251,22,52)" fg:x="45668" fg:w="12"/><text x="89.7758%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.02%)</title><rect x="89.5258%" y="261" width="0.0235%" height="15" fill="rgb(229,209,22)" fg:x="45668" fg:w="12"/><text x="89.7758%" y="271.50"></text></g><g><title>rand_chacha::guts::diagonalize (13 samples, 0.03%)</title><rect x="89.5630%" y="277" width="0.0255%" height="15" fill="rgb(234,138,34)" fg:x="45687" fg:w="13"/><text x="89.8130%" y="287.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (10 samples, 0.02%)</title><rect x="89.5689%" y="261" width="0.0196%" height="15" fill="rgb(212,95,11)" fg:x="45690" fg:w="10"/><text x="89.8189%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (10 samples, 0.02%)</title><rect x="89.5689%" y="245" width="0.0196%" height="15" fill="rgb(240,179,47)" fg:x="45690" fg:w="10"/><text x="89.8189%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (10 samples, 0.02%)</title><rect x="89.5689%" y="229" width="0.0196%" height="15" fill="rgb(240,163,11)" fg:x="45690" fg:w="10"/><text x="89.8189%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (85 samples, 0.17%)</title><rect x="89.5885%" y="261" width="0.1666%" height="15" fill="rgb(236,37,12)" fg:x="45700" fg:w="85"/><text x="89.8385%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (85 samples, 0.17%)</title><rect x="89.5885%" y="245" width="0.1666%" height="15" fill="rgb(232,164,16)" fg:x="45700" fg:w="85"/><text x="89.8385%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (85 samples, 0.17%)</title><rect x="89.5885%" y="229" width="0.1666%" height="15" fill="rgb(244,205,15)" fg:x="45700" fg:w="85"/><text x="89.8385%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (85 samples, 0.17%)</title><rect x="89.5885%" y="213" width="0.1666%" height="15" fill="rgb(223,117,47)" fg:x="45700" fg:w="85"/><text x="89.8385%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (50 samples, 0.10%)</title><rect x="89.7552%" y="261" width="0.0980%" height="15" fill="rgb(244,107,35)" fg:x="45785" fg:w="50"/><text x="90.0052%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (50 samples, 0.10%)</title><rect x="89.7552%" y="245" width="0.0980%" height="15" fill="rgb(205,140,8)" fg:x="45785" fg:w="50"/><text x="90.0052%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (50 samples, 0.10%)</title><rect x="89.7552%" y="229" width="0.0980%" height="15" fill="rgb(228,84,46)" fg:x="45785" fg:w="50"/><text x="90.0052%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (57 samples, 0.11%)</title><rect x="89.8532%" y="261" width="0.1117%" height="15" fill="rgb(254,188,9)" fg:x="45835" fg:w="57"/><text x="90.1032%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (57 samples, 0.11%)</title><rect x="89.8532%" y="245" width="0.1117%" height="15" fill="rgb(206,112,54)" fg:x="45835" fg:w="57"/><text x="90.1032%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (57 samples, 0.11%)</title><rect x="89.8532%" y="229" width="0.1117%" height="15" fill="rgb(216,84,49)" fg:x="45835" fg:w="57"/><text x="90.1032%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (80 samples, 0.16%)</title><rect x="89.9649%" y="229" width="0.1568%" height="15" fill="rgb(214,194,35)" fg:x="45892" fg:w="80"/><text x="90.2149%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (88 samples, 0.17%)</title><rect x="89.9649%" y="261" width="0.1725%" height="15" fill="rgb(249,28,3)" fg:x="45892" fg:w="88"/><text x="90.2149%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (88 samples, 0.17%)</title><rect x="89.9649%" y="245" width="0.1725%" height="15" fill="rgb(222,56,52)" fg:x="45892" fg:w="88"/><text x="90.2149%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (8 samples, 0.02%)</title><rect x="90.1217%" y="229" width="0.0157%" height="15" fill="rgb(245,217,50)" fg:x="45972" fg:w="8"/><text x="90.3717%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (49 samples, 0.10%)</title><rect x="90.1374%" y="261" width="0.0961%" height="15" fill="rgb(213,201,24)" fg:x="45980" fg:w="49"/><text x="90.3874%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (49 samples, 0.10%)</title><rect x="90.1374%" y="245" width="0.0961%" height="15" fill="rgb(248,116,28)" fg:x="45980" fg:w="49"/><text x="90.3874%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (49 samples, 0.10%)</title><rect x="90.1374%" y="229" width="0.0961%" height="15" fill="rgb(219,72,43)" fg:x="45980" fg:w="49"/><text x="90.3874%" y="239.50"></text></g><g><title>rand_chacha::guts::round (392 samples, 0.77%)</title><rect x="89.5885%" y="277" width="0.7685%" height="15" fill="rgb(209,138,14)" fg:x="45700" fg:w="392"/><text x="89.8385%" y="287.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (63 samples, 0.12%)</title><rect x="90.2335%" y="261" width="0.1235%" height="15" fill="rgb(222,18,33)" fg:x="46029" fg:w="63"/><text x="90.4835%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (63 samples, 0.12%)</title><rect x="90.2335%" y="245" width="0.1235%" height="15" fill="rgb(213,199,7)" fg:x="46029" fg:w="63"/><text x="90.4835%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (63 samples, 0.12%)</title><rect x="90.2335%" y="229" width="0.1235%" height="15" fill="rgb(250,110,10)" fg:x="46029" fg:w="63"/><text x="90.4835%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (20 samples, 0.04%)</title><rect x="90.3570%" y="261" width="0.0392%" height="15" fill="rgb(248,123,6)" fg:x="46092" fg:w="20"/><text x="90.6070%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (20 samples, 0.04%)</title><rect x="90.3570%" y="245" width="0.0392%" height="15" fill="rgb(206,91,31)" fg:x="46092" fg:w="20"/><text x="90.6070%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (20 samples, 0.04%)</title><rect x="90.3570%" y="229" width="0.0392%" height="15" fill="rgb(211,154,13)" fg:x="46092" fg:w="20"/><text x="90.6070%" y="239.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (507 samples, 0.99%)</title><rect x="89.4435%" y="357" width="0.9939%" height="15" fill="rgb(225,148,7)" fg:x="45626" fg:w="507"/><text x="89.6935%" y="367.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (506 samples, 0.99%)</title><rect x="89.4454%" y="341" width="0.9919%" height="15" fill="rgb(220,160,43)" fg:x="45627" fg:w="506"/><text x="89.6954%" y="351.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (499 samples, 0.98%)</title><rect x="89.4591%" y="325" width="0.9782%" height="15" fill="rgb(213,52,39)" fg:x="45634" fg:w="499"/><text x="89.7091%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (499 samples, 0.98%)</title><rect x="89.4591%" y="309" width="0.9782%" height="15" fill="rgb(243,137,7)" fg:x="45634" fg:w="499"/><text x="89.7091%" y="319.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (496 samples, 0.97%)</title><rect x="89.4650%" y="293" width="0.9723%" height="15" fill="rgb(230,79,13)" fg:x="45637" fg:w="496"/><text x="89.7150%" y="303.50"></text></g><g><title>rand_chacha::guts::undiagonalize (41 samples, 0.08%)</title><rect x="90.3570%" y="277" width="0.0804%" height="15" fill="rgb(247,105,23)" fg:x="46092" fg:w="41"/><text x="90.6070%" y="287.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (16 samples, 0.03%)</title><rect x="90.4060%" y="261" width="0.0314%" height="15" fill="rgb(223,179,41)" fg:x="46117" fg:w="16"/><text x="90.6560%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (16 samples, 0.03%)</title><rect x="90.4060%" y="245" width="0.0314%" height="15" fill="rgb(218,9,34)" fg:x="46117" fg:w="16"/><text x="90.6560%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (16 samples, 0.03%)</title><rect x="90.4060%" y="229" width="0.0314%" height="15" fill="rgb(222,106,8)" fg:x="46117" fg:w="16"/><text x="90.6560%" y="239.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (690 samples, 1.35%)</title><rect x="89.0945%" y="421" width="1.3526%" height="15" fill="rgb(211,220,0)" fg:x="45448" fg:w="690"/><text x="89.3445%" y="431.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (690 samples, 1.35%)</title><rect x="89.0945%" y="405" width="1.3526%" height="15" fill="rgb(229,52,16)" fg:x="45448" fg:w="690"/><text x="89.3445%" y="415.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (517 samples, 1.01%)</title><rect x="89.4337%" y="389" width="1.0135%" height="15" fill="rgb(212,155,18)" fg:x="45621" fg:w="517"/><text x="89.6837%" y="399.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (517 samples, 1.01%)</title><rect x="89.4337%" y="373" width="1.0135%" height="15" fill="rgb(242,21,14)" fg:x="45621" fg:w="517"/><text x="89.6837%" y="383.50"></text></g><g><title>montecarlo::state::State::off_diagonal_update (6,739 samples, 13.21%)</title><rect x="77.2461%" y="549" width="13.2109%" height="15" fill="rgb(222,19,48)" fg:x="39404" fg:w="6739"/><text x="77.4961%" y="559.50">montecarlo::state::S..</text></g><g><title>rand::rng::Rng::gen_range (926 samples, 1.82%)</title><rect x="88.6417%" y="533" width="1.8153%" height="15" fill="rgb(232,45,27)" fg:x="45217" fg:w="926"/><text x="88.8917%" y="543.50">r..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (915 samples, 1.79%)</title><rect x="88.6632%" y="517" width="1.7937%" height="15" fill="rgb(249,103,42)" fg:x="45228" fg:w="915"/><text x="88.9132%" y="527.50">&lt;..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (915 samples, 1.79%)</title><rect x="88.6632%" y="501" width="1.7937%" height="15" fill="rgb(246,81,33)" fg:x="45228" fg:w="915"/><text x="88.9132%" y="511.50">&lt;..</text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (915 samples, 1.79%)</title><rect x="88.6632%" y="485" width="1.7937%" height="15" fill="rgb(252,33,42)" fg:x="45228" fg:w="915"/><text x="88.9132%" y="495.50">&lt;..</text></g><g><title>rand::rng::Rng::gen (700 samples, 1.37%)</title><rect x="89.0847%" y="469" width="1.3723%" height="15" fill="rgb(209,212,41)" fg:x="45443" fg:w="700"/><text x="89.3347%" y="479.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (695 samples, 1.36%)</title><rect x="89.0945%" y="453" width="1.3625%" height="15" fill="rgb(207,154,6)" fg:x="45448" fg:w="695"/><text x="89.3445%" y="463.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (695 samples, 1.36%)</title><rect x="89.0945%" y="437" width="1.3625%" height="15" fill="rgb(223,64,47)" fg:x="45448" fg:w="695"/><text x="89.3445%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (8 samples, 0.02%)</title><rect x="91.9253%" y="517" width="0.0157%" height="15" fill="rgb(211,161,38)" fg:x="46892" fg:w="8"/><text x="92.1753%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (8 samples, 0.02%)</title><rect x="91.9253%" y="501" width="0.0157%" height="15" fill="rgb(219,138,40)" fg:x="46892" fg:w="8"/><text x="92.1753%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (8 samples, 0.02%)</title><rect x="91.9253%" y="485" width="0.0157%" height="15" fill="rgb(241,228,46)" fg:x="46892" fg:w="8"/><text x="92.1753%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (53 samples, 0.10%)</title><rect x="91.9566%" y="517" width="0.1039%" height="15" fill="rgb(223,209,38)" fg:x="46908" fg:w="53"/><text x="92.2066%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (53 samples, 0.10%)</title><rect x="91.9566%" y="501" width="0.1039%" height="15" fill="rgb(236,164,45)" fg:x="46908" fg:w="53"/><text x="92.2066%" y="511.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (20 samples, 0.04%)</title><rect x="92.0213%" y="485" width="0.0392%" height="15" fill="rgb(231,15,5)" fg:x="46941" fg:w="20"/><text x="92.2713%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (44 samples, 0.09%)</title><rect x="92.0605%" y="501" width="0.0863%" height="15" fill="rgb(252,35,15)" fg:x="46961" fg:w="44"/><text x="92.3105%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (44 samples, 0.09%)</title><rect x="92.0605%" y="485" width="0.0863%" height="15" fill="rgb(248,181,18)" fg:x="46961" fg:w="44"/><text x="92.3105%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (44 samples, 0.09%)</title><rect x="92.0605%" y="469" width="0.0863%" height="15" fill="rgb(233,39,42)" fg:x="46961" fg:w="44"/><text x="92.3105%" y="479.50"></text></g><g><title>&lt;montecarlo::latice::Edge as core::clone::Clone&gt;::clone (33 samples, 0.06%)</title><rect x="92.1468%" y="501" width="0.0647%" height="15" fill="rgb(238,110,33)" fg:x="47005" fg:w="33"/><text x="92.3968%" y="511.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for usize&gt;::clone (33 samples, 0.06%)</title><rect x="92.1468%" y="485" width="0.0647%" height="15" fill="rgb(233,195,10)" fg:x="47005" fg:w="33"/><text x="92.3968%" y="495.50"></text></g><g><title>&lt;usize as rand::distributions::utils::WideningMultiply&gt;::wmul (48 samples, 0.09%)</title><rect x="92.2370%" y="437" width="0.0941%" height="15" fill="rgb(254,105,3)" fg:x="47051" fg:w="48"/><text x="92.4870%" y="447.50"></text></g><g><title>&lt;u64 as rand::distributions::utils::WideningMultiply&gt;::wmul (48 samples, 0.09%)</title><rect x="92.2370%" y="421" width="0.0941%" height="15" fill="rgb(221,225,9)" fg:x="47051" fg:w="48"/><text x="92.4870%" y="431.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (22 samples, 0.04%)</title><rect x="92.5467%" y="357" width="0.0431%" height="15" fill="rgb(224,227,45)" fg:x="47209" fg:w="22"/><text x="92.7967%" y="367.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (8 samples, 0.02%)</title><rect x="92.6075%" y="245" width="0.0157%" height="15" fill="rgb(229,198,43)" fg:x="47240" fg:w="8"/><text x="92.8575%" y="255.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (8 samples, 0.02%)</title><rect x="92.6075%" y="229" width="0.0157%" height="15" fill="rgb(206,209,35)" fg:x="47240" fg:w="8"/><text x="92.8575%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.01%)</title><rect x="92.6232%" y="245" width="0.0118%" height="15" fill="rgb(245,195,53)" fg:x="47248" fg:w="6"/><text x="92.8732%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.01%)</title><rect x="92.6232%" y="229" width="0.0118%" height="15" fill="rgb(240,92,26)" fg:x="47248" fg:w="6"/><text x="92.8732%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (30 samples, 0.06%)</title><rect x="92.6526%" y="229" width="0.0588%" height="15" fill="rgb(207,40,23)" fg:x="47263" fg:w="30"/><text x="92.9026%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (30 samples, 0.06%)</title><rect x="92.6526%" y="213" width="0.0588%" height="15" fill="rgb(223,111,35)" fg:x="47263" fg:w="30"/><text x="92.9026%" y="223.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (30 samples, 0.06%)</title><rect x="92.6526%" y="197" width="0.0588%" height="15" fill="rgb(229,147,28)" fg:x="47263" fg:w="30"/><text x="92.9026%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (30 samples, 0.06%)</title><rect x="92.6526%" y="181" width="0.0588%" height="15" fill="rgb(211,29,28)" fg:x="47263" fg:w="30"/><text x="92.9026%" y="191.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (26 samples, 0.05%)</title><rect x="92.7114%" y="229" width="0.0510%" height="15" fill="rgb(228,72,33)" fg:x="47293" fg:w="26"/><text x="92.9614%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (26 samples, 0.05%)</title><rect x="92.7114%" y="213" width="0.0510%" height="15" fill="rgb(205,214,31)" fg:x="47293" fg:w="26"/><text x="92.9614%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (26 samples, 0.05%)</title><rect x="92.7114%" y="197" width="0.0510%" height="15" fill="rgb(224,111,15)" fg:x="47293" fg:w="26"/><text x="92.9614%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (26 samples, 0.05%)</title><rect x="92.7623%" y="229" width="0.0510%" height="15" fill="rgb(253,21,26)" fg:x="47319" fg:w="26"/><text x="93.0123%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (26 samples, 0.05%)</title><rect x="92.7623%" y="213" width="0.0510%" height="15" fill="rgb(245,139,43)" fg:x="47319" fg:w="26"/><text x="93.0123%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (26 samples, 0.05%)</title><rect x="92.7623%" y="197" width="0.0510%" height="15" fill="rgb(252,170,7)" fg:x="47319" fg:w="26"/><text x="93.0123%" y="207.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (34 samples, 0.07%)</title><rect x="92.8133%" y="197" width="0.0667%" height="15" fill="rgb(231,118,14)" fg:x="47345" fg:w="34"/><text x="93.0633%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (40 samples, 0.08%)</title><rect x="92.8133%" y="229" width="0.0784%" height="15" fill="rgb(238,83,0)" fg:x="47345" fg:w="40"/><text x="93.0633%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (40 samples, 0.08%)</title><rect x="92.8133%" y="213" width="0.0784%" height="15" fill="rgb(221,39,39)" fg:x="47345" fg:w="40"/><text x="93.0633%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (6 samples, 0.01%)</title><rect x="92.8800%" y="197" width="0.0118%" height="15" fill="rgb(222,119,46)" fg:x="47379" fg:w="6"/><text x="93.1300%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (10 samples, 0.02%)</title><rect x="92.8917%" y="229" width="0.0196%" height="15" fill="rgb(222,165,49)" fg:x="47385" fg:w="10"/><text x="93.1417%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (10 samples, 0.02%)</title><rect x="92.8917%" y="213" width="0.0196%" height="15" fill="rgb(219,113,52)" fg:x="47385" fg:w="10"/><text x="93.1417%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (10 samples, 0.02%)</title><rect x="92.8917%" y="197" width="0.0196%" height="15" fill="rgb(214,7,15)" fg:x="47385" fg:w="10"/><text x="93.1417%" y="207.50"></text></g><g><title>rand_chacha::guts::round (160 samples, 0.31%)</title><rect x="92.6526%" y="245" width="0.3137%" height="15" fill="rgb(235,32,4)" fg:x="47263" fg:w="160"/><text x="92.9026%" y="255.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (28 samples, 0.05%)</title><rect x="92.9113%" y="229" width="0.0549%" height="15" fill="rgb(238,90,54)" fg:x="47395" fg:w="28"/><text x="93.1613%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (28 samples, 0.05%)</title><rect x="92.9113%" y="213" width="0.0549%" height="15" fill="rgb(213,208,19)" fg:x="47395" fg:w="28"/><text x="93.1613%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (28 samples, 0.05%)</title><rect x="92.9113%" y="197" width="0.0549%" height="15" fill="rgb(233,156,4)" fg:x="47395" fg:w="28"/><text x="93.1613%" y="207.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (196 samples, 0.38%)</title><rect x="92.5938%" y="293" width="0.3842%" height="15" fill="rgb(207,194,5)" fg:x="47233" fg:w="196"/><text x="92.8438%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (196 samples, 0.38%)</title><rect x="92.5938%" y="277" width="0.3842%" height="15" fill="rgb(206,111,30)" fg:x="47233" fg:w="196"/><text x="92.8438%" y="287.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (194 samples, 0.38%)</title><rect x="92.5977%" y="261" width="0.3803%" height="15" fill="rgb(243,70,54)" fg:x="47235" fg:w="194"/><text x="92.8477%" y="271.50"></text></g><g><title>rand_chacha::guts::undiagonalize (6 samples, 0.01%)</title><rect x="92.9662%" y="245" width="0.0118%" height="15" fill="rgb(242,28,8)" fg:x="47423" fg:w="6"/><text x="93.2162%" y="255.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (199 samples, 0.39%)</title><rect x="92.5898%" y="325" width="0.3901%" height="15" fill="rgb(219,106,18)" fg:x="47231" fg:w="199"/><text x="92.8398%" y="335.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (199 samples, 0.39%)</title><rect x="92.5898%" y="309" width="0.3901%" height="15" fill="rgb(244,222,10)" fg:x="47231" fg:w="199"/><text x="92.8398%" y="319.50"></text></g><g><title>montecarlo::latice::Latice::random_edge (473 samples, 0.93%)</title><rect x="92.0605%" y="517" width="0.9273%" height="15" fill="rgb(236,179,52)" fg:x="46961" fg:w="473"/><text x="92.3105%" y="527.50"></text></g><g><title>rand::rng::Rng::gen_range (396 samples, 0.78%)</title><rect x="92.2115%" y="501" width="0.7763%" height="15" fill="rgb(213,23,39)" fg:x="47038" fg:w="396"/><text x="92.4615%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (389 samples, 0.76%)</title><rect x="92.2252%" y="485" width="0.7626%" height="15" fill="rgb(238,48,10)" fg:x="47045" fg:w="389"/><text x="92.4752%" y="495.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (389 samples, 0.76%)</title><rect x="92.2252%" y="469" width="0.7626%" height="15" fill="rgb(251,196,23)" fg:x="47045" fg:w="389"/><text x="92.4752%" y="479.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (389 samples, 0.76%)</title><rect x="92.2252%" y="453" width="0.7626%" height="15" fill="rgb(250,152,24)" fg:x="47045" fg:w="389"/><text x="92.4752%" y="463.50"></text></g><g><title>rand::rng::Rng::gen (334 samples, 0.65%)</title><rect x="92.3330%" y="437" width="0.6548%" height="15" fill="rgb(209,150,17)" fg:x="47100" fg:w="334"/><text x="92.5830%" y="447.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (334 samples, 0.65%)</title><rect x="92.3330%" y="421" width="0.6548%" height="15" fill="rgb(234,202,34)" fg:x="47100" fg:w="334"/><text x="92.5830%" y="431.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (334 samples, 0.65%)</title><rect x="92.3330%" y="405" width="0.6548%" height="15" fill="rgb(253,148,53)" fg:x="47100" fg:w="334"/><text x="92.5830%" y="415.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (334 samples, 0.65%)</title><rect x="92.3330%" y="389" width="0.6548%" height="15" fill="rgb(218,129,16)" fg:x="47100" fg:w="334"/><text x="92.5830%" y="399.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (334 samples, 0.65%)</title><rect x="92.3330%" y="373" width="0.6548%" height="15" fill="rgb(216,85,19)" fg:x="47100" fg:w="334"/><text x="92.5830%" y="383.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (203 samples, 0.40%)</title><rect x="92.5898%" y="357" width="0.3980%" height="15" fill="rgb(235,228,7)" fg:x="47231" fg:w="203"/><text x="92.8398%" y="367.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (203 samples, 0.40%)</title><rect x="92.5898%" y="341" width="0.3980%" height="15" fill="rgb(245,175,0)" fg:x="47231" fg:w="203"/><text x="92.8398%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (16 samples, 0.03%)</title><rect x="93.0250%" y="501" width="0.0314%" height="15" fill="rgb(208,168,36)" fg:x="47453" fg:w="16"/><text x="93.2750%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (16 samples, 0.03%)</title><rect x="93.0250%" y="485" width="0.0314%" height="15" fill="rgb(246,171,24)" fg:x="47453" fg:w="16"/><text x="93.2750%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (16 samples, 0.03%)</title><rect x="93.0250%" y="469" width="0.0314%" height="15" fill="rgb(215,142,24)" fg:x="47453" fg:w="16"/><text x="93.2750%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (14 samples, 0.03%)</title><rect x="93.0564%" y="501" width="0.0274%" height="15" fill="rgb(250,187,7)" fg:x="47469" fg:w="14"/><text x="93.3064%" y="511.50"></text></g><g><title>core::ptr::read (10 samples, 0.02%)</title><rect x="93.0838%" y="469" width="0.0196%" height="15" fill="rgb(228,66,33)" fg:x="47483" fg:w="10"/><text x="93.3338%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (11 samples, 0.02%)</title><rect x="93.0838%" y="501" width="0.0216%" height="15" fill="rgb(234,215,21)" fg:x="47483" fg:w="11"/><text x="93.3338%" y="511.50"></text></g><g><title>core::mem::replace (11 samples, 0.02%)</title><rect x="93.0838%" y="485" width="0.0216%" height="15" fill="rgb(222,191,20)" fg:x="47483" fg:w="11"/><text x="93.3338%" y="495.50"></text></g><g><title>montecarlo::state::State::delete (67 samples, 0.13%)</title><rect x="92.9878%" y="517" width="0.1313%" height="15" fill="rgb(245,79,54)" fg:x="47434" fg:w="67"/><text x="93.2378%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (7 samples, 0.01%)</title><rect x="93.1054%" y="501" width="0.0137%" height="15" fill="rgb(240,10,37)" fg:x="47494" fg:w="7"/><text x="93.3554%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (58 samples, 0.11%)</title><rect x="93.4387%" y="501" width="0.1137%" height="15" fill="rgb(214,192,32)" fg:x="47664" fg:w="58"/><text x="93.6887%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (8 samples, 0.02%)</title><rect x="93.5543%" y="501" width="0.0157%" height="15" fill="rgb(209,36,54)" fg:x="47723" fg:w="8"/><text x="93.8043%" y="511.50"></text></g><g><title>montecarlo::state::State::diagonal_update (27 samples, 0.05%)</title><rect x="93.5700%" y="501" width="0.0529%" height="15" fill="rgb(220,10,11)" fg:x="47731" fg:w="27"/><text x="93.8200%" y="511.50"></text></g><g><title>montecarlo::state::State::insert_diag (2,531 samples, 4.96%)</title><rect x="93.1211%" y="517" width="4.9617%" height="15" fill="rgb(221,106,17)" fg:x="47502" fg:w="2531"/><text x="93.3711%" y="527.50">montec..</text></g><g><title>montecarlo::state::State::trace (2,275 samples, 4.46%)</title><rect x="93.6229%" y="501" width="4.4598%" height="15" fill="rgb(251,142,44)" fg:x="47758" fg:w="2275"/><text x="93.8729%" y="511.50">monte..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (162 samples, 0.32%)</title><rect x="97.7652%" y="485" width="0.3176%" height="15" fill="rgb(238,13,15)" fg:x="49871" fg:w="162"/><text x="98.0152%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (162 samples, 0.32%)</title><rect x="97.7652%" y="469" width="0.3176%" height="15" fill="rgb(208,107,27)" fg:x="49871" fg:w="162"/><text x="98.0152%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (162 samples, 0.32%)</title><rect x="97.7652%" y="453" width="0.3176%" height="15" fill="rgb(205,136,37)" fg:x="49871" fg:w="162"/><text x="98.0152%" y="463.50"></text></g><g><title>&lt;f64 as rand::distributions::utils::FloatSIMDUtils&gt;::cast_from_int (22 samples, 0.04%)</title><rect x="98.0847%" y="485" width="0.0431%" height="15" fill="rgb(250,205,27)" fg:x="50034" fg:w="22"/><text x="98.3347%" y="495.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (20 samples, 0.04%)</title><rect x="98.1808%" y="405" width="0.0392%" height="15" fill="rgb(210,80,43)" fg:x="50083" fg:w="20"/><text x="98.4308%" y="415.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (7 samples, 0.01%)</title><rect x="98.2357%" y="293" width="0.0137%" height="15" fill="rgb(247,160,36)" fg:x="50111" fg:w="7"/><text x="98.4857%" y="303.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (7 samples, 0.01%)</title><rect x="98.2357%" y="277" width="0.0137%" height="15" fill="rgb(234,13,49)" fg:x="50111" fg:w="7"/><text x="98.4857%" y="287.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (23 samples, 0.05%)</title><rect x="98.2651%" y="277" width="0.0451%" height="15" fill="rgb(234,122,0)" fg:x="50126" fg:w="23"/><text x="98.5151%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (23 samples, 0.05%)</title><rect x="98.2651%" y="261" width="0.0451%" height="15" fill="rgb(207,146,38)" fg:x="50126" fg:w="23"/><text x="98.5151%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (23 samples, 0.05%)</title><rect x="98.2651%" y="245" width="0.0451%" height="15" fill="rgb(207,177,25)" fg:x="50126" fg:w="23"/><text x="98.5151%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (23 samples, 0.05%)</title><rect x="98.2651%" y="229" width="0.0451%" height="15" fill="rgb(211,178,42)" fg:x="50126" fg:w="23"/><text x="98.5151%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (12 samples, 0.02%)</title><rect x="98.3102%" y="277" width="0.0235%" height="15" fill="rgb(230,69,54)" fg:x="50149" fg:w="12"/><text x="98.5602%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (12 samples, 0.02%)</title><rect x="98.3102%" y="261" width="0.0235%" height="15" fill="rgb(214,135,41)" fg:x="50149" fg:w="12"/><text x="98.5602%" y="271.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (12 samples, 0.02%)</title><rect x="98.3102%" y="245" width="0.0235%" height="15" fill="rgb(237,67,25)" fg:x="50149" fg:w="12"/><text x="98.5602%" y="255.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (18 samples, 0.04%)</title><rect x="98.3337%" y="277" width="0.0353%" height="15" fill="rgb(222,189,50)" fg:x="50161" fg:w="18"/><text x="98.5837%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (18 samples, 0.04%)</title><rect x="98.3337%" y="261" width="0.0353%" height="15" fill="rgb(245,148,34)" fg:x="50161" fg:w="18"/><text x="98.5837%" y="271.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (18 samples, 0.04%)</title><rect x="98.3337%" y="245" width="0.0353%" height="15" fill="rgb(222,29,6)" fg:x="50161" fg:w="18"/><text x="98.5837%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (20 samples, 0.04%)</title><rect x="98.3690%" y="245" width="0.0392%" height="15" fill="rgb(221,189,43)" fg:x="50179" fg:w="20"/><text x="98.6190%" y="255.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (21 samples, 0.04%)</title><rect x="98.3690%" y="277" width="0.0412%" height="15" fill="rgb(207,36,27)" fg:x="50179" fg:w="21"/><text x="98.6190%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (21 samples, 0.04%)</title><rect x="98.3690%" y="261" width="0.0412%" height="15" fill="rgb(217,90,24)" fg:x="50179" fg:w="21"/><text x="98.6190%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (20 samples, 0.04%)</title><rect x="98.4101%" y="277" width="0.0392%" height="15" fill="rgb(224,66,35)" fg:x="50200" fg:w="20"/><text x="98.6601%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (20 samples, 0.04%)</title><rect x="98.4101%" y="261" width="0.0392%" height="15" fill="rgb(221,13,50)" fg:x="50200" fg:w="20"/><text x="98.6601%" y="271.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (20 samples, 0.04%)</title><rect x="98.4101%" y="245" width="0.0392%" height="15" fill="rgb(236,68,49)" fg:x="50200" fg:w="20"/><text x="98.6601%" y="255.50"></text></g><g><title>rand_chacha::guts::round (109 samples, 0.21%)</title><rect x="98.2651%" y="293" width="0.2137%" height="15" fill="rgb(229,146,28)" fg:x="50126" fg:w="109"/><text x="98.5151%" y="303.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (15 samples, 0.03%)</title><rect x="98.4494%" y="277" width="0.0294%" height="15" fill="rgb(225,31,38)" fg:x="50220" fg:w="15"/><text x="98.6994%" y="287.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (15 samples, 0.03%)</title><rect x="98.4494%" y="261" width="0.0294%" height="15" fill="rgb(250,208,3)" fg:x="50220" fg:w="15"/><text x="98.6994%" y="271.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (15 samples, 0.03%)</title><rect x="98.4494%" y="245" width="0.0294%" height="15" fill="rgb(246,54,23)" fg:x="50220" fg:w="15"/><text x="98.6994%" y="255.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (135 samples, 0.26%)</title><rect x="98.2220%" y="373" width="0.2646%" height="15" fill="rgb(243,76,11)" fg:x="50104" fg:w="135"/><text x="98.4720%" y="383.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (135 samples, 0.26%)</title><rect x="98.2220%" y="357" width="0.2646%" height="15" fill="rgb(245,21,50)" fg:x="50104" fg:w="135"/><text x="98.4720%" y="367.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (133 samples, 0.26%)</title><rect x="98.2259%" y="341" width="0.2607%" height="15" fill="rgb(228,9,43)" fg:x="50106" fg:w="133"/><text x="98.4759%" y="351.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (133 samples, 0.26%)</title><rect x="98.2259%" y="325" width="0.2607%" height="15" fill="rgb(208,100,47)" fg:x="50106" fg:w="133"/><text x="98.4759%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (133 samples, 0.26%)</title><rect x="98.2259%" y="309" width="0.2607%" height="15" fill="rgb(232,26,8)" fg:x="50106" fg:w="133"/><text x="98.4759%" y="319.50"></text></g><g><title>montecarlo::state::State::diagonal_update (4,096 samples, 8.03%)</title><rect x="90.4648%" y="533" width="8.0296%" height="15" fill="rgb(216,166,38)" fg:x="46147" fg:w="4096"/><text x="90.7148%" y="543.50">montecarlo:..</text></g><g><title>rand::rng::Rng::gen (210 samples, 0.41%)</title><rect x="98.0828%" y="517" width="0.4117%" height="15" fill="rgb(251,202,51)" fg:x="50033" fg:w="210"/><text x="98.3328%" y="527.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (210 samples, 0.41%)</title><rect x="98.0828%" y="501" width="0.4117%" height="15" fill="rgb(254,216,34)" fg:x="50033" fg:w="210"/><text x="98.3328%" y="511.50"></text></g><g><title>rand::rng::Rng::gen (186 samples, 0.36%)</title><rect x="98.1298%" y="485" width="0.3646%" height="15" fill="rgb(251,32,27)" fg:x="50057" fg:w="186"/><text x="98.3798%" y="495.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (186 samples, 0.36%)</title><rect x="98.1298%" y="469" width="0.3646%" height="15" fill="rgb(208,127,28)" fg:x="50057" fg:w="186"/><text x="98.3798%" y="479.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (186 samples, 0.36%)</title><rect x="98.1298%" y="453" width="0.3646%" height="15" fill="rgb(224,137,22)" fg:x="50057" fg:w="186"/><text x="98.3798%" y="463.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (186 samples, 0.36%)</title><rect x="98.1298%" y="437" width="0.3646%" height="15" fill="rgb(254,70,32)" fg:x="50057" fg:w="186"/><text x="98.3798%" y="447.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (186 samples, 0.36%)</title><rect x="98.1298%" y="421" width="0.3646%" height="15" fill="rgb(229,75,37)" fg:x="50057" fg:w="186"/><text x="98.3798%" y="431.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (140 samples, 0.27%)</title><rect x="98.2200%" y="405" width="0.2745%" height="15" fill="rgb(252,64,23)" fg:x="50103" fg:w="140"/><text x="98.4700%" y="415.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (140 samples, 0.27%)</title><rect x="98.2200%" y="389" width="0.2745%" height="15" fill="rgb(232,162,48)" fg:x="50103" fg:w="140"/><text x="98.4700%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (77 samples, 0.15%)</title><rect x="98.6023%" y="517" width="0.1509%" height="15" fill="rgb(246,160,12)" fg:x="50298" fg:w="77"/><text x="98.8523%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (75 samples, 0.15%)</title><rect x="98.6062%" y="501" width="0.1470%" height="15" fill="rgb(247,166,0)" fg:x="50300" fg:w="75"/><text x="98.8562%" y="511.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (75 samples, 0.15%)</title><rect x="98.6062%" y="485" width="0.1470%" height="15" fill="rgb(249,219,21)" fg:x="50300" fg:w="75"/><text x="98.8562%" y="495.50"></text></g><g><title>_int_free (9 samples, 0.02%)</title><rect x="98.9571%" y="373" width="0.0176%" height="15" fill="rgb(205,209,3)" fg:x="50479" fg:w="9"/><text x="99.2071%" y="383.50"></text></g><g><title>_int_malloc (8 samples, 0.02%)</title><rect x="98.9747%" y="373" width="0.0157%" height="15" fill="rgb(243,44,1)" fg:x="50488" fg:w="8"/><text x="99.2247%" y="383.50"></text></g><g><title>__GI___libc_realloc (37 samples, 0.07%)</title><rect x="98.9218%" y="405" width="0.0725%" height="15" fill="rgb(206,159,16)" fg:x="50461" fg:w="37"/><text x="99.1718%" y="415.50"></text></g><g><title>_int_realloc (27 samples, 0.05%)</title><rect x="98.9414%" y="389" width="0.0529%" height="15" fill="rgb(244,77,30)" fg:x="50471" fg:w="27"/><text x="99.1914%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (40 samples, 0.08%)</title><rect x="98.9218%" y="453" width="0.0784%" height="15" fill="rgb(218,69,12)" fg:x="50461" fg:w="40"/><text x="99.1718%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (40 samples, 0.08%)</title><rect x="98.9218%" y="437" width="0.0784%" height="15" fill="rgb(212,87,7)" fg:x="50461" fg:w="40"/><text x="99.1718%" y="447.50"></text></g><g><title>alloc::alloc::realloc (40 samples, 0.08%)</title><rect x="98.9218%" y="421" width="0.0784%" height="15" fill="rgb(245,114,25)" fg:x="50461" fg:w="40"/><text x="99.1718%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (48 samples, 0.09%)</title><rect x="98.9100%" y="469" width="0.0941%" height="15" fill="rgb(210,61,42)" fg:x="50455" fg:w="48"/><text x="99.1600%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (62 samples, 0.12%)</title><rect x="98.8924%" y="501" width="0.1215%" height="15" fill="rgb(211,52,33)" fg:x="50446" fg:w="62"/><text x="99.1424%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (62 samples, 0.12%)</title><rect x="98.8924%" y="485" width="0.1215%" height="15" fill="rgb(234,58,33)" fg:x="50446" fg:w="62"/><text x="99.1424%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (6 samples, 0.01%)</title><rect x="99.0139%" y="501" width="0.0118%" height="15" fill="rgb(220,115,36)" fg:x="50508" fg:w="6"/><text x="99.2639%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.01%)</title><rect x="99.0139%" y="485" width="0.0118%" height="15" fill="rgb(243,153,54)" fg:x="50508" fg:w="6"/><text x="99.2639%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (184 samples, 0.36%)</title><rect x="98.7532%" y="517" width="0.3607%" height="15" fill="rgb(251,47,18)" fg:x="50375" fg:w="184"/><text x="99.0032%" y="527.50"></text></g><g><title>core::ptr::write (45 samples, 0.09%)</title><rect x="99.0257%" y="501" width="0.0882%" height="15" fill="rgb(242,102,42)" fg:x="50514" fg:w="45"/><text x="99.2757%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (10 samples, 0.02%)</title><rect x="99.1139%" y="517" width="0.0196%" height="15" fill="rgb(234,31,38)" fg:x="50559" fg:w="10"/><text x="99.3639%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (10 samples, 0.02%)</title><rect x="99.1139%" y="501" width="0.0196%" height="15" fill="rgb(221,117,51)" fg:x="50559" fg:w="10"/><text x="99.3639%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (76 samples, 0.15%)</title><rect x="99.1335%" y="517" width="0.1490%" height="15" fill="rgb(212,20,18)" fg:x="50569" fg:w="76"/><text x="99.3835%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (6 samples, 0.01%)</title><rect x="99.2825%" y="517" width="0.0118%" height="15" fill="rgb(245,133,36)" fg:x="50645" fg:w="6"/><text x="99.5325%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (6 samples, 0.01%)</title><rect x="99.2825%" y="501" width="0.0118%" height="15" fill="rgb(212,6,19)" fg:x="50645" fg:w="6"/><text x="99.5325%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.01%)</title><rect x="99.2825%" y="485" width="0.0118%" height="15" fill="rgb(218,1,36)" fg:x="50645" fg:w="6"/><text x="99.5325%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.01%)</title><rect x="99.2825%" y="469" width="0.0118%" height="15" fill="rgb(246,84,54)" fg:x="50645" fg:w="6"/><text x="99.5325%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.01%)</title><rect x="99.2825%" y="453" width="0.0118%" height="15" fill="rgb(242,110,6)" fg:x="50645" fg:w="6"/><text x="99.5325%" y="463.50"></text></g><g><title>__GI___libc_free (6 samples, 0.01%)</title><rect x="99.2825%" y="437" width="0.0118%" height="15" fill="rgb(214,47,5)" fg:x="50645" fg:w="6"/><text x="99.5325%" y="447.50"></text></g><g><title>_int_free (6 samples, 0.01%)</title><rect x="99.2825%" y="421" width="0.0118%" height="15" fill="rgb(218,159,25)" fg:x="50645" fg:w="6"/><text x="99.5325%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (22 samples, 0.04%)</title><rect x="99.4001%" y="501" width="0.0431%" height="15" fill="rgb(215,211,28)" fg:x="50705" fg:w="22"/><text x="99.6501%" y="511.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (22 samples, 0.04%)</title><rect x="99.4001%" y="485" width="0.0431%" height="15" fill="rgb(238,59,32)" fg:x="50705" fg:w="22"/><text x="99.6501%" y="495.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (22 samples, 0.04%)</title><rect x="99.4001%" y="469" width="0.0431%" height="15" fill="rgb(226,82,3)" fg:x="50705" fg:w="22"/><text x="99.6501%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (99 samples, 0.19%)</title><rect x="99.4531%" y="501" width="0.1941%" height="15" fill="rgb(240,164,32)" fg:x="50732" fg:w="99"/><text x="99.7031%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (29 samples, 0.06%)</title><rect x="99.6471%" y="501" width="0.0569%" height="15" fill="rgb(232,46,7)" fg:x="50831" fg:w="29"/><text x="99.8971%" y="511.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (26 samples, 0.05%)</title><rect x="99.7040%" y="501" width="0.0510%" height="15" fill="rgb(229,129,53)" fg:x="50860" fg:w="26"/><text x="99.9540%" y="511.50"></text></g><g><title>montecarlo::state::State::directed_loop_update (261 samples, 0.51%)</title><rect x="99.2943%" y="517" width="0.5117%" height="15" fill="rgb(234,188,29)" fg:x="50651" fg:w="261"/><text x="99.5443%" y="527.50"></text></g><g><title>montecarlo::state::OperatorType::flip (26 samples, 0.05%)</title><rect x="99.7550%" y="501" width="0.0510%" height="15" fill="rgb(246,141,4)" fg:x="50886" fg:w="26"/><text x="100.0050%" y="511.50"></text></g><g><title>&lt;usize as rand::distributions::utils::WideningMultiply&gt;::wmul (6 samples, 0.01%)</title><rect x="99.8216%" y="453" width="0.0118%" height="15" fill="rgb(229,23,39)" fg:x="50920" fg:w="6"/><text x="100.0716%" y="463.50"></text></g><g><title>&lt;u64 as rand::distributions::utils::WideningMultiply&gt;::wmul (6 samples, 0.01%)</title><rect x="99.8216%" y="437" width="0.0118%" height="15" fill="rgb(206,12,3)" fg:x="50920" fg:w="6"/><text x="100.0716%" y="447.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (7 samples, 0.01%)</title><rect x="99.8824%" y="245" width="0.0137%" height="15" fill="rgb(252,226,20)" fg:x="50951" fg:w="7"/><text x="100.1324%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (7 samples, 0.01%)</title><rect x="99.8824%" y="229" width="0.0137%" height="15" fill="rgb(216,123,35)" fg:x="50951" fg:w="7"/><text x="100.1324%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (7 samples, 0.01%)</title><rect x="99.8824%" y="213" width="0.0137%" height="15" fill="rgb(212,68,40)" fg:x="50951" fg:w="7"/><text x="100.1324%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (7 samples, 0.01%)</title><rect x="99.8824%" y="197" width="0.0137%" height="15" fill="rgb(254,125,32)" fg:x="50951" fg:w="7"/><text x="100.1324%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (7 samples, 0.01%)</title><rect x="99.8961%" y="245" width="0.0137%" height="15" fill="rgb(253,97,22)" fg:x="50958" fg:w="7"/><text x="100.1461%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (7 samples, 0.01%)</title><rect x="99.8961%" y="229" width="0.0137%" height="15" fill="rgb(241,101,14)" fg:x="50958" fg:w="7"/><text x="100.1461%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (7 samples, 0.01%)</title><rect x="99.8961%" y="213" width="0.0137%" height="15" fill="rgb(238,103,29)" fg:x="50958" fg:w="7"/><text x="100.1461%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (7 samples, 0.01%)</title><rect x="99.9098%" y="245" width="0.0137%" height="15" fill="rgb(233,195,47)" fg:x="50965" fg:w="7"/><text x="100.1598%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (7 samples, 0.01%)</title><rect x="99.9098%" y="229" width="0.0137%" height="15" fill="rgb(246,218,30)" fg:x="50965" fg:w="7"/><text x="100.1598%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (7 samples, 0.01%)</title><rect x="99.9098%" y="213" width="0.0137%" height="15" fill="rgb(219,145,47)" fg:x="50965" fg:w="7"/><text x="100.1598%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (14 samples, 0.03%)</title><rect x="99.9235%" y="245" width="0.0274%" height="15" fill="rgb(243,12,26)" fg:x="50972" fg:w="14"/><text x="100.1735%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (14 samples, 0.03%)</title><rect x="99.9235%" y="229" width="0.0274%" height="15" fill="rgb(214,87,16)" fg:x="50972" fg:w="14"/><text x="100.1735%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (14 samples, 0.03%)</title><rect x="99.9235%" y="213" width="0.0274%" height="15" fill="rgb(208,99,42)" fg:x="50972" fg:w="14"/><text x="100.1735%" y="223.50"></text></g><g><title>rand_chacha::guts::round (44 samples, 0.09%)</title><rect x="99.8824%" y="261" width="0.0863%" height="15" fill="rgb(253,99,2)" fg:x="50951" fg:w="44"/><text x="100.1324%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (6 samples, 0.01%)</title><rect x="99.9569%" y="245" width="0.0118%" height="15" fill="rgb(220,168,23)" fg:x="50989" fg:w="6"/><text x="100.2069%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (6 samples, 0.01%)</title><rect x="99.9569%" y="229" width="0.0118%" height="15" fill="rgb(242,38,24)" fg:x="50989" fg:w="6"/><text x="100.2069%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (6 samples, 0.01%)</title><rect x="99.9569%" y="213" width="0.0118%" height="15" fill="rgb(225,182,9)" fg:x="50989" fg:w="6"/><text x="100.2069%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (54 samples, 0.11%)</title><rect x="99.8667%" y="309" width="0.1059%" height="15" fill="rgb(243,178,37)" fg:x="50943" fg:w="54"/><text x="100.1167%" y="319.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (54 samples, 0.11%)</title><rect x="99.8667%" y="293" width="0.1059%" height="15" fill="rgb(232,139,19)" fg:x="50943" fg:w="54"/><text x="100.1167%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (53 samples, 0.10%)</title><rect x="99.8687%" y="277" width="0.1039%" height="15" fill="rgb(225,201,24)" fg:x="50944" fg:w="53"/><text x="100.1187%" y="287.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (57 samples, 0.11%)</title><rect x="99.8628%" y="341" width="0.1117%" height="15" fill="rgb(221,47,46)" fg:x="50941" fg:w="57"/><text x="100.1128%" y="351.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (56 samples, 0.11%)</title><rect x="99.8647%" y="325" width="0.1098%" height="15" fill="rgb(249,23,13)" fg:x="50942" fg:w="56"/><text x="100.1147%" y="335.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (75 samples, 0.15%)</title><rect x="99.8353%" y="405" width="0.1470%" height="15" fill="rgb(219,9,5)" fg:x="50927" fg:w="75"/><text x="100.0853%" y="415.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (75 samples, 0.15%)</title><rect x="99.8353%" y="389" width="0.1470%" height="15" fill="rgb(254,171,16)" fg:x="50927" fg:w="75"/><text x="100.0853%" y="399.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (62 samples, 0.12%)</title><rect x="99.8608%" y="373" width="0.1215%" height="15" fill="rgb(230,171,20)" fg:x="50940" fg:w="62"/><text x="100.1108%" y="383.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (62 samples, 0.12%)</title><rect x="99.8608%" y="357" width="0.1215%" height="15" fill="rgb(210,71,41)" fg:x="50940" fg:w="62"/><text x="100.1108%" y="367.50"></text></g><g><title>montecarlo::state::State::thermalize (4,860 samples, 9.53%)</title><rect x="90.4570%" y="549" width="9.5274%" height="15" fill="rgb(206,173,20)" fg:x="46143" fg:w="4860"/><text x="90.7070%" y="559.50">montecarlo::st..</text></g><g><title>montecarlo::state::State::off_diagonal_update (760 samples, 1.49%)</title><rect x="98.4944%" y="533" width="1.4899%" height="15" fill="rgb(233,88,34)" fg:x="50243" fg:w="760"/><text x="98.7444%" y="543.50"></text></g><g><title>rand::rng::Rng::gen_range (91 samples, 0.18%)</title><rect x="99.8059%" y="517" width="0.1784%" height="15" fill="rgb(223,209,46)" fg:x="50912" fg:w="91"/><text x="100.0559%" y="527.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (91 samples, 0.18%)</title><rect x="99.8059%" y="501" width="0.1784%" height="15" fill="rgb(250,43,18)" fg:x="50912" fg:w="91"/><text x="100.0559%" y="511.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (91 samples, 0.18%)</title><rect x="99.8059%" y="485" width="0.1784%" height="15" fill="rgb(208,13,10)" fg:x="50912" fg:w="91"/><text x="100.0559%" y="495.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (91 samples, 0.18%)</title><rect x="99.8059%" y="469" width="0.1784%" height="15" fill="rgb(212,200,36)" fg:x="50912" fg:w="91"/><text x="100.0559%" y="479.50"></text></g><g><title>rand::rng::Rng::gen (77 samples, 0.15%)</title><rect x="99.8334%" y="453" width="0.1509%" height="15" fill="rgb(225,90,30)" fg:x="50926" fg:w="77"/><text x="100.0834%" y="463.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (76 samples, 0.15%)</title><rect x="99.8353%" y="437" width="0.1490%" height="15" fill="rgb(236,182,39)" fg:x="50927" fg:w="76"/><text x="100.0853%" y="447.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (76 samples, 0.15%)</title><rect x="99.8353%" y="421" width="0.1490%" height="15" fill="rgb(212,144,35)" fg:x="50927" fg:w="76"/><text x="100.0853%" y="431.50"></text></g><g><title>montecarlo (51,006 samples, 99.99%)</title><rect x="0.0000%" y="709" width="99.9902%" height="15" fill="rgb(228,63,44)" fg:x="0" fg:w="51006"/><text x="0.2500%" y="719.50">montecarlo</text></g><g><title>_start (50,083 samples, 98.18%)</title><rect x="1.8094%" y="693" width="98.1808%" height="15" fill="rgb(228,109,6)" fg:x="923" fg:w="50083"/><text x="2.0594%" y="703.50">_start</text></g><g><title>__libc_start_main_impl (50,083 samples, 98.18%)</title><rect x="1.8094%" y="677" width="98.1808%" height="15" fill="rgb(238,117,24)" fg:x="923" fg:w="50083"/><text x="2.0594%" y="687.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (50,083 samples, 98.18%)</title><rect x="1.8094%" y="661" width="98.1808%" height="15" fill="rgb(242,26,26)" fg:x="923" fg:w="50083"/><text x="2.0594%" y="671.50">__libc_start_call_main</text></g><g><title>main (50,083 samples, 98.18%)</title><rect x="1.8094%" y="645" width="98.1808%" height="15" fill="rgb(221,92,48)" fg:x="923" fg:w="50083"/><text x="2.0594%" y="655.50">main</text></g><g><title>std::rt::lang_start_internal (50,083 samples, 98.18%)</title><rect x="1.8094%" y="629" width="98.1808%" height="15" fill="rgb(209,209,32)" fg:x="923" fg:w="50083"/><text x="2.0594%" y="639.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (50,083 samples, 98.18%)</title><rect x="1.8094%" y="613" width="98.1808%" height="15" fill="rgb(221,70,22)" fg:x="923" fg:w="50083"/><text x="2.0594%" y="623.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (50,083 samples, 98.18%)</title><rect x="1.8094%" y="597" width="98.1808%" height="15" fill="rgb(248,145,5)" fg:x="923" fg:w="50083"/><text x="2.0594%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (50,083 samples, 98.18%)</title><rect x="1.8094%" y="581" width="98.1808%" height="15" fill="rgb(226,116,26)" fg:x="923" fg:w="50083"/><text x="2.0594%" y="591.50">core::ops::function::FnOnce::call_once</text></g><g><title>montecarlo::main (50,083 samples, 98.18%)</title><rect x="1.8094%" y="565" width="98.1808%" height="15" fill="rgb(244,5,17)" fg:x="923" fg:w="50083"/><text x="2.0594%" y="575.50">montecarlo::main</text></g><g><title>all (51,011 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(252,159,33)" fg:x="0" fg:w="51011"/><text x="0.2500%" y="735.50"></text></g></svg></svg>